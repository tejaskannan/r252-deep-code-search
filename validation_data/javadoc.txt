asserts that the diagnostics contain a diagnostic on each line of the source file that matches our bug marker pattern. parses the bug marker pattern for the specific string to look for in the diagnostic.
extracts the patterns from a bug marker comment.
creates a list of arguments to pass to the compiler. uses default_args as the base and appends the overridden classpath, if provided, and any extraargs that were provided.
expects an error message matching matcher at the line below a comment matching the key. for example, given the source  bug: diagnostic matches: x a = b + c;  ... you can use expecterrormessage("x", predicates.containspattern("can't add b to c")); error message keys that don't match any diagnostics will cause test to fail.
returns a new compilationtesthelper.
loads resources of the provided class into javafileobjects.
loads a resource of the provided class into a javafileobject.
creates a javafileobject with the given name and content.
sets javac's -xdcompilepolicy flag to ensure that all classes in a file are attributed before any of them are lowered. error prone depends on this behavior when analyzing files that contain multiple top-level classes.
throws invalidcommandlineoptionexception if the -xdcompilepolicy flag is set to an unsupported value
returns true if the given source file should be excluded from analysis.
returns true if all declarations inside the given compilation unit have been visited.
an alternative to javacfilemanager#preregister(context) that installs a maskedclassloader.
parse import order string and create appropriate importorganizer.
loads the error prone version. this depends on the maven build, and will always return optional.absent() with other build systems.
returns a statistics collector that will ignore any statistics added to it, always returning an empty result for #counters.
returns a new statistics collector that will successfully count keys added to it.
puts a key-value pair directly in this builder's dictionary. mostly exists for testing.
returns a new errorproneflags object with the values of two errorproneflags objects added together. for flags that appear in both instances, the values in other override this.
given a string custom flag in the format "-xepopt:flagname=value", places the flag in this builder's dictionary, e.g. flagsmap["flagname"] = "value"
validates a type string, ensuring it is not generic and not an array type.
build an instance of a type.
return a visitorstate that has no error prone configuration, and can't report results. if using this method, consider moving to using utility methods not needing visitorsate
gets the original source code that represents the given node. note that this may be different from what is returned by calling .tostring() on the node. this returns exactly what is in the source code, whereas .tostring() pretty-prints the node from its ast representation.
find the first enclosing tree node of one of the given types.
returns the treepath to the nearest tree node of one of the given types. to instead retrieve the element directly, use #findenclosing(class...).
return a visitorstate configured for a new compilation, including error prone configuration.
return a visitorstate that has no error prone configuration, but can report findings to listener.
given the binary name of a class, returns the type. if this method returns null, the compiler doesn't have access to this type, which means that if you are comparing other types to this for equality or the subtype relation, your result would always be false even if it could create the type. thus it might be best to bail out early in your matcher if this method returns null on your type of interest.
given a list of command-line arguments, produce the corresponding errorproneoptions instance.
see javax.tools.optionchecker#issupportedoption(string)
generates the suppressioninfo for a compilationunittree. this differs in that matchers on compilationunittree will also be suppressed.
returns true if this checker should be considered suppressed given the signals present in this object. if the signals in this object say we're in generated code.
returns an instance of suppressioninfo that takes into account any suppression signals present on sym as well as those already stored in this. checks suppressions for any @suppresswarnings, android's suppresslint, and custom suppression annotations described by customsuppressionannostolookfor. we do not modify the existing suppression sets, so they can be restored when moving up the tree. we also avoid copying the suppression sets if the next node to explore does not have any suppressed warnings or custom suppression annotations. this is the common case. suppresswarnings symbol type.
severity is the passed in paramter. if this checker's current defaultseverity is the same as the argument, return this.
matches if a method or any method it overrides has an annotation of the given type. junit 4's "javax.annotation.nullable", or "some.package.outerclassname$innerclassname")
matches if this tree is enclosed by either a synchronized block or a synchronized method.
determines whether an expression refers to a symbol that has an annotation of the given type. this includes annotations inherited from superclasses due to . "javax.annotation.nullable", or "some.package.outerclassname$innerclassname")
match a method declaration with a specific enclosing class and method name. "com.google.common.base.preconditions"
matches a class in which at least one method matches the given methodmatcher.
matches if the given tree is inside a loop.
matches on the type of a variabletree ast node.
matches if an ast node is an instance of the given class.
matches a compound assignment operator ast node which matches a given left-operand matcher, a given right-operand matcher, and a specific compound assignment operator.
determines if an expression has an annotation referred to by the given mirror. accounts for binary names and annotations inherited due to .
matches if a variabletree is a field declaration, as opposed to a local variable, enum constant, parameter to a method, etc.
matches an expressionstatementtree based on its expressiontree.
a matcher that matches any ast node.
matches an ast node if it is a literal other than null.
matches an ast node that is transient.
matches an ast node if its parent node is matched by the given matcher. for example, parentnode(kindis(kind.return)) would match the this expression in return this;
matches an ast node if its type is an array type.
matches an ast node that represents a non-static field.
matches the boolean constant ( boolean#true or boolean#false) corresponding to the given value.
a matcher that matches no ast node.
matches an ast node if its type is either a primitive type or a void type.
matches an ast node of a given kind, for example, an annotation or a switch block.
applies the given matcher recursively to all descendants of an ast node, and matches if any matching descendant node is found.
matches an ast node if it is a method invocation and the given matchers match.
determines whether an expression has an annotation of the given class. this includes annotations inherited from superclasses due to .
matches a compound assignment operator ast node which matches a given left-operand matcher, a given right-operand matcher, and is one of a set of compound assignment operators. does not match compound assignment operators.
returns true if the tree node has the expected modifier.
matches a methodinvocation when the arguments at the two given indices are both the same variable, as determined by asthelpers#samevariable.
matches an class based on whether it is nested in another class or method.
matches an enhanced for loop if all the given matchers match.
determines whether an expression has an annotation with the given simple name. this does not include annotations inherited from superclasses due to .
matches an ast node if it is a method invocation and the method select matches methodselectmatcher. ignores any arguments.
matches when the receiver of an instance method is the same reference as a particular argument to the method. for example, receiversameasargument(1) would match obj.method("", obj)
matches if the method accepts the given number of arguments.
matches a type cast ast node if both of the given matchers match.
matches if this expressiontree refers to the same variable as the one passed into the matcher.
matches an ast node if its type is a primitive array type.
matches an assignment operator ast node if both of the given matchers match.
matches a statement ast node if the previous statement in the enclosing block matches the given matcher.
matches an ast node that represents a local variable or parameter.
compose several matchers together, such that the composite matches an ast node if any of the given matchers do.
matches an ast node which is the same object reference as the given node.
matches a constructor declaration in a specific enclosing class. "com.google.common.base.preconditions"
converts the given matcher to one that can be applied to any tree but is only executed when run on a tree of type and returns false for all other tree types.
determines whether an expression refers to a symbol that has an annotation of the given type. this includes annotations inherited from superclasses due to .
matches an ast node that represents a method declaration, based on the list of variablematchers. applies the variablematcher at index n to the parameter at index n and returns true iff they all match. returns false if the number of variablematchers provided does not match the number of parameters. if you pass no variablematchers, this will match methods with no parameters.
match a method declaration that starts with a given string.
matches an ast node if its type is a void type.
match a method declaration with a specific name.
matches on the initializer of a variabletree ast node.
matches an instance method that is a descendant of the instance method specified by the class name and method name. "java.util.map" "get(java.lang.object)"
determines whether an expression has an annotation of the given type. this includes annotations inherited from superclasses due to . "javax.annotation.nullable", or "some.package.outerclassname$innerclassname")
matches an ast node that is enclosed by some node that matches the given matcher. todo(eaftan): this could be used instead of enclosingblock and enclosingclass.
matches a continue statement.
matches an ast node that is static.
ignores any number of parenthesis wrapping an expression and then applies the passed matcher to that expression. for example, the passed matcher would be applied to value in (((value))).
matches an assertion ast node if the given matcher matches its condition. false", the "false" part of the statement
matches an ast node iff it does not match the given matcher.
matches a binary tree if the given matchers match the operands in either order. that is, returns true if either: matcher1 matches the left operand and matcher2 matches the right operand or matcher2 matches the left operand and matcher1 matches the right operand
matches an ast node if its type is a primitive type.
compose several matchers together, such that the composite matches an ast node iff all the given matchers do.
matches an ast node if its type is a primitive type, or a boxed version of a primitive type.
creates a new matcher for method invocations based on a method select and an argument matcher.
creates a new compound-assignment operator matcher, which matches a compound assignment expression with one of a set of operators and whose receiver and expression match the given matchers. assignment.
returns the provided set of operators if they are all compound-assignment operators. otherwise, throws an illegalargumentexception.
set a custom error message for this description. the custom message will be used instead of the summary field as the text for the diagnostic message.
adds a suggested fix for this description if fix is present. fixes should be added in order of decreasing preference. adding an empty fix is a no-op.
returns a new builder for descriptions.
adds a suggested fix for this description. fixes should be added in order of decreasing preference. adding an empty fix is a no-op.
matches an argument of type class, where t is a subtype of one of the test runners listed in the test_runners field. todo(eaftan): support checking for an annotation that tells us whether this test runner expects tests to be annotated with @test.
returns true if the tree contains a method invocation that looks like a test assertion.
gets the value for an argument, or null if the argument does not exist.
split a java name into terms based on either camel case or underscores. we also split digits at the end of the name into a separate term so as to treat person1 and person_1 as the same thing.
returns a normalized edit distance between 0 and 1. this is useful if you are comparing or aggregating distances of different pairs of strings
returns the edit distance between two strings. levenshtein charges the same cost for each insertion or deletion. this algorithm is slightly more general in that it charges a sequence of adjacent insertionsdeletions an up-front cost plus an incremental cost per insertdelete operation. the idea is that christopher -> chris should be less than 6 times as expensive as christopher -> christophe. the algorithm used to calculate this distance takes time and space proportional to the product of source.length() and target.length() to build the 3 arrays.
returns the edit distance between two strings. the algorithm used to calculate this distance has space requirements of len(source)len(target).
filters this scannersupplier based on the provided predicate. returns a scannersupplier with only the checks enabled that satisfy the predicate.
composes this scannersupplier with the other scannersupplier. the set of checks that are turned on is the intersection of the checks on in this and other.
applies options to this scannersupplier. command-line options to override check severities may do any of the following:  enable a check that is currently off disable a check that is currently on change the severity of a check that is on, promoting a warning to an error or demoting an error to a warning  for this compilation may not be disabled
returns a scannersupplier built from a list of bugcheckerinfos.
returns a scannersupplier with a specific list of bugchecker classes.
handles an exception thrown by an individual bugpattern. by default, wraps the exception in an error and continue.
returns if this checker should be suppressed on the current tree path. generated code.
updates current suppression state with information for the given tree. returns the previous suppression state so that it can be restored when going up the tree.
supplies the n'th generic type of the given expression. for example, in map c; for the expression c and n=1, the result is the type of b. if there are an insufficient number of type arguments, this method will return the java.lang.object type from symbol table.
supplies the expression which gives the instance of an object that will receive the method call. for example, in a.getb().getc() if the visitor is currently visiting the getc() method invocation, then this supplier gives the expression a.getb().
supplies the expression which gives the instance of an object that will receive the method call. for example, in a.getb().getc() if the visitor is currently visiting the getc() method invocation, then this supplier gives the expression a.getb().
supplies what was given. useful for adapting to methods that require a supplier.
given the string representation of a type, supplies the corresponding type.
supplies the n'th generic type of the given expression. for example, in map c; for the type of c and n=1, the result is the type of b. if there are an insufficient number of type arguments, this method will return the java.lang.object type from symbol table.
runs the transfer dataflow analysis to compute the abstract value of the expression which is the leaf of exprpath. the expression must be part of a method, lambda, or initializer (inline field initializer or initializer block). example of an expression outside of such constructs is the identifier in an import statement. note that for intializers, each inline field initializer or initializer block is treated separately. i.e., we don't merge all initializers into one virtual block for dataflow. of a method, lambda or initializer
run the transfer dataflow analysis over the method or lambda which is the leaf of the for caching, we make the following assumptions: - if two paths to methods are equal, their control flow graph is the same. - if two transfer functions are equal, and are run over the same control flow graph, the analysis result is the same. - for all contexts, the analysis result is the same.
returns the value of the leaf of exprpath, if it is determined to be a constant (always evaluates to the same numeric value), and null otherwise. note that returning null does not necessarily mean the expression is not a constant.
check whether tree is an autovalue accessor. a tree is an autovalue accessor iff:  it is a method invocation of an abstract method with 0 arguments defined on a class annotated @autovalue  public visibility for use in nullnesspropagationtransfer#returnvaluenullness
creates an accesspath from field reads autovalue accessor we can track and returns null otherwise (for example, when the receiver of the field access contains an array access or non-autovalue method call.
sets the value for the given variable. element must come from a call to localvariablenode#getelement() or org.checkerframework.javacutil.treeutils#elementfromdeclaration ( org.checkerframework.dataflow.cfg.node.variabledeclarationnode#gettree()).
returns the value for the given variable. element must come from a call to localvariablenode#getelement() or org.checkerframework.javacutil.treeutils#elementfromdeclaration ( org.checkerframework.dataflow.cfg.node.variabledeclarationnode#gettree()).
returns the nullness that corresponds to what you can deduce by knowing that some expression is not equal to another expression with this nullness. a nullness represents a set of possible values for a expression. suppose you have two variables var1 and var2. if var1 != var2, then var1 must be an element of the complement of the singleton set containing the value of var2. if you union these complement sets over all possible values of var2, the set that results is what this method returns, assuming that this is the nullness of var2. example 1: suppose nv2 == null. then var2 can have exactly one value, null, and var1 must have a value in the set of all values except null. that set is exactly nonnull. example 2: suppose nv2 == nonnull. then var2 can have any value except in the set of all values except "foo". now suppose var2 has value "bar" . then var1 must have a value in set of all values except "bar". since we don't know which value in the set nonnull var2 has, we union all possible complement sets to get the set of all values, or nullable.
variables take their values from their past assignments (as far as they can be determined). additionally, variables of primitive type are always refined to non-null. (this second case is rarely of interest to us. either the variable is being used as a primitive, in which case we probably wouldn't have bothered to run the nullness checker on it, or it's being used as an object, in which case the compiler generates a call to valueof (to autobox the value), which triggers #visitmethodinvocation.) edge case: node can be a captured local variable accessed from inside a local or anonymous inner class, or possibly from inside a lambda expression (even though these manifest as fields in bytecode). as of 72016 this analysis doesn't have any knowledge of captured local variables will essentially assume whatever default is used in #values.
refines the receiver of a field access to type non-null after a successful field access, and refines the value of the expression as a whole to non-null if applicable (e.g., if the field has a primitive type or the store) has a non-null value for this access path. note: if the field access occurs when the node is an l-value, the analysis won't call this method. instead, it will call #visitassignment.
records which arguments are guaranteed to be non-null only if the method completes by returning strings.isnullorempty(s) returns false, then s is not null.
records which arguments are guaranteed to be non-null if the method completes without exception. for example, if checknotnull(foo, message) completes successfully, then
refines the nullness of localvariablenodes used in an equality comparison using the greatest lower bound. comparison returns true comparison returns false
retrieve an instance of nullnessanalysis from the context. if there is no it.
returns the nullness of the leaf of exprpath. if the leaf required the compiler to generate autoboxing or autounboxing calls, getnullness returns the nullness after the boxingunboxing. this implies that, in those cases, it will always return nonnull.
retrieve an instance of trustingnullnessanalysis from the context. if there is no trustingnullnessanalysis currently in the context, create one, insert it, and return it.
returns the nullness of the leaf of exprpath. if the leaf required the compiler to generate autoboxing or autounboxing calls, getnullness returns the nullness after the boxingunboxing. this implies that, in those cases, it will always return nonnull.
get inferred nullness qualifiers for method-generic type variables at a callsite. when inference is not possible for a given type variable, that type variable is not included in the resulting map.
generate inference variable constraints derived from this write, including proper bounds from type annotations on the declared type ltype of the r-val as well as relationships between type parameters of the l-val and r-val (if given). l-val is optional so this method is usable for method arguments, and note that the l-val is a statement in other cases (return and variable declarations); the l-val only appears useful when it's an assignment
creates a replacement. start and end positions are represented as code unit indices in a unicode 16-bit string.
returns a human-friendly name of the given symbol.typesymbol for use in fixes.  if the type is already imported, its simple name is used. if an enclosing type is imported, that enclosing type is used as a qualified. otherwise the outermost enclosing type is imported and used as a qualifier. 
be warned, only changes method name at the declaration.
create a fix to add a suppression annotation on the surrounding class. no suggested fix is produced if the suppression annotation cannot be used on classes, i.e. the annotation has a @target but does not include @target(type). if the suggested annotation is dontsuggestfixes, return empty.
renames the given variabletree and its usages in the current compilation unit to replacement.
parse a modifier token into a modifier.
returns a fix that adds members defined by firstmember (and optionally othermembers) to the end of the class referenced by classtree. this method should only be called once per classtree as the suggestions will otherwise collide.
replaces the tree at path along with any javadocsassociated single-line comments. this is the same as just deleting the tree for non-class members. for class members, we tokenize and scan backwards to try to work out which prior comments are associated with this node.
pretty-prints a type for use in fixes, qualifying any enclosed type names using #qualifytype.
deletes the given exceptions from a method's throws clause.
returns a human-friendly name of the given typename for use in fixes. this should be used if the type may not be loaded.
remove modifiers from the given class, method, or field declaration.
create a plausible uri to use in #compileswithfix.
replaces the name of the method being invoked in tree with replacement.
adds modifiers to the given class, method, or field declaration.
returns a fix that updates newvalues to the parametername argument for annotation, regardless of whether there is already an argument. n.b.: newvalues are source-code strings, not string literal values.
returns a human-friendly name of the given type for use in fixes.
returns a fix that appends newvalues to the parametername argument for annotation, regardless of whether there is already an argument. n.b.: newvalues are source-code strings, not string literal values.
modifies fixbuilder to either create a new @suppresswarnings element on the closest suppressible node, or add warningtosuppress to that node if there's already a example, to produce @suppresswarnings("foo"), pass foo. comment containing this text. do not pass leading or include any line breaks.
replaces the leaf doctree in the given path with replacement.
fully qualifies a javadoc reference, e.g. for replacing list with java.util.list
returns a fix that adds a @suppresswarnings(warningtosuppress) to the closest suppressible element to the node pointed at by state.getpath(), optionally suffixing the suppression with a comment suffix (e.g. a reason for the suppression). if the closest suppressible element already has a @suppresswarning annotation, warningtosuppress will be added to the value in @suppresswarnings instead. in the event that a suppressible element couldn't be found (e.g.: the state is pointing at a compilationunit, or some other internal inconsistency has occurred), or the enclosing suppressible element already has a @suppresswarnings annotation with warningtosuppress, this method will return null.
returns true if the current compilation would succeed with the given fix applied. note that calling this method is very expensive as it requires rerunning the entire compile, so it should be used with restraint.
get the replacements in an appropriate order to apply correctly.
applies the suggestedfix to the source. returns null if applying the fix results in no change to the source, or a change only to imports.
replace a tree node with a string, but adjust the start and end positions as well. for example, if the tree node begins at index 10 and ends at index 30, this call will replace the characters at index 15 through 25 with "replacement":  
merges all edits from other into this. if other is null, do nothing.
merges all edits from other into this. if other is null, do nothing.
implicit default constructors are one of the few synthetic constructs added to the ast early enough to be visible from error prone, so we do a sanity-check here to prevent attempts to edit them.
implementation of unary numeric promotion rules.  href="https:docs.oracle.comjavasespecsjlsse9htmljls-5.html#jls-5.6.1">jls §5.6.1
returns the type of a receiver of a method call expression. precondition: the expressiontree corresponds to a method call. examples:  a.b.foo() ==> type of a.b a.bar().foo() ==> type of a.bar() this.foo() ==> type of this foo() ==> type of this theclass.astaticmethod() ==> theclass astaticmethod() ==> type of class in which method is defined 
determines whether two expressions refer to the same variable. note that returning false doesn't necessarily mean the expressions do not refer to the same field. we don't attempt to do any complex analysis here, just catch the obvious cases.
returns true if the leaf node in the treepath from state sits somewhere underneath a class or method that is marked as junit 3 or 4 test code.
returns the compile-time constant value of a tree if it is of type clazz, or null.
returns the values of the given symbol's javax.annotation.generated or javax.annotation.processing.generated annotation, if present.
find the root assignable expression of a chain of field accesses. if there is no root (i.e, a bare method call or a static method call), return null. examples:  a.trim().intern() ==> a a.b.trim().intern() ==> a.b this.intvalue.foo() ==> this.intvalue this.foo() ==> this intern() ==> null string.format() ==> null java.lang.string.format() ==> null 
determines whether a method can be overridden.
returns true if t is a subtype of exception but not a subtype of runtimeexception.
returns true if erasure(s) <: erasure(t).
returns the receiver of an expression. examples:  a.foo() ==> a a.b.foo() ==> a.b a.bar().foo() ==> a.bar() a.b.c ==> a.b a.b().c ==> a.b() this.foo() ==> this foo() ==> null theclass.astaticmethod() ==> theclass astaticmethod() ==> null astaticallyimportedmethod() ==> null 
check for the presence of an annotation with a specific simple name directly on this symbol. does not consider annotation inheritance. "checkreturnvalue"
returns true if erasure(s) == erasure(t).
return true if the given type is 'void' or 'void'.
finds all methods in any superclass of startclass with a certain name that match the given predicate. have the given name.
returns whether anno corresponds to a type annotation, or null if it could not be determined.
returns the nullness for an expression as determined by the nullness dataflow analysis.
returns the target type of the tree at the given visitorstate's path, or else null. for example, the target type of an assignment expression is the variable's type, and the target type of a return statement is the enclosing method's type.
gives the return type of an expressiontree that represents a method select. todo(eaftan): are there other places this could be used?
extract the filename from the uri, with special handling for jar files. the return value is normalized to always use '' to separate elements of the path and to always have a leading ''.
given a type ( base), find the method named name, with the appropriate argtypes and tyargtypes and return its methodsymbol. ex:  ..... class a class b public int hashcode() return 42; ..... methodsymbol meth = asthelpers.resolveexistingmethod( state, symbol, state.getname("hashcode"), immutablelist.of(), immutablelist.of());  or null if the method could not be resolved.
given a binarytree to match against and a list of two matchers, applies the matchers to the operands in both orders. if both matchers match, returns a list with the operand that matched each matcher in the corresponding position.
returns the erasure of the given type tree, i.e. list for list.
returns true if erasure(s) is castable to erasure(t).
returns the list of all constructors defined in the class (including generated ones).
return true if the given symbol is defined in the current package.
retrieves an annotation, considering annotation inheritance. them, attempting to access that member from the error prone checker code will result in a runtime exception. instead, operate on sym.getannotationmirrors() to meta-syntactically inspect the annotation.
given a treepath, finds the first enclosing node of the given type and returns the path from the enclosing node to the top-level compilationunittree.
given a treepath, walks up the tree until it finds a node of the given type. returns null if no such node is found.
returns the upper bound of a type if it has one, or the type itself if not. correctly handles wildcards and capture variables.
returns the compile-time constant value of a tree if it has one, or null.
implementation of binary numeric promotion rules.  href="https:docs.oracle.comjavasespecsjlsse9htmljls-5.html#jls-5.6.2">jls §5.6.2
determines whether a symbol has an annotation of the given type. this includes annotations inherited from superclasses due to . "javax.annotation.nullable", or "some.package.outerclassname$innerclassname")
returns true if the given case tree can complete normally, as defined by jls 14.21. an exception is made for system.exit, which cannot complete normally in practice.
converts the given attribute to an integer value.
converts the given attribute to an enum value.
returns declaration annotations of the given symbol, as well as 'top-level' type annotations, including :  type annotations of the return type of a method. type annotations on the type of a formal parameter or field.  one might expect this to be equivalent to information returned by com.sun.tools.javac.code.type#getannotationmirrors, but javac doesn't associate type annotation information with types for symbols completed from class files, so that approach doesn't work across compilation boundaries.
converts the given attribute to an string value.
converts the given attribute to one or more strings.
returns the value of the annotation element-value pair with the given name if it is not explicitly set.
extract the text body from a comment. this currently includes asterisks that start lines in the body of block comments. do not rely on this behaviour. todo(andrewrice) update this method to handle block comments properly if we find the need
finds the end position of this methodinvocationtree. this is complicated by the fact that sometimes a comment will fall outside of the bounds of the tree. for example:  test(arg1, comment1 arg2); comment2 int i;  in this case comment2 lies beyond the end of the invocation tree. in order to get the comment we need the tokenizer to lex the token which follows the invocation ( int in the example). we over-approximate this end position by looking for the next node in the ast and using the end position of this node. as a heuristic we first scan for any characters on the same line as the end of the method invocation. if we don't find any then we use the end of the method invocation as the end position.
attach comments to nodes on arguments of method calls. calls such as test(param1 c1 /, c2 / param2) will attach the comment c1 to param1 and the comment c2 to param2. warning: this is expensive to compute as it involves re-tokenizing the source for this node currently this method will only tokenize the source code of the method call itself. however, the source positions in the returned comment objects are adjusted so that they are relative to the whole file.
find the element in the iterable following the target
find the node which (approximately) follows this one in the tree. this works by walking upwards to find enclosing block (or class) and then looking for the node after the subtree we walked. if our subtree is the last of the block then we return the node for the block instead, if we can't find a suitable block we return the parent node.
returns the final result. the object should not be used after calling this method
finds all the visible fields declared or inherited in the target class
finds the set of all bare variable identifiers in scope at the current location. identifiers are ordered by ascending distancescope count from the current location to match shadowing rules. that is, if two variables with the same simple names appear in the set, the one that appears first in iteration order is the one you get if you use the bare name in the source code. we do not report variables that would require a qualified access. we also do not handle wildcard imports.
returns true iff the leaf node of the path occurs in a jls 8.3.1 static context.
finds all variable declarations which are unused at this point in the ast (i.e. they might be used further on).
walks up the given path and returns true iff the first node matching predicate1 occurs lower in the ast than the first node node matching predicate2. returns false if no node matches predicate1 or if no node matches predicate2.
finds a declaration with the given name and type that is in scope at the current location.
finds all identifiers in a tree. takes an optional stop point as its argument: the depth-first walk will stop if this node is encountered.
find the set of all identifiers referenced within this tree
returns a jvms 4.3.3 method descriptor.
pretty-prints a method signature for use in diagnostics. uses simple names for declared types, and omitting formal type parameters and the return type since they do not affect overload resolution.
returns the binary names of the class.
if the given regexes matches exactly one string, returns that string. otherwise returns null. this can be used to identify arguments to e.g. string.replaceall that don't need to be regexes.
tries to establish whether expression is side-effect free. the heuristics here are very conservative.
returns a copy of code as a list of lines.
replace the source code between the start and end character positions with a new string. this method uses the same conventions as string#substring(int, int) for its start and end parameters.
replace the source code between the start and end lines with some new lines of code.
create an import
add groups of already sorted imports. if there are any other imports in the list then this will add a newline separator before any groups are added. it will also add a newline separate between each group.
add a group of already sorted imports. if there are any other imports in the list then this will add a newline separator before this group is added.
returns a string representation of the imports as java code in correct order.
string identifier = 1;
.devtools.staticanalysis.errorprone.apidiff.everythingdiff everything_diff = 1;
.devtools.staticanalysis.errorprone.apidiff.memberdiff member_diff = 2;
repeated .devtools.staticanalysis.errorprone.apidiff.classmember member = 2;
repeated .devtools.staticanalysis.errorprone.apidiff.classdiff class_diff = 1;
repeated .devtools.staticanalysis.errorprone.apidiff.classmember member = 2;
repeated .devtools.staticanalysis.errorprone.apidiff.classmember member = 2;
repeated .devtools.staticanalysis.errorprone.apidiff.classdiff class_diff = 1;
string class_name = 1;
string class_name = 1;
repeated .devtools.staticanalysis.errorprone.apidiff.classdiff class_diff = 1;
.devtools.staticanalysis.errorprone.apidiff.everythingdiff everything_diff = 1;
repeated .devtools.staticanalysis.errorprone.apidiff.classdiff class_diff = 1;
repeated .devtools.staticanalysis.errorprone.apidiff.classmember member = 2;
string class_name = 1;
string class_name = 1;
string identifier = 1;
repeated .devtools.staticanalysis.errorprone.apidiff.classmember member = 2;
string class_name = 1;
repeated .devtools.staticanalysis.errorprone.apidiff.classmember member = 2;
repeated .devtools.staticanalysis.errorprone.apidiff.classmember member = 2;
.devtools.staticanalysis.errorprone.apidiff.memberdiff member_diff = 2;
.devtools.staticanalysis.errorprone.apidiff.memberdiff member_diff = 2;
repeated .devtools.staticanalysis.errorprone.apidiff.classmember member = 2;
repeated .devtools.staticanalysis.errorprone.apidiff.classdiff class_diff = 1;
.devtools.staticanalysis.errorprone.apidiff.memberdiff member_diff = 2;
repeated .devtools.staticanalysis.errorprone.apidiff.classmember member = 2;
repeated .devtools.staticanalysis.errorprone.apidiff.classdiff class_diff = 1;
.devtools.staticanalysis.errorprone.apidiff.everythingdiff everything_diff = 1;
repeated .devtools.staticanalysis.errorprone.apidiff.classmember member = 2;
repeated .devtools.staticanalysis.errorprone.apidiff.classdiff class_diff = 1;
.devtools.staticanalysis.errorprone.apidiff.memberdiff member_diff = 2;
.devtools.staticanalysis.errorprone.apidiff.everythingdiff everything_diff = 1;
string identifier = 1;
repeated .devtools.staticanalysis.errorprone.apidiff.classdiff class_diff = 1;
.devtools.staticanalysis.errorprone.apidiff.everythingdiff everything_diff = 1;
string identifier = 1;
 a jvms 4.3 member descriptor  string member_descriptor = 2;
string class_name = 1;
repeated .devtools.staticanalysis.errorprone.apidiff.classmember member = 2;
 a jvms 4.3 member descriptor  string member_descriptor = 2;
.devtools.staticanalysis.errorprone.apidiff.everythingdiff everything_diff = 1;
.devtools.staticanalysis.errorprone.apidiff.memberdiff member_diff = 2;
repeated .devtools.staticanalysis.errorprone.apidiff.classmember member = 2;
string class_name = 1;
repeated .devtools.staticanalysis.errorprone.apidiff.classdiff class_diff = 1;
repeated .devtools.staticanalysis.errorprone.apidiff.classdiff class_diff = 1;
repeated .devtools.staticanalysis.errorprone.apidiff.classdiff class_diff = 1;
repeated .devtools.staticanalysis.errorprone.apidiff.classdiff class_diff = 1;
repeated .devtools.staticanalysis.errorprone.apidiff.classmember member = 2;
.devtools.staticanalysis.errorprone.apidiff.everythingdiff everything_diff = 1;
repeated .devtools.staticanalysis.errorprone.apidiff.classdiff class_diff = 1;
 a jvms 4.3 member descriptor  string member_descriptor = 2;
.devtools.staticanalysis.errorprone.apidiff.memberdiff member_diff = 2;
string class_name = 1;
 a jvms 4.3 member descriptor  string member_descriptor = 2;
repeated .devtools.staticanalysis.errorprone.apidiff.classdiff class_diff = 1;
repeated .devtools.staticanalysis.errorprone.apidiff.classmember member = 2;
check that the mustbeclosed annotation is only used for constructors of autocloseables and methods that return an autocloseable.
check that invocations of methods annotated with mustbeclosed are called within the resource variable initializer of a try-with-resources statement.
returns an in-scope constant variable with the given value.
converts a string to a file.
convert a boolean append mode to a standardopenoption.
convert a string or file argument to a path.
returns a description of the error based on the rejected junit4 construct in the junit3 class.
matches method invocations that return the same type as the receiver object.
matches method calls whose receiver objects are of a type included in the set.
iterate through a list of type parameters, looking for type names shadowed by any of them.
returning a type of future from a lambda or method that returns object loses the future type, which can result in suppressed errors or race conditions.
checks that the return value of a functional interface is void. note, we do not use asthelpers.isvoidtype here, return values of void are actually type-checked. only void-returning functions silently ignore return values of any type.
given a map of handled exception types and the trees of those handlers (i.e. catch clauses or method throws clauses), determine which handlers are for reflective exceptions, and whether all exceptions thrown by #link constructor#newinstance are handled.
whether the given method is called elsewhere in the enclosing class.
returns a finding for the given method tree containing fixes:  add @test, remove static modifier if present. add @test and @ignore, remove static modifier if present. change visibility to private (for local helper methods). 
matches if:  the method is public, void, and has no parameters; the method is not already annotated with @test, @before, @after, the enclosing class appears to be intended to run in junit4, that is:  type="a"> it is non-abstract, it does not extend junit3 testcase, it has an @runwith annotation or at least one other method annotated  and, the method appears to be a test method, that is:  type="a"> or, the method body contains a method call with a name that contains "assert", "verify", "check", "fail", or "expect".  
extracts the long literal corresponding to a given literaltree node from the source code as a string. returns null if the source code is not available.
desugars a compound assignment, making the cast explicit.
classifies bad casts.
returns true if collection is modified by an enclosing loop.
if the left operand of an int binary expression is an int literal, suggest making it a long.
returns a string describing the exception type caught by the given try tree's catch statement(s), defaulting to "exception" if more than one exception type is caught.
transforms a try-catch block in the try-fail pattern into a call to junit's assertthrows, inserting the behavior of the try block into a lambda parameter, and assigning the expected exception to a variable, if it is used within the catch block. for example:  try foo(); fail(); catch (myexception expected) assertthat(expected).isequalto(other);  becomes  assertthat(expected).isequalto(other);  the fail statement. equivalent assertthrows, if possible. returns an optional.empty() if a fix could not be constructed for the given code (e.g. multi-catch).
validate @checkreturnvalue and canignorereturnvalue usage on methods. the annotations should not both be appled to the same method. the annotations should not be applied to void-returning methods. doing so makes no sense, because there is no return value to check.
suggested fixes are as follows. for the byte case, convert the literal to its byte representation. for example, "255" becomes "-1. for the character case, replace the comparison with "true""false" since it's not clear what was intended and that is semantically equivalent. todo(eaftan): suggested fixes don't handle side-effecting expressions, such as (d = reader.read()) == -1. maybe add special case handling for assignments.
check if the method declares or inherits an implementation of .equals()
returns the method that 'directly' contains the leaf element of the given path. by 'direct', we mean that if the leaf is part of a field initializer of a class, then it is considered to not be part of any method.
returns true if this method invocation is of the form super.foo()
get overridden @foroverride methods. method itself if it has the annotation
get the outermost classinterfaceenum of an element, or null if none.
returns true if the variable is effectively final.
records an assignment to a variable.
looks at the list of annotations and see if there is any annotation which exists exemptingannotations.
if the given expression is a call to a method checking the nullity of its first parameter, and otherwise returns that parameter.
we expect that the lhs is a field and the rhs is an identifier, specifically a parameter to the method. we base our suggested fixes on this expectation. case 1: if lhs is a field and rhs is an identifier, find a method parameter of the same type and similar name and suggest it as the rhs. (guess that they have misspelled the identifier.) case 2: if lhs is a field and rhs is not an identifier, find a method parameter of the same type and similar name and suggest it as the rhs. case 3: if lhs is not a field and rhs is an identifier, find a class field of the same type and similar name and suggest it as the lhs. case 4: otherwise suggest deleting the assignment.
returns whether sym can be removed without updating call sites in other files.
looks at the list of annotations and see if there is any annotation which exists exemptingannotations.
returns a staticimports if the given import is a static single-type import. returns statically imports a field or method.
matches if this is a narrowing integral cast between signed types where the expression is a subtract.
extracts the variable from a compoundassignmenttree and applies a matcher to it.
extracts the variable from an assignmenttree and applies a matcher to it.
extracts the expression from a unarytree and applies a matcher to it.
reports a dep-ann error for a declaration if: (1) javadoc contains the deprecated javadoc tag (2) the declaration is not annotated with java.lang.deprecated
don't flag methods that are empty or trivially delegate to a super-implementation.
this method matches a typecasttree, then iterates up to the nearest if tree with a condition that looks for an instanceof pattern that matches the expression acted upon. it then checks to see if the cast is plausible (if the classes are not disjoint)
determines whether two expressiontree instances are equal. only handles the cases relevant to this checker: array accesses, identifiers, and literals. returns false for all other cases.
checks that the return value of a functional interface is void. note, we do not use asthelpers.isvoidtype here, return values of void are actually type-checked. only void-returning functions silently ignore return values of any type.
fixes the error by assigning the result of the call to the receiver reference, or deleting the method call.
don't match the method that is invoked through mockito.verify(t) or doreturn(val).when(t).
allow return values to be ignored in tests that expect an exception to be thrown.
suggest replacing the tolerance with 0 for junit assertions.
suggest replacing iswithin(..).of(foo) with isequalto(foo) for truth.
gets the argument types, excluding the message argument if present.
gets the index of where to insert the delta argument.
determines if the invocation can be safely converted to junit 4 based on its argument types.
removes the message argument if it is present.
gets the text for the delta argument to be added.
returns true if the given method symbol has a @test(expected=...) annotation.
matches on @template annotations whose value contains "outline:none" or equivalent outline style.
matches on setproperty("outline", "none") and equivalent method calls.
matches if the expression is a numeric 0, or either of the strings "none" or "0px". these are the values which will cause the outline to be invisible and therefore impede accessibility.
handles the case "expr1 == expr2"
returns all the "assert" expressions in the tree.
prevents abstract methods from being annotated with @callsuper et al. it doesn't make sense to require overriders to call a method with no implementation.
matches a method that overrides a method that has been annotated with @callsuper et al., but does not call the super method.
returns the methodsymbol of the first method that sym overrides in its supertype closure, or null if no such method exists.
suggests removing getclass() or changing to class.class.
returns if the variable has a @mock annotation that specifies an answer that does not handle generics.
wraps identity hashcode computations in calls to java.util.arrays#hashcode if the array is single dimensional or java.util.arrays#deephashcode if the array is multidimensional. if there is only one argument to the hashcode method or the instance hashcode method is used, replaces the whole method invocation. if there are multiple arguments, wraps any that are of array type with the appropriate java.util.arrays hashcode method.
given an expressiontree that represents an argument of array type, rewrites it to wrap it in a call to either java.util.arrays#hashcode if it is single dimensional, or java.util.arrays#deephashcode if it is multidimensional.
classifies expressions that are converted to strings by their enclosing expression.
tests if the given expression is converted to a string by its parent (i.e. its parent is a string concat expression, string.format, or println(object)).
identifies methods with parameters that have a generic argument with int, long, or double. if pre-conditions are met, it refactors them to the primitive specializations. preconditions: (1): the method declaration has to be private (to do a safe refactoring) (2): its parameters have to meet the following conditions: 2.1 contain type java.util.function.function 2.2 at least one argument type of the function must be subtype of number (3): all its invocations in the top-level enclosing class have to meet the following conditions as well: 3.1: lambda argument of kind.lambda_expression 3.2: same as 2.1 3.3: same as 2.2   refactoring changes for matched methods: (1) add the imports (2) change the method signature to use utility function instead of function (3) find and change the 'apply' calls to the corresponding applyast 
check that constructors and methods annotated with mustbeclosed occur within the resource variable initializer of a try-with-resources statement.
returns the enclosing method of the given visitor state. returns null if the state is within a lambda expression or anonymous class.
deletes an entry and its delimiter from a list.
searches the annotation list for @test(expected=...). if found, deletes the exception attribute from the annotation, and returns its value.
returns the qualification to access a field of the given class node from within the given tree path (which must be within the class node scope).
for each class, visits constructors, instance variables, and instance initializers. delegates further scanning of these "constructor-scope" constructs to #traverse.
we expect that the lhs is a field and the rhs is an identifier, specifically a parameter to the method. we base our suggested fixes on this expectation. case 1: if lhs is a field and rhs is an identifier, find a method parameter of the same type and similar name and suggest it as the rhs. (guess that they have misspelled the identifier.) case 2: if lhs is a field and rhs is not an identifier, find a method parameter of the same type and similar name and suggest it as the rhs. case 3: if lhs is not a field and rhs is an identifier, find a class field of the same type and similar name and suggest it as the lhs. case 4: otherwise replace with literal meaning of functionality
matches calls to addall, containsall, removeall, and retainall on itself
matches if all of the following conditions are true: 1) the method matches #methodmatcher(), (looks like setup() or teardown(), and none of the overrides in the hierarchy of the method have the appropriate @before or @after annotations) 2) the method is not annotated with @test 3) the enclosing class has an @runwith annotation and does not extend testcase. this marks that the test is intended to run with junit 4.
match empty statement if: - parent statement is an if - the then part of the parent if is an empty statement, and - the else part of the parent if does not exist
checks that annotations are on the right side of the modifiers.
tokenizes as little of the tree as possible to ensure we grab all the annotations.
whether this is a chain of method invocations terminating in a new proto or collection builder.
allow mocking apis that return obsolete types.
matches if: 1) method's name begins with misspelled variation of "test". 2) method is public, returns void, and has no parameters. 3) enclosing class is junit3 test (extends testcase, has no @runwith annotation, no @test-annotated methods, and is not abstract).
suggests removing getclass() or changing to class.class.
returns a string descriptor of a method's reference type.
collect all on demand imports.
add an import for owner, and qualify all on demand imported references to members of owner by owner's simple name.
creates a fix that replaces wildcard imports.
returns the comments between the "default:" case and the first statement within it, if any.
returns true if the default is empty, or contains only a break statement.
ignore some common threadlocal type arguments that are fine to have per-instance copies of.
build the diagnostic message. examples:  non-exhaustive switch, expected cases for: foo non-exhaustive switch, expected cases for: foo, bar, baz, and 42 others. 
match a tree in the ancestor chain given the ancestor's immediate descendant.
the target of a jump statement (break or continue) is (1) the enclosing loop if the jump is unlabeled (2) the enclosing labeledstatementtree with matching label if the jump is labeled (3) the enclosing switch statement if the jump is a break if the target of a break or continue statement is encountered before reaching a finally block, return no_match.
matches a statementtree type by walking that statement's ancestor chain. s true if an error is found.
replace instance references to the method with static access (e.g. `this.foo(...)` -> `enclosingclass.foo(...)` and `this::foo` to `enclosingclass::foo`).
returns true if the tree references its enclosing class.
is sym a non-static member of an enclosing class of currentclass?
walks up the provided expressiontree to find the identifiertree identifier that it stems from. returns null if the tree doesn't terminate in an identifier.
walks up the receivers for an expression chain until one matching matcher is found, and returns the matched expressiontree, or null if none match.
matches expressions that look like they should be considered constant, i.e. immutablelist.of(1, 2), long.valueof(10l).
constructor a fix that deletes the set of type arguments.
create fixes for invalid assertions.  rewrite `verify(mock.bar())` to `verify(mock).bar()` rewrite `verify(mock.bar(), times(n))` to `verify(mock, times(n)).bar()` rewrite `verify(mock, never())` to `verifyzerointeractions(mock)` finally, offer to delete the mock statement. 
suggests replacing with arrays.equals(a, b). also adds the necessary import statement for java.util.arrays.
creates a suggestedfix that replaces the checknotnull call with a checkargument or checkstate call.
find the root variable identifiers from an arbitrary expression. examples: a.trim().intern() ==> a a.b.trim().intern() ==> a this.intvalue.foo() ==> this this.foo() ==> this intern() ==> string.format() ==> java.lang.string.format() ==> x.y.z(s.t) ==> x,s
if the call to preconditions.checknotnull is part of an expression (assignment, return, etc.), we substitute the argument for the method call. e.g.: bar = preconditions.checknotnull(foo); ==> bar = foo; if the argument to preconditions.checknotnull is a comparison using == or != and one of the operands is null, we call checknotnull on the non-null operand. e.g.: checknotnull(a == null); ==> checknotnull(a); if the argument is a method call or binary tree and its return type is boolean, change it to a checkargumentcheckstate. e.g.: preconditions.checknotnull(foo.hasfoo()) ==> preconditions.checkargument(foo.hasfoo()) otherwise, delete the checknotnull call. e.g.: preconditions.checknotnull(foo); ==> [delete the line]
determines whether the expression contains a reference to one of the enclosing method's parameters. todo(eaftan): extract this to asthelpers.
matches formal parameters with com.google.errorprone.annotations.compiletimeconstant annotations against corresponding actual parameters. annotated with com.google.errorprone.annotations.compiletimeconstant, the corresponding formal parameter is not a compile-time-constant expression in the sense of description.no_match.
matches patterns containing yyyy but not ww, signifying that it was not intended to be a week date. if the pattern is a string literal, suggest replacing the yyyy with yyyy. given the expressiontree representing the pattern argument to the various methods in simpledateformat that accept a pattern, construct the description for this matcher to return. may be description#no_match if the pattern does not have a constant value, does not use the week year format specifier, or is in proper week date format.
whether the given wakelock may throw an unexpected runtimeexception when released. returns true if: 1) the given wakelock was acquired with timeout, and 2) the given wakelock is reference counted.
finds all method invocations on the given symbol, and constructs a map of the called method's name, to the methodinvocationtree in which it was called.
return whether the given try-tree will catch the given exception type.
make the suggestedfix to add the nullable annotation.
unwraps expressions like `(foo) foo` or `((foo) foo)` to return the varsymbol of `foo`, or null if the expression wasn't of this form.
converts a diff to a apidiff.
converts a apidiff to a apidiffproto.diff.
finds the class of the expression's receiver: the declaring class of a static member access, or the type that an instance member is accessed on.
matches injected constructors annotated with @inject(optional=true) or binding annotations. suggests fixes to remove the argument optional=true or binding annotations.
rewrite the annotation with static imports, adding type and method to the @target annotation value (and reordering them to their declaration order in elementtype).
matches an annotation that has an argument for at least one of the given parameters.
returns the annotation on classtree whose type's fqcn is annotationname.
returns a fix that changes a concrete class to an abstract class.  removes final if it was there. adds abstract if it wasn't there. adds a private empty constructor if the class was final and had only a default constructor. 
helps validate() validate a format string that is a variable, but not a parameter. this method assumes that the format string variable has already been asserted to be final or effectively final.
helps validate() validate a format string that is declared as a method parameter.
returns whether an input symbol is a format string in a formatmethod. this is true if the symbol is a string parameter in a formatmethod and is either:  annotated with formatstring the first string parameter in the method with no other parameters annotated 
matches a method or constructor invocation. the input symbol should match the invoked method or contructor and the args should be the parameters in the invocation.
extracts the "argument name," as defined in section 2.1 of "nomen est omen," from the expression. this translates a potentially complex expression into a simple name that can be used by the similarity metric. "nomen est omen: exploring and exploiting similarities between argument and parameter names," icse 2016
checks whether this call is a call to timeunit.to and, if so, whether the units of its parameter and its receiver disagree.
converts "ms""msec"etc. to "ms"etc. and "microseconds""microseconds"etc. to "microseconds""microseconds"etc.
returns true if the input looks like [five, seconds].
returns true if the input looks like [from, seconds].
returns whether or not there is a "nearby" getseconds() method call. (e.g., a.getb().getc().getseconds() and a.getb().getc().getnanos()
initializes the input and output parameter collections. after initialization, the input parameters should be equal to parameters of the given reversed: input parameters list should be empty and output parameters should be an ordered version of parameters of the given methodtree.
processes input parameters by walking along the trie as long as there is a path. once the walk is no longer possible (there is no trie child that matches one of the input parameters) the extender begins expansion procedure (see parametertrieextender#execute(parametertrie)).
expands the trie with leftover input parameters. it is assumed that given trie does not have a key corresponding to any input parameter which should happen only if parametertrieextender#walk(parametertrie) has nowhere else to go. only non-varargs parameters are added to the trie. any varargs parameters should always be placed at the end of the method signature so it makes no sense to include them in the archetype.
reports parameterorderingviolation if output parameters are not ordered as in input file. this method simply goes through the list of output parameters (input parameters ordered by trie traversal algorithm). if a parameter at particular position differs from its original position a violation is reported. if the ordering is consistent then there is no violation and an empty optional is returned.
returns a list of methodtree declared in the given classtree. only method trees that belong to the classtree are returned, so methods declared in nested classes are not going to be considered.
extracts the appropriate type argument from a specific supertype of the given type. this handles the case when a subtype has different type arguments than the expected type. for example, classtoinstancemap implements map extends t>, t>.
looks for a matching closing brace, if one is found.
when we have an erroneous block tag inside a @literal tag, the enclosing @literal tag will fail to parse. so, we're looking for an enclosing erroneous tag.
gets a diagnosticposition for the doctree pointed to by path, attached to the tree which it documents.
returns true if the lock expression corresponds to a java.util.concurrent.locks.readwritelock.
construct a diagnostic message, e.g.:  this access should be guarded by 'this', which is not currently held this access should be guarded by 'this'; instead found 'mu' this access should be guarded by 'this'; instead found: 'mu1', 'mu2' 
validates that @guardedby strings can be resolved.
check a single class' fields for immutability.
check that an @immutable-annotated class:  does not declare or inherit any mutable fields, any immutable supertypes are instantiated with immutable type arguments as required by their containerof spec, and any enclosing instances are immutable.  requiring supertypes to be annotated immutable would be too restrictive.
check a single field for immutability.
gets the symbol's @immutable annotation info, either from an annotation on the symbol or from the list of well-known immutable types.
check anonymous implementations of @immutable types.
gets the set of in-scope immutable type parameters from the containerof specs on usually only the immediately enclosing declaration is searched, but it's possible to have cases like:  @immutable(containerof="t") class c class inner extends immutablecollection 
returns the type of the first superclass or superinterface in the hierarchy annotated with
synthesizes the guardedbyexpression for an enclosing class access. the access is represented as a chain of field accesses from an instance of the current class to its enclosing ancestor. at each level, the enclosing class is accessed via a magic 'outer$' field. example:   class outer final object lock = new object(); class middle class inner @guardedby("lock") resolves to 'this.outer$.outer$.lock' int x;  
report a diagnostic for an instance of dcl on a local variable. a match is only reported if a non-volatile field is written to the variable after acquiring the lock and before the second null-check on the local. e.g.  if ($x == null) synchronized (...) $x = mynonvolatilefield; if ($x == null) ... ... 
report a description if a field used in double-checked locking is not volatile. if the ast node for the field declaration can be located in the current compilation unit, suggest adding the volatile modifier.
recognize a small set of known-immutable types that are safe for dcl even without a volatile field.
performs a best-effort search for the ast node of a field declaration. it will only find fields declared in a lexically enclosing scope of the current location. since double-checked locking should always be used on a private field, this should be reasonably effective.
visits (possibly nested) block statements and returns the first child statement with the given class.
matches comparisons to null (e.g. foo == null) and returns the expression being tested.
checks for locks that are released directly. currently only java.util.concurrent.locks.lock#unlock() is supported. todo(cushon): semaphores, cas, ... ?
analyzes a method body, tracking the set of held locks and checking accesses to guarded members.
determine the lock expression that needs to be held when accessing a specific guarded member. if the lock expression resolves to an instance member, the result will be a select expression with the same base as the original guarded member access. for example:  class myclass final object mu = new object(); @guardedby("mu") int x; void m(myclass myclass) myclass.x++;  to determine the lock that must be held when accessing myclass.x, from is called with "myclass.x" and "mu", and returns "myclass.mu".
returns true for guard expressions that require an 'absolute' reference, i.e. where the expression to access the lock is always the same, regardless of how the guarded member is accessed. e.g.:  class object: 'typename.class' static access: 'typename.member' enclosing instance: 'outer.this' enclosing instance member: 'outer.this.member' 
checks unlockmethod-annotated methods.
normalizes the receiver of a select expression so that accesses on 'this' are divided into type names (for static accesses), qualified this accesses (for members of a lexically enclosing scope), or simple this accesses for members of the current class.
returns the owner if the given member is declared in a lexically enclosing scope, and
throws an illegalguardedby exception if the given condition is false.
throws an illegalguardedby exception if the given condition is false.
resolves a simple name as a type. considers super classes, lexically enclosing classes, and then arbitrary types available in the current environment.
gets the set of in-scope threadsafe type parameters from the containerof specs on annotations. usually only the immediately enclosing declaration is searched, but it's possible to have cases like:  @literal @markerannotation(containerof="t") class c<t> class inner extends threadsafecollection<t> 
checks the instantiation of any thread-safe type parameters in the current invocation.
check that the super-type of a @threadsafe-annotated type is instantiated with threadsafe type arguments where required by its annotation's containerof element, and that any type arguments that correspond to containerof type parameters on the sub-type are also in the super-type's containerof spec. enclosing class.
gets a human-friendly name for the given symbol to use in diagnostics.
gets the symbol's annotation info, either from a marker annotation on the symbol, from an accepted annotation on the symbol, or from the list of well-known types.
returns true if the given type parameter's declaration is annotated with #typeparameterannotation indicated it will only ever be instantiated with thread-safe types.
check that a type-use of an @threadsafe-annotated type is instantiated with threadsafe type arguments where required by its annotation's containerof element. enclosing class.
returns whether a type parameter is thread-safe. this is true if either the type parameter's declaration is annotated with #typeparameterannotation (indicating it can only be instantiated with thread-safe types), or the type parameter has a thread-safe upper bound (sub-classes of thread-safe types are also thread-safe). if a type has a recursive bound, we recursively assume that this type satisfies all thread-safety constraints. recursion can only happen with type variables that have recursive type bounds. these type variables do not need to be called out in the "containerof" attribute or annotated with #typeparameterannotation. recursion does not apply to other kinds of types because all declared types must be annotated thread-safe, which means that thread-safety checkers don't need to analyze all referenced types recursively.
returns an enclosing instance for the specified type if it is thread-safe.
returns an violation explaining whether the type is threadsafe. typeparameterannotation-annotated type parameter; indicates that containertypeparameters should be ignored specifications
find the optimal permutation of arguments for this method invocation or return changes.empty() if no good permutations were found.
set the cost of all the alternatives for this formal parameter to be inf.
constructs a stream for every element of formals paired with every element of actuals (cross product). each item contains the formal and the actual, which in turn contain their index into the cost matrix. elements whose cost is inf in the cost matrix are filtered out so only viable pairings remain.
return the first regular expression from the list of overloaded words which matches the parameter name.
return true if this parameter does not match any of the regular expressions in the list of overloaded words.
return true if there are no comments on the original actual parameter of a change which match the name of the formal parameter.
computes the distance between a formal and actual parameter. if either is a null literal then the distance is zero (null matches everything). if both have a name then we compute the normalised needlemanwunscheditdistance. otherwise, one of the names is unknown and so we return 0 distance between it and its original parameter and infinite distance between all others.
returns true if this parameter is an enum identifier
this function looks explicitly for parameters named expected and actual. all other pairs with parameters other than these are given a distance of 0 if they are in their original position and inf otherwise (i.e. they will not be considered for moving). for expected and actual, if the actual parameter name starts with expected or actual respectively then we consider it a perfect match otherwise we return a distance of 1.
find all the other calls to calledmethod within the method (or class) which enclosed the original call. we are interested in two different cases: 1) where there are other calls to the method we are calling; 2) declarations of the method we are calling (this catches the case when there is a recursive call with the arguments correctly swapped).
return true if the replacement name is equal to the argument name for any replacement position.
return true if the change is sufficiently different.
determine the kind of match we have between the comments on this argument and the formal parameter name.
return true if this parameter is assignable to the target parameter. this will consider subclassing, autoboxing and null.
extract the name from an argument.   identifiertree - if the identifier is 'this' then use the name of the enclosing class, otherwise use the name of the identifier memberselecttree - the name of its identifier newclasstree - the name of the class being constructed null literal - a wildcard name methodinvocationtree - use the method name stripping off 'get', 'set', 'is' prefix. if this results in an empty name then recursively search the receiver  all other trees (including literals other than null literal) do not have a name and this method will return the marker for an unknown name.
returns the matches of this template against the specified target ast.
generates a suggestedfix replacing the specified match (usually of another template) with this template.
returns the precedence level appropriate for unambiguously printing leaf as a subexpression of its parent.
similar to class#assubclass(class), but it accepts a typetoken so it handles generics better.
returns a template based on a method. one-line methods starting with a return statement are guessed to be expression templates, and all other methods are guessed to be block templates.
returns the class instance for the matcher associated with the provided matches annotation. this roundabout solution is recommended and explained by element#getannotation(class).
returns the class instance for the matcher associated with the provided notmatches annotation. this roundabout solution is recommended and explained by element#getannotation(class).
returns either the name bound to the specified label, or a name representing the original label if none is already bound.
returns all the ways this placeholder invocation might unify with the specified tree: either by unifying the entire tree with an argument to the placeholder invocation, or by recursing on the subtrees.
this method, and its overloads, take  an initial state functions that, given one state, return a branch choosing a subtree a function that takes pieces of a tree type and recomposes them 
returns a choice of the options from this choice or from other.
returns all the choices obtained by choosing from this choice and then choosing from the choice yielded by this function on the result. the function may be applied lazily or immediately, at the discretion of the implementation. this is the monadic bind for choice.
returns all the choices obtained by choosing from this choice and yielding a present the function may be applied lazily or immediately, at the discretion of the implementation.
filters the choices to those that satisfy the provided predicate.
maps the choices with the specified function.
returns a choice with only one option, t.
returns all successful unification paths from the specified unifier unifying the specified lists, allowing varargs if and only if allowvarargs is true.
reflectively instantiate the package-private methodresolutionphase enum.
returns a list of the actual types to be matched. this consists of the types of the expressions bound to the @beforetemplate method parameters, concatenated with the types of the expressions bound to expression placeholders, sorted by the name of the placeholder method.
returns a list of the elements of typevariables that are not bound in the specified unifier.
returns a list of the expected types to be matched. this consists of the argument types from the @beforetemplate method, concatenated with the return types of expression placeholders, sorted by the name of the placeholder method.
returns the inferred method type of the template based on the given actual argument types. actualargtypes to match the expectedargtypes
reflectively invoke resolve.checkmethod(), which despite being package-private is apparently the only useful entry-point into javac8's type inference implementation.
returns a string representation of a statement, including semicolon.
returns a string representation of a sequence of statements, with semicolons and newlines.
skips the finally block if the result would be empty.
code. references to known variables
start server, bind port
close server
recursive visit
end a branch node
create a branch node
draw separation line
visible width for the given string. for example: "abc\n1234"'s width is 4.
build a new metric name using the specific path components.
same as #tag(map), but takes a variadic list of arguments. with it.
add tags to a metric name and return the newly created metricname.
join the specified set of metric names. parts and includes all tags of all child metric names.
build the metricname that is this with another path appended to it. the new metricname inherits the tags of this one. in p.
get dynamically bound imetricmanager instance
get all zookeeper urls (such as :zookeeper:127.0.0.1:2181?127.0.0.1:8989,127.0.0.1:9999)
get the zookeeperclient from cache, the zookeeperclient must be connected.  it is not private method for unit test.
write address-zookeeperclient relationship to map
share connnect for registry, metadata, etc..  make sure the connection is connected.
redefine the url for zookeeper. just keep protocol, username, password, host, port, and individual parameter.
build a bad request's response
same principle as the #format(string, object) and arguments can be passed in an array. anchors
init a defaultfuture 1.init a defaultfuture 2.timeout check
close a channel when a channel is inactive directly return the unfinished requests.
creates a new heap buffer with an existing byte array.
initializer logback
create statistics url
the invocation interceptor,it will collect the invoke data about this invocation and send it to monitor center
the collector logic, it will be handled by the default monitor
in order to make sure multicast registry works, need to specify '-djava.net.preferipv4stack=true' before launch the application
in order to make sure multicast registry works, need to specify '-djava.net.preferipv4stack=true' before launch the application
in order to make sure multicast registry works, need to specify '-djava.net.preferipv4stack=true' before launch the application
in order to make sure multicast registry works, need to specify '-djava.net.preferipv4stack=true' before launch the application
in order to make sure multicast registry works, need to specify '-djava.net.preferipv4stack=true' before launch the application
in order to make sure multicast registry works, need to specify '-djava.net.preferipv4stack=true' before launch the application
close all invokers
check whether the invoker in the cache needs to be destroyed if set attribute of url: refer.autodestroy=false, the invokers will only increase without decreasing,there may be a refer leak
else :routers list
turn urls into invokers, and if url has been refer, will not re-reference.
merge url parameters. the order is: override > -d >consumer > provider
get the address of the providerurl through the url of the invoker
get the key cached in bounds by invoker
return value of org.apache.dubbo.registry.registryservice#lookup(url).
reexport the invoker of the modified url
return the url that is registered to the registry and filter the url parameter once
notify changes from the provider side.
remove the expired providers(if clean is true), leave the multicast group and close the multicast socket.
remove the expired providers, only when "clean" parameter is true.
perform the validation of before invoking the actual method based on validation attribute value.
takes url and invocation instance and return cache instance for a given url.
stop thread
start expiring thread
taken url as an argument to create an instance of threadlocalcache. in this version of implementation constructor argument is not getting used in the scope of this class.
if cache is configured, dubbo will invoke method on each method call. if cache value is returned by cache store then it will return otherwise call the remote method and return value. if remote method's return valeu has error then it will not cache the value.
between 2:00 am to 6:00 am, the time is random.
describe a java interface in json schema.
describe a java interface in servicedefinition.
get the code source file or class path of the class passed in.
get all non-static fields of the class passed in or its super classes. 
get all public, non-static methods of the class passed in. 
find dynamicconfiguration instance
since all governance rules will lay under dubbo group, this method now always uses the default dubboconfig and ignores the group parameter.
this method will be used to: 1. get configuration file at startup phase 2. get all kinds of dubbo rules
this is used to convert a configuration nodepath into a key todo doc
adds a listener to the pathchildrencache, initializes the cache, then starts the cache-management background thread
convert override urls to map for use when re-refer. send all rules every time, the urls will be reassembled and calculated url contract:  override:0.0.0.0...( or  means global rules (all of the providers take effect) override:ip:port...?anyhost=false special rules (only for a certain provider) override: rule is not supported... ,needs to be calculated by registry itself override:0.0.0.0 without parameters means clearing the override 
sort by host, then by priority 1. the url with a specific host ip should have higher priority than 0.0.0.0 2. if two url has the same host, compare by priority value；
the resident routers must being initialized before address notification. fixme: this method should not be public
if we use route: protocol in version before 2.7.0, each url will generate a router instance, so we should keep the routers up to date, that is, each time router urls changes, we should update the routers list, only keep the builtinrouters which are available all the time and the latest notified routers which are generated from urls.
find the merger according to the returntype class, the merger will merge an array of returntype into one
get the weight of the invoker's invocation which takes warmup time into account if the uptime is within the warmup time, the weight will be reduce proportionally
get invoker addr list cached for specified invocation  for unit test only
if there's no dynamic tag rule being set, use static tag in url. a typical scenario is a consumer using version 2.7.x calls providers using version 2.6.x or lower, the consumer should always respect the tag in provider url regardless of whether a dynamic tag rule has been set to it or not. todo, to guarantee consistent behavior of interoperability between 2.6- and 2.7+, this method should has the same logic with the tagrouter in 2.6.x.
get rule from url parameters.
create bindings for script engine
create scriptengine instance by type from url parameters, then cache it
reselect, use invokers not in `selected` first, if all invokers are in `selected`, just pick an available one using loadbalance policy.
select a invoker using loadbalance policy. a) firstly, select an invoker using loadbalance. if this invoker is in previously selected list, or, if this invoker is unavailable, then continue step b (reselect), otherwise return the first selected invoker  b) reselection, the validation rule for reselection: selected > available. this rule guarantees that the selected invoker has the minimum chance to be one in the previously selected list, and also guarantees this invoker is available.
return mockinvoker contract： directory.list() will return a list of normal invokers if constants.invocation_need_mock is present in invocation, otherwise, a list of mock invokers will return. if directory.list() returns more than one mock invoker, only one of them will be used.
finds injectionmetadata.injectedelement metadata from annotated reference @reference methods
generate a cache key of referencebean
finds injectionmetadata.injectedelement metadata from annotated reference @reference fields
get referencebean map in injected method.
get referencebean map in injected field.
it'd better to use beannamegenerator instance that should reference thus it maybe a potential problem on bean name generation.
registers beans whose classes was annotated service
registers servicebean from new annotated service beandefinition
generates the bean name of servicebean
finds a set of beandefinitionholder beandefinitionholders whose bean type annotated
registers compatibleserviceannotationbeanpostprocessor
parse  <dubbo:annotation package="" > 
create dubboconfigbinder instance.
registers servicebean from new annotated service beandefinition
generates the bean name of servicebean
finds a set of beandefinitionholder beandefinitionholders whose bean type annotated
it'd better to use beannamegenerator instance that should reference thus it maybe a potential problem on bean name generation.
registers beans whose classes was annotated service
build b
get map in injected method.
finds injectionmetadata.injectedelement metadata from annotated a @a methods
get injected-object from specified a annotation and bean class
finds injectionmetadata.injectedelement metadata from annotated a fields
get map in injected field.
registers serviceannotationbeanpostprocessor
parse  <dubbo:annotation package="" > 
get optional bean
gets name-matched beans from listablebeanfactory beanfactory
register beans
register infrastructure bean
get the annotation attributes
is specified annotation present on method's declaring class or parameters or itself.
find specified annotation type maps from method the list of annotation as value. if annotation was annotated on method's parameters elementtype#parameter , the associated annotation list may contain multiple elements.
get sub properties
get sub properties
load the registry and conversion it to url, the priority order is: system property > dubbo registry config
check whether the registry config is exists, and then conversion it to registryconfig
check whether the remote service interface and the methods meet with dubbo's requirements.it mainly check, if the methods configured in the configuration file are included in the interface of remote service
load the monitor config from the system properties and conversation it to url
legitimacy check and setup of local simulated operations. the operations can be a string with simple operation or a classname whose class implements a particular function side, it is the class of the remote service interface that will be referenced
for compatibility purpose, use registry as the default config center if the registry protocol is zookeeper and there's no config center specified explicitly.
should be called after config was fully initialized. fixme: this method should be completely replaced by appendparameters  notice! this method should include all properties in the returning map, treat eter differently compared to appendparameters.
todo: currently, only support overriding of properties explicitly defined in config class, doesn't support overriding of customized parameters stored in 'parameters'.
check whether there is a extension who's name (property) is value (special treatment is required)
this method should be called right after the creation of this class's instance, before any property in other config modules is used. check each config modules are created properly and override their properties if necessary.
register  bind ip address for service provider, can be configured separately. configuration priority: environment variables -> java system properties -> host property in config file -> etchosts -> default network address -> first available network address
register port and bind port for the provider, can be configured separately configuration priority: environment variable -> java system properties -> port property in protocol config file -> protocol default port
destroy all the protocols.
destroy all the resources, including registries and protocols.
register the shutdownhook
unregister the shutdownhook
get the cache use specified keygenerator. create cache if not existed yet.
clear and destroy all referenceconfig in the cache.
search resources in caller's classloader
get prefix digits from given version string
get version from file: pathtogroup-module-x.y.z.jar, returns x.y.z
parse url string
the format is 'groupinterfacenamepathversion'
add parameters to a new url.
write json.
add items.
write json.
put all.
put all.
object item.
array begin.
value.
object begin.
value.
value.
value.
array end, return array value.
value.
value.
object end.
value.
unpacks the compressed character translation table.
reports an error that occured while scanning.  in a wellformed scanner (no or only correct usage of yypushback(int) and a match-all fallback rule) this method will only be called with things that "can't possibly happen". if this method is called, something is seriously wrong (e.g. a jflex bug producing a faulty scanner etc.).  usual syntaxscanner level error handling should be done in error fallback rules.
resumes scanning until the next regular expression is matched, the end of input is encountered or an io-error occurs.
refills the input buffer.
closes the input stream.
json string.
parse json.
json string.
write json.
parse json.
parse json.
parse json.
get md5.
from hex string.
to hex string.
zip.
from base64 string.
unzip.
to base64 string.
from base64 string.
to base64 string.
byte array copy.
get full qualified class name
build ctclass object
get simple class name from qualified class name
transform the class.forname string to class object.
retry offer task
create new instance for each call, since it will be called only at startup, i think there's no big deal of the potential cost. otherwise, if use cache, we should make sure each config has a unique id which is difficult to guarantee because is on the user's side, especially when it comes to serviceconfig and referenceconfig.
set logger provider
get parameter with type url from method parameter:  test if parameter has method which returns type url  if not found, throws illegalstateexception
get index of parameter with type url
generate method content
generate method throws
1, test if argi is null 2, test if argi.getxx() returns null 3, assign url with argi.getxx()
generate method declaration
generate code to test argument of type invocation is null
get value of adaptive annotation or if empty return splitted simple name
generate and return class code
generate method arguments
generate method invocation statement and return it if necessary
return true if and only if:  1, public  2, name starts with "set"  3, only has one parameter
test if clazz is a wrapper class  which has constructor with given class type as its only argument
cache wrapper class  like: protocolfilterwrapper, protocollistenerwrapper
cache activate class which is annotated with activate  for compatibility, also cache class with old alibaba activate annotation
replace the existing extension via api
get extension's instance. return null if extension is not found or is not initialized. pls. note that this method will not trigger extension load.  in order to trigger extension load, call #getextension(string) instead.
extract and cache default extension name if exists
find the extension with the given name. if the specified name is not found, then illegalstateexception will be thrown.
get activate extensions.
cache adaptive class which is annotated with adaptive
cache name
register new extension via api
put clazz in extensionclasses
get class loader
resolve the given class name as primitive class, if appropriate, according to the jvm's naming rules for primitive classes.  also supports the jvm's internal class names for primitive arrays. does not support the "[]" suffix notation for primitive arrays; this is only supported by #forname. denote a primitive class or primitive array class
replacement for class.forname() that also returns class instances for primitives (like "int") and array class names (like "string[]"). which indicates the default class loader)
check if the given value matches the given pattern. the pattern supports wildcard "".
check if an ipv6 address is reachable.
normalize the ipv6 address, convert scope name to scope id. e.g. convert fe80:0:0:0:894:aeec:f37d:23e1%en0 to fe80:0:0:0:894:aeec:f37d:23e1%5  the %5 after ipv6 address is called scope id. see java doc of inet6address for more details.
get class array desc. [int.class, boolean[].class, object.class] => "i[zljavalangobject;"
find method from method signature
get constructor desc. "()v", "(ljavalangstring;i)v"
get method desc. "do(i)i", "do()v", "do(ljavalangstring;z)v"
get method desc. int do(int arg1) => "do(i)i" void do(string arg1,boolean arg2) => "do(ljavalangstring;z)v"
get constructor desc. "()v", "(ljavalangstring;i)v"
desc to class. "[z" => boolean[].class "[[ljavautilmap;" => java.util.map[][].class
name to class. "boolean" => boolean.class "java.util.map[][]" => java.util.map[][].class
desc to name. "[[i" => "int[][]"
check if one object is the implementation for a given interface.  this method will not trigger classloading for the given interface, therefore it will not lead to error when the given interface is not visible by the classloader
get class array instance.
is compatible.
get class desc. boolean[].class => "[z" object.class => "ljavalangobject;"
get constructor name. "()", "(java.lang.string,int)"
get name. java.lang.object[][].class => "java.lang.object[][]"
get method name. "void do(int)", "void do()", "int do(java.lang.string,boolean)"
name to desc. java.util.map[][] => "[[ljavautilmap;"
get class desc. object.class => "ljavalangobject;" boolean[].class => "[z"
get method desc. "(i)i", "()v", "(ljavalangstring;z)v".
get method desc. "(i)i", "()v", "(ljavalangstring;z)v"
write.
write lines.
write lines.
append lines.
write string.
read string.
write.
read lines.
read lines.
peek.
pop.
remove.
push.
set.
get.
split.
join string.
join string like javascript.
returns true if s is a legal java identifier.  href="http:www.exampledepot.comegsjava.langisjavaid.html">more info.
replaces a string with another string inside a larger string, for the first max values of the search string. a null reference passed to this method is a no-op.  stringutils.replace(null, , , ) = null stringutils.replace("", , , ) = "" stringutils.replace("any", null, , ) = "any" stringutils.replace("any", , null, ) = "any" stringutils.replace("any", "", , ) = "any" stringutils.replace("any", , , 0) = "any" stringutils.replace("abaa", "a", null, -1) = "abaa" stringutils.replace("abaa", "a", "", -1) = "b" stringutils.replace("abaa", "a", "z", 0) = "abaa" stringutils.replace("abaa", "a", "z", 1) = "zbaa" stringutils.replace("abaa", "a", "z", 2) = "zbza" stringutils.replace("abaa", "a", "z", -1) = "zbzz" 
join string like javascript.
repeat a string repeat times to form a new string.  stringutils.repeat(null, 2) = null stringutils.repeat("", 0) = "" stringutils.repeat("", 2) = "" stringutils.repeat("a", 3) = "aaa" stringutils.repeat("ab", 2) = "abab" stringutils.repeat("a", -2) = "" 
translate.
removes a substring only if it is at the end of a source string, otherwise returns the source string. a null source string will return null. an empty ("") source string will return the empty string. a null search string will return the source string.  stringutils.removeend(null, ) = null stringutils.removeend("", ) = "" stringutils.removeend(, null) = stringutils.removeend("www.domain.com", ".com.") = "www.domain.com" stringutils.removeend("www.domain.com", ".com") = "www.domain" stringutils.removeend("www.domain.com", "domain") = "www.domain.com" stringutils.removeend("abc", "") = "abc" 
parse query string to parameters.
returns padding using the specified delimiter repeated to a given length.  stringutils.repeat('e', 0) = "" stringutils.repeat('e', 3) = "eee" stringutils.repeat('e', -2) = ""  note: this method doesn't not support padding with  href="http:www.unicode.orgglossary#supplementary_character">unicode supplementary characters as they require a pair of chars to be represented. if you are needing to support full i18n of your applications consider using #repeat(string, int) instead. 
parse key-value pair.
strips any of a set of characters from the end of a string. a null input string returns null. an empty string ("") input returns the empty string. if the stripchars string is null, whitespace is stripped as defined by character#iswhitespace(char).  stringutils.stripend(null, ) = null stringutils.stripend("", ) = "" stringutils.stripend("abc", "") = "abc" stringutils.stripend("abc", null) = "abc" stringutils.stripend(" abc", null) = " abc" stringutils.stripend("abc ", null) = "abc" stringutils.stripend(" abc ", null) = " abc" stringutils.stripend(" abcyx", "xyz") = " abc" stringutils.stripend("120.00", ".0") = "12" 
get parameterized type
use the shutdown pattern from: https:docs.oracle.comjavase8docsapijavautilconcurrentexecutorservice.html
append thread name with url address
compatible type convert. null value is allowed to pass in. if no conversion is needed, then the original value will be returned.  supported compatible type conversions include (primary types and corresponding wrappers are not listed):   string -> char, enum, date  byte, short, int, long -> byte, short, int, long  float, double -> float, double 
load properties file to properties from class path. return empty properties if no file found. merge multi properties file if found multi file 
insert default extension into extension list.  extension list support special value default, means the location for default extensions. special symbol-, means remove. -foo1 will remove default extension 'foo'; -default will remove all default extensions. 
get wrapper.
has method.
set property value.
get property value.
get proxy.
mixin interface and delegates. all class must be public.
starts the background thread explicitly. the background thread will start automatically on demand even if you did not call this method.
expire all hashedwheeltimeouts for the given deadline.
creates a new timer. background thread which is dedicated to being thrown. no maximum pending timeouts limit is assumed if this value is 0 or negative.
clear this bucket and return all not expired cancelled timeouts.
calculate goal nanotime from starttime and current tick number, then wait until that goal has been reached. current time otherwise (with long.min_value changed by +1)
removes all internalthreadlocal variables bound to the current thread. this operation is useful when you are in a container environment, and you don't want to leave the thread local variables in the threads you do not manage.
returns the number of thread local variables bound to the current thread.
sets the value to uninitialized for the specified thread local map; a proceeding call to get() will trigger a call to initialvalue(). the specified thread local map must be for the current thread.
returns the current value for the current thread
sets the value for the current thread.
only supposed to be called at startup time
only supposed to be called at startup time later may consider adding support for custom serializer, custom id, etc
need to restore context on provider side (though context will be overridden by invocation's attachment when contextfilter gets executed, we will restore the attachment when invocation is constructed, check more from org.apache.dubbo.rpc.proxy.invokerinvocationhandler
get local host name.
set attachments
async invocation. timeout will be handled even if future.get() is not called.
set attachment.
get remote host.
get local host.
one way async call, send request only, and result is not required
set value.
normalize mock string:  return => return null fail => default force => default fail:throwreturn foo => throwreturn foo force:throwreturn foo => throwreturn foo 
default constructor.
this method logs the access log for service method invocation call.
this constructor create an instance of consumermodel and passed objects should not be null. if service name, service instance, proxy object,methods should not be null. if these are null then this constructor will throw illegalargumentexception
if a string value illegal for rest protocol(',' and '=' is illegal for rest protocol).
if #request_with_warning_key is configured, then warn once every 5000 invocations.
when closing the client, the client needs to be set to lazyconnectexchangeclient, and if a new call is made, the client will "resurrect".
export or unexport callback service on client side
refer or destroy callback service on server side
build a single client
add client references in bulk
get shared connection
create new connection
bulk build client
close referencecountexchangeclient
check if the client list is all available
generate class name which represents service arguments.
emits a single gt ast node with the line and column correctly set to its position in the source file. this must only ever be called when a typeparameters or typearguments production is ending and there is at least one gt character to be emitted.
object instantiation. trees are built as illustrated by the following inputtree pairs: new t() new | t -- elist | arg1 -- arg2 -- .. -- argn new int[] new | int -- array_declarator new int[] 1,2 new | int -- array_declarator -- array_init | expr -- expr | | 1 2 new int[3] new | int -- array_declarator | expr | 3 new int[1][2] new | int -- array_declarator | array_declarator -- expr | | expr 1 | 2
consume a sequence of '>' characters (gt, sr or bsr) and match these against the '<' characters seen.
a declaration is the creation of a reference or primitive-type variable create a separate typevar tree for each var in the var list.
declaration of a variable. this can be a classinstance variable, or a local variable in a method. it can also include possible initialization.
load cached values from file.
calculates the hashcode for the serializable object based on its content.
checks whether the contents of external configuration resources were changed.
loads the content of external resource.
loads a set of externalresource based on their locations.
cleans up the object and updates the cache file.
serializes object to output stream.
creates a new propertycachefile instance.
notify all listeners about the beginning of a file audit. the file to be audited
sets a named charset.
notify all listeners about the errors in a file.
notify all listeners about the audit start.
notify all listeners about the end of a file audit. the audited file
returns a set of external configuration resource locations which are used by all file set checks and filters. checks and filters.
processes a list of files with all filesetchecks. @noinspection prohibitedexceptionthrown
sets the file extensions that identify the files that pass the filter of this filesetcheck. initial '.' character of an extension is automatically added.
clears the cache.
notify all listeners about the audit end.
@noinspection chainofinstanceofchecks
sets cache file.
processes a file with all filesetchecks. @noinspection prohibitedexceptionthrown
creates a new xmllogger instance. sets the output to a defined stream.
outputs the given event to the writer.
prints the file section with all file errors and exceptions.
writes the exception event to the print writer.
finds whether the given argument is character or entity reference.
creates a new xmllogger instance. sets the output to a defined stream. @noinspection booleanparameter
escape <, > & ' and " as their entities.
create comment ast from token. depending on token type single_line_comment or block_comment_begin is created.
parses java source file.
create single-line comment from token.
appends comment nodes to existing ast. it traverses each node in ast, looks for hidden comment tokens and appends found comment tokens as nodes in ast.
static helper method to parses a java source file.
parse a text and return the parse tree.
creates xpathquerygenerator instance and generates suppressions.
prints generated suppressions.
returns the length of the buffer for stringbuilder. bufferlength = filenamelength + messagelength + lengthofallseparators + + severitynamelength + checknamelength.
returns check name without 'check' suffix.
walks over the type members and push the first javadoc sentence of every
extracts the first sentence as html formatted text from the comment of an detailast. the end of the sentence is determined by the symbol "period", "exclamation mark" or "question mark", followed by a space or the end of the text. inline tags and @literal are converted to html code. or null if the first sentence is absent or malformed (does not end with period) tag found
creates the .properties file from a .java file.
extracts the first sentence as html formatted text from a detailnode. the end of the sentence is determined by the symbol "period", "exclamation mark" or "question mark", followed by a space or the end of the text. inline tags and @literal are converted to html code. malformed (does not end with any of the end-of-sentence markers)
concatenates the html text from ast of a javadoctokentypes.html_element.
converts inline code tag into html form.
checks that the detailast is a public static final int field.
finds the class body of the first class in the detailast.
tokentypes.properties generator entry point.
configures saxparserfactory with features required for execution on very secured environments.
creates a new instance.
returns the module configurations from a specified input source. note that if the source does wrap an open byte or character stream, clients are required to close that stream by themselves 'ignore' should be omitted, execute otherwise @noinspection weakeraccess
util method to recheck attribute in module.
creates a new configurationloader instance. omitted
returns the module configurations from a specified input source. note that if the source does wrap an open byte or character stream, clients are required to close that stream by themselves 'ignore' should be omitted, false otherwise @noinspection booleanparameter, weakeraccess
replaces $xxx style constructions in the given value with the string value of the corresponding data types. this method must remain outside inner class for easier testing since inner class requires an instance. code copied from ant - http:cvs.apache.orgviewcvsjakarta-antsrcmainorgapachetoolsantprojecthelper.java may be null, in which case this method returns immediately with no effect. values. must not be null. cannot be resolved from props. @noinspection methodwithmultiplereturnpoints, methodonlyusedfrominnerclass
parses a string containing $xxx style property references into two lists. the first list is a collection of text fragments, while the other is a set of string property names. reference from the second list. code copied from ant - http:cvs.apache.orgviewcvsjakarta-antsrcmainorgapachetoolsantprojecthelper.java must not be null. must not be null.
returns the module configurations from a specified input stream. note that clients are required to close the given stream by themselves 'ignore' should be omitted, false otherwise preventing resolution of external entities, a version using an inputsource should be used instead @noinspection booleanparameter
returns the module configurations in a specified file. 'ignore' should be omitted, execute otherwise
returns the module configurations in a specified file. 'ignore' should be omitted, false otherwise @noinspection booleanparameter, weakeraccess
creates mapping between local resources and dtd ids. this method can't be moved to inner class because it must stay static because it is called from constructor and inner class isn't static. @noinspection methodonlyusedfrominnerclass
returns a set of external configuration resource locations which are used by the checks set.
notify checks that leaving a node. the node to notify for
notify checks that visiting a node.
method returns list of checks. the node to notify for state of ast.
returns filtered set of localizedmessage.
register a check for a specified token name.
register a check for a given configuration.
notify checks that we have finished walking a tree.
@noinspection chainofinstanceofchecks
validates that check's required tokens are subset of default tokens.
returns a set of external configuration resource locations which are used by the filters set.
notify checks that we are about to begin walking a tree.
processes a node calling interested checks at each node. uses iterative algorithm.
parses block comment as javadoc and prints its tree.
get indentation for an ast node.
print ast.
replace all control chars with escaped symbols.
prints full tree (java + comments + javadoc) of the detailast.
get string representation of the node as token name, node text, line number and column number.
creates a full package name from the package names on the stack.
returns the set of package names, compiled from all checkstyle_packages.xml files found on the given class loaders classpath. checkstyle_packages.xml files.
reads the file provided and parses it with package names loader.
creates mapping between local resources and dtd ids.
creates a new defaultlogger instance. @noinspection booleanparameter
creates a new defaultlogger instance. @noinspection booleanparameter, weakeraccess
flushes the output streams and closes them if needed.
creates a new defaultlogger instance. @noinspection weakeraccess
print an emacs compliant line on the error stream. if the column number is non zero, then also display it.
creates a new defaultlogger instance.
adds an attribute to this configuration.
create object from optional full module names. in most case, there should be only one element in fullmodulename, otherwise an exception would be thrown. element in fullmodulename
creates a new packageobjectfactory instance. core and custom modules
create object with the help of the supplied map.
fill short-to-full module names map with checks from javadoc package.
searching to class with given name (or name concatenated with "check") in existing packages. returns instance if class found or, otherwise, null.
create object from one of checkstyle module names.
fill short-to-full module names map with checks from naming package.
fill short-to-full module names map with modules from checks package.
fill short-to-full module names map with checks from regexp package.
fill short-to-full module names map with modules from filters package.
fill short-to-full module names map with checks from design package.
fill short-to-full module names map with checks from blocks package.
fill short-to-full module names map with checks from imports package.
fill short-to-full module names map with checks from header package.
fill short-to-full module names map with checks from whitespace package.
fill short-to-full module names map with checks from sizes package.
fill short-to-full module names map with checks from metrics package.
creates a new packageobjectfactory instance. core and custom modules
returns simple check name from full modules names map.
fill short-to-full module names map with checks from modifier package.
creates a new instance of a class from a given name, or that name concatenated with "check". if the name is a class name, creates an instance of the named class. otherwise, creates an instance of a class name obtained by concatenating the given name to a package name from a given list of package names.
fill short-to-full module names map with checks from annotation package.
creates a string by joining package names with a class name.
creates a new instance of a named class.
fill short-to-full module names map with checks from indentation package.
do execution of checkstyle based on command line options. @noinspection useofsystemoutorsystemerr
determines the files to process.
gets the list of exclusions provided through the command line arguments.
loads properties from a file. the properties file when could not load properties file
loops over the files specified checking them for errors. the exit code is the number of errors found in all the files. @noinspection useofsystemoutorsystemerr, calltoprintstacktrace, calltosystemexit
returns treewalker module configuration.
traverses a specified node looking for files to check. found files are added to a specified list. subdirectories are also traversed. the node to process files.
validates the user input and returns @value #exit_with_invalid_user_input_code if invalid, otherwise executes checkstyle and returns the number of violations. @noinspection useofsystemoutorsystemerr
returns a new auditlistener for this outputformat.
checks if a directoryfile path should be excluded based on if it matches one of the patterns supplied. files.
creates a new instance of the root module that will control and run checkstyle. will have to be found or the complete package name.
this method creates in auditlistener an open stream for validation data, it must be closed by rootmodule (default implementation is checker) by calling @exception ioexception when provided output location is not found
executes required checkstyle actions based on passed parameters. when output file could not be found when properties file could not be loaded @noinspection useofsystemoutorsystemerr
creates child nodes for each node from 'nodes' array.
parses block comment content as javadoc comment. block comment content.
parses javadoc comment as detailnode tree. detailast of javadoc comment
this method is used to get the first non-tight html tag encountered while parsing javadoc. this shall eventually be reflected by the parsestatus object returned by or the ones which are supposed to log violation for non-tight javadocs can utilize that.
logs parser errors in checkstyle manner. parser can generate error messages. there is special error that parser can generate. it is missed close html tag. this case is special because parser prints error like "no viable alternative at input 'b \n \n'" and it is not clear that error is about missed close html tag. other error messages are not special and logged simply as "parse error...". 
gets token type of parsetree node from javadoctokentypes class.
converts parsetree (that is generated by antlrv4) to detailnode tree. @noinspection suspiciousarraycast
creates children javadoc nodes base on parsetree node's children.
method to get the missed html tag to generate more informative error message for the user. this method doesn't concern itself with  href="https:www.w3.orgtrhtml51syntax.html#void-elements">void elements since it is forbidden to close them. missed html tags for the following tags will not generate an error message from antlr:                null otherwise
adjust first line nodes to javadoc indent.
gets next sibling of parsetree node.
gets class name of parsetree node and removes 'context' postfix at the end. parsetree node.
initializes parse error message.
creates javadocnodeimpl node on base of parsetree node.
creates root javadocnodeimpl node base on parsetree root node.
creates a new suppressionfilegenerator instance. sets the output to a defined stream.
prints xml header if only it was not printed before.
get indentation for a node.
print ast.
parse a file and return the parse tree.
builds error message base on parseerrormessage's message key, its arguments, etc.
parse block comment detailast as javadoc detailnode tree.
creates a new propertiesexpander. property resolution.
resolves the module name according to the thread settings.
scans the given path and retrieves all files for the given path.
retrieves all matched files from the given scanner. must be called before calling this method.
returns the list of files (full path name) to process.
creates default logger.
retrieves all files from the defined paths.
returns the list of files (full path name) to process.
sets configuration file.
return the list of listeners set in this task.
creates new instance of the root module.
helper implementation to perform execution.
scans and processes files by means given root module.
creates classpath.
creates a listener for the formatter.
creates xml logger.
create the properties object based on the arguments specified to the ant task.
create content of this mainframe.
open file and load it.
create buttons panel.
notify all listeners that have registered interest for 'tree structure changed' event. the event instance is lazily created using the parameters passed into the fire method.
sets parse tree.
constructor.
set selection.
finds the last position of node without children.
find start and end selection positions from detailnode line and column.
finds the last position of node without children.
find start and end selection positions from ast line and column.
open file and load the file.
get the directory of the last loaded file.
notifies all listeners that have registered interest for 'editing stopped' event.
notifies all listeners that have registered interest for 'editing canceled' event.
set initial value of width for columns in table.
overridden to message super and forward the method to the tree. since the tree is not actually in the component hierarchy it will never receive this unless we forward it in this manner.
overridden to return false, and if the event is a mouse event it is forwarded to the tree. the behavior for this is debatable, and should really be offered as a property. by returning false, all keyboard actions are implemented in terms of the table. by returning true, the tree would get a chance to do something with the keyboard events. for the most part this is ok. but for certain keys, such as leftright, the tree will expandcollapse where as the table focus should really move to a different column. page updown should also be implemented in terms of the table. by returning false this also has the added benefit that clicking outside of the bounds of the tree node, but still in the tree column will select the row, whereas if this returned true that wouldn't be the case. by returning false we are also enforcing the policy that the tree will never be editable (at least by a key sequence).
do expansion of a tree node.
overridden to pass the new rowheight to the tree.
creates treetable base on treetablemodel.
gets javadoc (detailnode) tree of specified block comments.
gets child of detailast node at specified index. and parsemode is java_with_javadoc_and_comments.
gets a value for detailast object.
gets a value for detailnode object.
creates artificial tree root.
entry point.
updateui is overridden to set the colors of the tree's renderer to match that of the table.
subclassed to translate the graphics such that the last visible row will be drawn at 0,0.
sets the row height of the tree, and forwards the row height to the table.
initialise tree and treetablemodel class attributes.
if the row at given index is selected, selected paths are updated.
determines axis iteration algorithm.
iterates children of the current node and recursively creates new xpath-nodes.
finds child element with tokentypes#ident, extracts its value and stores it. value can be accessed using @text attribute. now @text attribute is only supported attribute.
determines axis iteration algorithm. throws unsupportedoperationexception in case, when there is no axis iterator for given axisnumber.
returns attribute value. throws unsupportedoperationexception in case, when name of the attribute is not equal to 'text'.
determines axis iteration algorithm. throws unsupportedoperationexception in case, when there is no axis iterator for given axisnumber.
creates a new rootnode instance.
iterates siblings of the current node and recursively creates new xpath-nodes.
returns relative xpath query for given ast element from root.
checks if the given detailast node is matching line number, column number and token type.
returns list of nodes matching defined line number, column number and token type.
checks if the given ast element has unique tokentypes among siblings.
for unit tests, especially with a class with no package name. used by the module.
recursively extract a fullident.
creates a new fullident starting from the specified node.
append the specified token and also recalibrate the first line and column.
helper method to log a localizedmessage. with the message
creates new instance.
returns the javadoc comment before the specified line. a return value of null means there is no such comment.
checks if the specified position intersects with a single line comment.
report the location of a block comment.
checks if the specified position intersects with a block comment.
returns the specified block comment as a string array.
creates a new filecontents instance. in order to preserve the original line breaks where possible.
report the location of a single line comment.
add next sibling. detailast object.
set the parent token.
finds line number in the first non-comment node.
returns token type with branch.
returns the first child token that makes a specified type.
add previous sibling. detailast object.
returns the number of child nodes one level below this node. that is is does not recurse down the tree.
returns the number of direct child tokens that have the specified type.
finds column number in the first non-comment node.
gets the last child node.
creates a new counter.
notify all listeners about the errors in a file. calls messagedispatcher.fireerrors() with all logged errors and than clears errors' list.
sets the file extensions that identify the files that pass the filter of this filesetcheck. initial '.' character of an extension is automatically added.
compatibility constructor. this constructor reconstructs the text of the file by joining lines with linefeed characters. this process does not restore the original line terminators and should therefore be avoided.
creates a new file text representation. the file will be read using the specified encoding, replacing malformed input and unmappable characters with the default replacement character.
determine line and column numbers in full text.
reads file using specific decoder and returns all its content as a string.
find positions of line breaks in the full text.
gets the audit event severity level.
recheck property and try to copy it.
called by configure() for every child of this component's configuration.  the default implementation throws checkstyleexception if must be overridden to validate and support children that are wanted. 
register basic types of jdk like boolean, int, and string to use with beanutils. all these types are found in the java.lang package. instance of convertutilsbean to register types with.
creates a beanutilsbean that is configured to use type converters that throw a conversionexception instead of using the default value when something goes wrong.
implements the configurable interface using bean introspection. subclasses are allowed to add behaviour. after the bean based setup has completed first the method is called to allow completion of the bean's local setup, after that the method #setupchild setupchild is called for each configuration#getchildren child configuration of configuration.
implements the contextualizable interface using bean introspection.
register custom types of jdk like uri and checkstyle specific classes to use with beanutils. none of these types should be found in the java.lang package. instance of convertutilsbean to register types with.
gets the translated message.
returns the formatted custom message if one is configured. if there is no custom message
creates a xpathelement instance.
returns list of nodes matching xpath expression given event.
creates a xpathelement instance.
is matching by file name, moduleid and check name.
is matching by xpath query.
whether current event matches any tag from #tags.
tags a string if it matches the format for turning checkstyle reporting on or the format for turning reporting off.
determines whether the source of an audit event matches the text of this tag.
constructs a tag.
collects all the suppression tags for all comments into a list and sorts the list.
appends the suppressions in a collection of comments to the full set of suppression tags.
gets influence from suppress filter influence format param.
is matching by file name and check name.
whether line and column match.
constructs a suppresselement for a file name pattern.
tries to extract the suppression from the given line.
creates new suppression instance.
indicates whether some other object is "equal to" this one. suppression on enumeration is needed so code stays consistent. @noinspection equalscalledonenumconstant
returns filetext instance created based on the given file name.
returns the list of suppression instances retrieved from the given filetext.
checks whether the suppression matches the given auditevent.
finds the nearest suppression instance which can suppress the given auditevent. the nearest suppression is the suppression which scope is before the line and column of the event.
parses specified source and returns the suppression loader.
returns the suppress element, initialized from given attributes. suppression file.
creates mapping between local resources and dtd ids.
returns the suppression filters in a specified file.
returns the suppression treewalker filters in a specified file.
returns the xpath filter, initialized from given attributes. specified inside suppression file.
collects all the suppression tags for all comments into a list and sorts the list.
tags a string if it matches the format for turning checkstyle reporting on or the format for turning reporting off.
determines whether the source of an audit event matches the text of this tag.
appends the suppressions in a collection of comments to the full set of suppression tags.
indicates whether some other object is "equal to" this one. suppression on enumeration is needed so code stays consistent. @noinspection equalscalledonenumconstant
constructs a tag.
finds the nearest comment text tag that matches an audit event. the nearest tag is before the line and column of the event.
determines whether an integer matches a csv integer value.
constructs a csvfilter from a csv, comma-separated values, string. each value is an integer, or a range of integers. a range of integers is of the form integer-integer, such as 1-10. note: integers must be non-negative. contain a parsable integer.
checks that block comment is on specified class member without any modifiers.
checks that block comment is on specified token with annotation.
checks that block comment is on specified token without any modifiers.
get next sibling node skipping any comment nodes.
checks that block comment is on specified token with modifiers.
node is on enum constant.
get previous sibling node skipping any comments.
constructs a normalized relative path between base directory and a given path. the base path to which given path is relativized the path to relativize against base directory path or path if base directory is null.
puts part of line, which matches regexp into given template on positions $n where 'n' is number of matched part in line.
checks whether the given string is a valid name.
returns new instance of a class. to invoke to pass to constructor type of constructor
checks whether the given string is a valid identifier.
gets constructor of targetclass. from which constructor is returned of constructor
create block comment from string content.
returns the length of a string prefix with tabs expanded. each tab is counted as the number of characters is takes to jump to the next tab stop. the input string index in string (exclusive) where the calculation stops the distance between tab stop position.
helper method to create a regular expression with a specific flags. the pattern to match the flags to set if unable to create pattern object.
checks if the value arg is blank by either being null, empty, or contains only whitespace characters.
returns file name without extension. we do not use the method from guava library to reduce checkstyle's dependencies on external libraries.
returns whether the file extension matches what we are meant to process. the file to be checked. files extensions, empty property in config makes it matches to all.
returns base class name from qualified name. the fully qualified name. cannot be null
resolve the specified filename to a uri.
count lines and columns (in last line) in text. string. initial value of lines counter. initial value of columns counter. counter.
closes a stream re-throwing ioexception as illegalstateexception. closeable object
returns file extension for the given file name or empty string if file does not have an extension. we do not use the method from guava library to reduce checkstyle's dependencies on external libraries. or empty string if file does not have an extension.
returns the length of a string ignoring all trailing whitespace. it is a pity that there is not a trim() like method that only removed the trailing whitespace. the string to process
create block comment from token. token object.
gets next sibling of specified node.
returns the name of a token for a given id. the id of the token name to get
returns the first child token that has a specified type. javadoc ast node the token type to match
gets tag name from javadoctagsection.
checks whether node contains any node of specified type among children on any deep level.
checks javadoc comment it's in right place. from javadoc util documentation: "placement of comments - documentation comments are recognized only when placed immediately before class, interface, constructor, method, field or annotation field declarations -- see the class example, method example, and field example. documentation comments placed in the body of a method are ignored." if there are many documentation comments per declaration statement, only the last one will be recognized. javadoc util documentation
gets previous sibling of specified node.
gets next sibling of specified node with the specified type.
replace all control chars with escaped symbols.
returns the id of a token for a given name. the name of the token id to get
checks that commentcontent starts with '' javadoc comment identifier. content of block comment identifier.
gets validtags from a given piece of javadoc. the javadoc comment to process. the type of validtags we're interested in
gets first child node of specified node.
checks if the class has a default constructor.
gets checkstyle's modules (directly, not recursively) in the given packages.
returns the short description of a token for a given name.
finds the first optional child token of detailast root node which matches the given predicate.
returns the id of a token for a given name.
get all token ids that are available in tokentypes.
performs an action for each child of detailast root node which matches the given token type.
creates an array of map keys for quick value-to-name lookup for the map.
gets the value of a static or instance field of type int or of another primitive type convertible to type int via a widening conversion. does not throw any checked exceptions. and the underlying field is inaccessible
returns the name of a token for a given id.
checks if the given ast is annotated with at least one annotation that matches the given predicate and returns the ast representing the first matching annotation.  this method will not look for imports or package statements to detect the passed in annotation. 
checks if the ast is annotated with the passed in annotation and returns the ast representing that annotation.  this method will not look for imports or package statements to detect the passed in annotation.   to check if an ast contains a passed in annotation taking into account fully-qualified names (ex: java.lang.override, override) this method will need to be called twice. once for each name given. 
checks if the given ast element is annotated with any of the specified annotations.  this method accepts both simple and fully-qualified names, e.g. "override" will match both java.lang.override and override.  at least one of the specified annotations;
checks if the ast is annotated with any annotation.
gets the ast that holds a series of annotations for the potentially annotated ast. returns null if the passed in ast does not have an annotation holder.
returns whether the scope of a node is restricted to a code block. a code block is a method or constructor body, an initializer block, or lambda body.
determines whether a node is a local variable definition. i.e. if it is declared in a code block, a for initializer, or a catch parameter.
returns whether a node is contained in the outer most type block.
returns whether a node is directly contained within an enum block.
returns the scope of the surrounding "block".
returns the scope specified by the modifier set.
returns whether a node is directly contained within a specified block.
returns the value represented by the specified string of the specified type. returns 0 for types other than float, double, int, and long.
creates fullident for given type node.
create set of class names and short class names.
returns whether a token represents an slist as part of an else statement.
tests whether a method definition ast defines an equals covariant. precondition: ast is a tokentypes.method_def node.
returns accessmodifier based on the information about access modifier taken from the given token of type tokentypes#modifiers.
checks whether a method is a not void one.
finds sub-node for given node minimal (line, column) pair.
retrieves the names of the type parameters to the node.
returns whether a token represents an else as part of an else if set.
returns whether an ast represents a setter method.
parses the string argument as an integer or a long in the radix specified by the second argument. the characters in the string must all be digits of the specified radix. parsed. precondition: text contains a parsable int.
retrieves the type parameters to the node.
returns whether an ast represents a getter method.
count regexp matches into string literal.
checks if literal has unicode chars.
checks if all characters in string literal is escaped.
check if trail comment is present after ast token.
reads the file provided and checks line separators. file provided
checks whether the content provided by the reader ends with the platform specific line separator. provided reader
sets the tokens which occurrence as descendant is limited.
counts the number of occurrences of descendant tokens.
checks if given comment is legal (single-line and matches to the pattern).
method looks at children and returns list of expressions in strings.
returns parent of given ast if parent has one of the following types: annotation_def, package_def, class_def, enum_def, enum_constant_def, ctor_def, method_def, parameter_def, variable_def, annotation_field_def, type, literal_new, literal_throws, type_argument, implements_clause, dot.
checks whether suppression entry position is after the audit event occurrence position in the source file. in the source file.
get all annotation values.
method removes checkstyle prefix (checkstyle:) from check name if exists. - name of the check
returns the literal string expression represented by an ast. or empty string if expression is too complex
checks whether suppression entry position is before the audit event occurrence position in the source file. in the source file.
returns the annotation values represented by an ast. expression or annotation array initializer
returns the default alias for the source name of a check, which is the source name in lower case with any dotted prefix or "check" suffix removed. name)
returns the n'th child of an ast node.
checks for a suppression of a check with the given source name and location in the last file processed. source location
returns the java identifier represented by an ast.
returns the alias for the source name of a check. if an alias has been explicitly registered via #registeralias(string, string), that alias is returned; otherwise, the default alias is used. name)
registers a list of source name aliases based on a comma-separated list of source=alias items, such as com.puppycrawl.tools.checkstyle.checks.sizes.parameternumbercheck= paramnum.
get target of annotation.
logs that translation file is missing.
searches for specific resource bundle in a set of resource bundles.
compares th the specified key set with the key sets of the given translation files (arranged in a map). all missing keys are reported.
helper method to log an exception.
creates a resourcebundle object with specific base name, common files extension.
checks an existence of translation files in the resource bundle. the name of translation file begins with the base name of resource bundle which is followed by '_' and a language code (country and variant are optional), it ends with the extension suffix.
validates the correctness of user specified language codes for the check.
checks resource files in bundle for consistency regarding their keys. all files in bundle must have the same key set. if this is not the case an error message is posted giving information which key misses in which file.
checks whether user specified language code is correct (is contained in available locales).
checks an existence of default translation file in the resource bundle.
groups a set of files into bundles. only files, which names match base name regexp pattern will be grouped.
extracts the base name (the unique prefix) of resource bundle from translation file name. for example "messages" is the base name of "messages.properties", "messages_de_at.properties", "messages_en.properties", etc.
loads the keys from the specified translation file into a set.
returns the name of translation file which is absent in resource bundle or guava's optional, if there is not missing translation. if there is not missing translation.
get source file name.
checks that method has only string[] or only string... param.
checks that return type is void.
if not inner class then change current class name.
checks that method has final and static modifiers.
checks for skip current param due to ignoreprimitivetypes option.
checks parameters of the method or ctor.
checks if the given parameter is final.
puts the value into properties by the key specified. @noinspection useofpropertiesashashtable
method returns regular expression pattern given key name. key name to look for
method returns line number the key is detected in the checked properties files first. key name to look for file, 1 is returned
examines every sibling and child of node for violations.
get node that owns tokentypes#array_declarator array_declarator sequence. , tokentypes#array_declarator array_declarator node.
gets position after token (place of possible redundant whitespace).
checks if there is unwanted whitespace after the visited node. , visited node. , column number of a possible whitespace. , line number of a possible whitespace.
gets previous node for tokentypes#index_op index_op token for usage in getpositionafter method, it is a simplified copy of getarraydeclaratorpreviouselement method. , tokentypes#index_op index_op node.
searches parameter node for a type node. returns it or its last node if it has an extended structure. , subject node.
finds previous node by text order for an array declarator, which parent type is tokentypes#type type. , array declarator node. , its parent node.
returns proper argument for getpositionafter method, it is a token after rbrack, tokentypes#ident ident or an array type definition (literal). , tokentypes#array_declarator array_declarator node.
gets leftmost token of identifier. , token possibly possessing an identifier.
for a visited ast node returns node that should be checked for not being followed by whitespace. , visited node.
whether the token has not allowed multiple empty lines before.
check if token is preceded by javadoc comment.
get list of empty lines.
process package.
checks if a token has empty pre-previous line.
process import.
log violation in case there are multiple empty lines inside constructor, initialization block or method.
checks if a token has a empty line before.
checks whether token placement violates policy of empty line between fields.
get list of empty lines to log.
checks if token have empty line after.
checks, whether there are empty lines within the specified line range. line numbering is started from 1 for parameter values otherwise
process a token representing a left parentheses.
process a token representing a right parentheses.
checks that semicolon is in empty for initializer or condition.
check if given ast is part of double brace initializer and if it should omit checking if next token is separated by whitespace. see  href="https:github.comcheckstylecheckstylepull2845"> pr#2845 for more information why this function was needed.
tests if a given detailast is part of an empty block. an example empty block might look like the following   public void mymethod(int val)   in the above, the method body is an empty block (""). empty block contained under a match token type node.
test if the given detailast is part of an empty block. an example empty block might look like the following   class foo   empty block contained under a match token type node.
is ast not a target of check.
check if it should be checked if next token is separated from current by whitespace. explanation why this method is needed is identical to one included in shouldcheckseparationfromprevioustoken method. false otherwise.
check if given ast is part of double brace initializer and if it should omit checking if previous token is separated by whitespace.
checks parens inside tokentypes#expr, tokentypes#question and tokentypes#method_call.
checks that a token follows an empty for iterator.
returns array of acceptable tokens.
checks whether tokentypes#rparen is a closing paren of a tokentypes#typecast.
checks that a token precedes an empty for initializer.
checks parens in tokentypes#resource_specification.
checks parens in token which may not contain parens, e.g.
checks parens in tokentypes#literal_for.
process single-generic.
checks the token for the end of generics.
process nested generics.
is generic before method reference.
checks the token for the start of generics.
checks whether token is followed by a whitespace.
returns length of code only without comments and blank lines.
checks if there is a scope definition to check and that the method is found inside that scope (class, enum, etc.). the method to analyze. counted.
increments to counter by one for the supplied scope.
gets the value of a scope counter.
determine the visibility modifier and raise the corresponding counter. the method-subtree from the abstractsyntaxtree.
process the end of a statement list.
process the end of a member definition.
creates new instance for nested structure.
adds one or more acceptable indentation level.
combines 2 acceptable indentation level classes.
gets list of registered handler types.
create new instance of handler for method_call.
registers a handler. type from tokentypes the handler to register
get the handler for an ast.
check the indentation of the conditional expression.
determines if this 'if' statement is part of an 'else' clause and on the same line.
whether the statement is a kind of definition (method, class etc.).
returns the first token of the distributed previous statement of comment.
checks whether the previous statement of a comment is a distributed return statement.
handles a comment which is placed within empty case block. note, if comment is placed at the end of the empty case block, we have checkstyle's limitations to clearly detect user intention of explanation target - above or below. the only case we can assume as a violation is when a single line comment within the empty case block has indentation level that is lower than the indentation level of the next case token. for example:  ... case option_one: violation case option_two: ... 
whether the statement can have or always have curly brackets.
checks if current comment is a trailing comment.
checks if current single line comment is trailing comment, e.g.:  double d = 3.14; some comment 
finds the start token of method call chain.
handles a comment which is placed within the empty code block. note, if comment is placed at the end of the empty code block, we have checkstyle's limitations to clearly detect user intention of explanation target - above or below. the only case we can assume as a violation is when a single line comment within the empty code block has indentation level that is lower than the indentation level of the closing right curly brace. for example:  if (a == true) violation 
does pre-order traverse of abstract syntax tree to find the previous statement of the comment. if previous statement of the comment is found, then the traverse will be finished. statement.
checks if comment and next code statement (or previous code stmt like case in switch block) are indented at the same level, e.g.:   some comment - same indentation level int x = 10; some comment - different indentation level int x1 = 5; / boolean bool = true; - same indentation level  
finds a token which begins the line.
whether the comment might have been used for the next block in a multi-block structure. block in a multi-block structure.
checks whether comment is placed in the empty code block. for example:  ... empty code block ...  note, the method does not treat empty case blocks.
gets previous case-token for comment.
whether the ast node starts a block.
checks whether the previous statement of a comment is a method call chain or string concatenation statement distributed over two ore more lines.
checks if current comment block is trailing comment, e.g.:  double d = 3.14; some comment / some comment / double d = 18.5; 
checks whether the previous statement of a comment is a distributed throw statement.
get the token to start counting the number of lines to add to the distance aim from.
returns the next statement of a comment.
checks whether comment is a 'fall through' comment. for example:  ... case option_one: int somevariable = 1; fall through case option_two: int a = 5; break; ... 
count the number of empty lines between statements.
checks whether the previous statement of a comment is distributed over two or more lines.
gets comment's previous statement from switch block.
whether the ast is a comment.
get a message key depending on a comment type.
checks whether case block is empty.
finds a previous statement of the comment. uses root token of the line while searching.
gets previous statement for comment which is placed immediately under case.
checks whether the checked statement is on the previous line ignoring empty lines and lines which contain only comments. ignoring empty lines and lines which contain only comments.
handles a comment which is placed at the end of non empty code block. note, if single line comment is placed at the end of non empty block the comment should have the same indentation level as the previous statement. for example:  if (a == true) int b = 1; comment 
check the indentation of the parameters of the 'for' loop.
creates a handler name for this class according to ast type.
gets indentation level expected for children.
check the indentation level of a child that is not a list of statements.
checks indentation of resources parameters in try resources.
method to check the indentation of left paren or right paren. this method itself checks whether either of these are on start of line. this method takes care of line wrapping strict condition as well.
method to check indentation of try resources children. it takes into account forcestrictcondition value when logging errors. example of usage would include checking for try parenthesis and try resources.
get the first ast of the specified method call. the method call
returns method or constructor name. for foo(arg) it is `foo`, for
if this is the first chained method call which was moved to the next line.
gets the start line of the method, excluding any annotations. this is required because the current tokentypes#method_def may not always be the start as seen in https:github.comcheckstylecheckstyleissues3145. the method definition ast.
creates a handler name for this class according to ast type.
checks if slist node is placed at the same line as case_group node.
check indentation of expression we synchronized on.
returns column number of first non-blank char after specified column on specified line or -1 if such char doesn't exist. specified column on specified line or -1 if such char doesn't exist.
check the indentation of the conditional expression.
. @noinspection methodwithmultiplereturnpoints
log an error message.
find the set of lines for a given subtree.
check the indentation for a set of lines.
get the first line for a given expression.
searches in given sub-tree (including given node) for the token which represents first symbol for this sub-tree in file. @noinspection weakeraccess
log child indentation error.
check the indentation level for an expression subtree.
check the indentation for a single line.
get the column number for the start of a given expression, expanding tabs out into spaces in the process.
log an indentation error.
check the indentation level of modifiers.
check the indent level of the children of the specified parent expression.
checks indentation on wrapped lines between and including
returns semicolon for variable definition statement. ast node of type tokentypes.variable_def
get the column number for the start of a given expression, expanding tabs out into spaces in the process.
returns next curnode node.
gets the next node line from the firstnodesonlines map unless there is no next line, in which case, it returns the last line.
checks line for end of scope. handles occurrences of close braces and close parenthesis on the same line. false otherwise
finds first nodes on line and puts them into map. nodes on lines as a values.
checks line wrapping into expressions and definitions.
logs warning message if indentation is incorrect. current node which probably invoked an error. correct indentation.
checks line wrapping into annotations. first nodes as values and line numbers as keys.
collects classes defined in the source file. required to avoid false alarms for local vs. java.lang classes.
perform processing for an import token.
checks illegal instantiations. or null if instantiation of classname is ok
perform processing for an package token.
check import statements.
processes one of the collected "new" tokens when walking tree has finished.
check that type is of the same package.
collects a "new" token.
is standard class.
set the list of illegal classes. array of illegal exception classes
sets regular expression pattern for ignored strings. regular expression pattern for ignored strings @noinspection weakeraccess
analyses the path from the ast root to a given ast for occurrences of the token types in #ignoreoccurrencecontext. token type in #ignoreoccurrencecontext.
adds a set of tokens the check is interested in.
finds all exception types in current catch. we need it till we can have few different exception types into one catch.
set the list of illegal classes. array of illegal exception classes
determines whether an ast is a method definition for this check, with 0 parameters.
determines whether a 'super' literal is a call to the super method for this check.
is same name of method.
determines whether a super call in overriding method.
checks if given node contains numeric constant for zero.
examine char literal for initializing to default value.
checks for cases that should be skipped: no assignment, local variable, final variables.
checks for explicit initializations made to 'false', '0' and '\0'.
returns if an ast is a return statement with a boolean literal. returns true iff ast represents   return truefalse; 
returns if an ast is a return statement with a boolean literal or a compound statement that contains only such a return statement. returns true iff ast represents   return truefalse;  or   return truefalse; 
checks whether the scope of a node is restricted to a specific code block.
check if both the variables are same.
determines whether an ast is a descendant of an abstract or native method.
check if both the variables are in the same loop.
find the class, constructor, enum, method, or field in which it is defined.
update current scope data uninitialized variable according to the specific scope data.
gets final variable candidate for ast.
returns the last child token that makes a specified type and contains containtype in its branch.
insert a parameter at the topmost scope stack.
insert a variable at the topmost scope stack.
removes the final variable candidate from the stack.
if token is case_group and there is another case following.
update assigned variables in a temporary stack.
checks whether a variable which is declared outside loop is used inside loop. for example:  int x; for (int i = 0, j = 0; i  j; i++) x = 5; 
whether the final variable candidate should be removed from the list of final local variable candidates.
searches for final local variable candidate for ast in the scope.
store un-initialized variables in a temporary stack for future use.
update current scope data uninitialized variable according to the whole scope data. variables @noinspection methodparameternamingconvention
checks is modifiers contain verifiable type. parent node for all modifiers
checks if current method's return type or variable's type is verifiable according to membermodifiers option.
checks the extends or implements statement.
returns true if method has to be checked or false.
returns true if given class name is one of illegal classes or else false. or if it matches to abstract class names pattern.
set the list of member modifiers (of methods and fields) which should be checked.
checks the type parameters of the node.
checks if current import is star import. e.g.:  import java.util.; 
gets imported type's  href="https:docs.oracle.comjavasespecsjlsse8htmljls-6.html#jls-6.7"> canonical name.
checks the super type and implemented interfaces of a given type.
extends illegal class names set via imported short type name.  href="https:docs.oracle.comjavasespecsjlsse8htmljls-6.html#jls-6.7"> canonical name of imported type.
gets the next node of a syntactical tree (child of a current node or sibling of a current node, or sibling of a parent of a current node). method returns null
checks the upper and lower bounds for the given type.
checks type of parameters.
checks type and type argumentsparameters of given method, parameter, variable or method callreference.
checks the type arguments of the node.
returns the directory name this file is in.
tests if the given detailast is surrounded by parentheses. in short, does ast have a previous sibling whose type is tokentypes.rparen. parentheses. parentheses.
returns the specified string chopped to max_quoted_length plus an ellipsis (...) if the length of the string exceeds max_quoted_length.
tests if the given lambda node has a single parameter, no defined type, and is surrounded by parentheses. surrounded by parentheses.
find all child of given ast of type tokentype.expr
get all variables initialized in init part of for loop.
determines which variable are specific to for loop and should not be change by inner loop body.
get all variables which for loop iterating part change in every loop.
pops the variables from the stack.
check if ident is parameter.
return token type only if passed tokentype in argument is found or returns -1.
determines if an ast is a valid equals method implementation.
determines if an ast is a formal param of type object.
determines if an ast is a valid hashcode method implementation.
traverse the tree of the field frames to check all equals method calls.
process class_def, method_def, literal_if, literal_for, literal_while, literal_do, literal_catch, literal_try, ctor_def, enum_def, enum_constant_def.
whether the field or the variable from the specified class is of string type.
check whether the field is declared before the method call in case of methods and initialization blocks.
get the nearest parent frame which is class_def, enum_def or enum_const_def.
add the method call to the current frame if it should be processed.
determine, whether equals method is called on a field of string type.
looks for all "safe" token combinations in the argument expression branch.
determine whether literal_new is an anonymous class definition and leave the frame it is in.
determine whether literal_new is an anonymous class definition and add it as a frame in this case.
determine whether slist begins a block, determined by braces.
determine whether slist begins a block, determined by braces, and add it as a frame in this case.
check whether the method call should be violated.
add field to this fieldframe.
get field type.
whether the field or the variable from this instance is of string type.
whether the field or the variable is of string type.
skips over an inner assign portion of an argument expression.
tests whether a method's first parameter is an object. precondition: ast is a tokentypes.method_def node.
converts given ast node to string representation.
check if ident is parameter.
creates new parameter set for given method.
creates new set of parameters and store old one in stack.
process if given modifiers are appropriate in given state ( state_static_variable_def, state_instance_variable_def, ( state_ctor_def, state_method_def), if it is it updates states where appropriate or logs violation.
checks whether an identifier references a field which has been already defined in class.
processes constructor.
collects all tokens of specific type starting with the current ast node.
processes modifiers.
gets first ast node inside if block if variable usage is met only inside the block (not in its declaration!). ast node represents if block. variable which is checked for content in block. (not in its declaration!) than return the first ast node of this block, otherwise - null.
gets first ast node inside for, while or do-while blocks if variable usage is met only inside the block (not in its declaration!). ast node represents for, while or do-while block. variable which is checked for content in block. (not in its declaration!) than return the first ast node of this block, otherwise - null.
checks if variable is in operator declaration. for instance:  boolean b = true; if (b) ...  variable 'b' is in declaration of operator if. ast node which represents operator. variable which is checked for content in operator. - false.
returns the distance to variable usage for in the child node.
calculates distance between declaration of variable and its first usage in single scope. regular node of ast which is checked for content of checking variable. variable which distance is calculated for.
processes statements until usage of variable to detect sequence of initialization methods. detailast of expression that uses variable named variablename. name of considered variable. initialization methods.
checks if ast node contains given element. node of ast. ast element which is checked for content in ast node.
calculates distance between declaration of variable and its first usage in multiple scopes. regular node of ast which is checked for content of checking variable. variable which distance is calculated for.
gets first ast node inside switch block if variable usage is met only inside the block (not in its declaration!). ast node represents switch block. variable which is checked for content in block. (not in its declaration!) than return the first ast node of this block, otherwise - null.
get name of instance whose method is called. detailast of method_call.
gets first ast node inside try-catch-finally blocks if variable usage is met only inside the block (not in its declaration!). ast node represents try-catch-finally block. variable which is checked for content in block. (not in its declaration!) than return the first ast node of this block, otherwise - null.
searches variable usages starting from specified statement. and distance from specified statement to first found expression.
finds sub-node for given node maximum (line, column) pair.
checks if the case group or its sibling contain the 'default' switch.
collects variable declarations.
returns code block definition token for current identifier. definition was not found.
whether the ast is a definition of an anonymous class.
ends parsing of the ast for declarations.
checks whether given instance member has final modifier.
collects all tokens of specific type starting with the current ast node.
checks if a given ident is method call or field name which requires explicit this qualifier.
gets the name of the nearest parent classframe.
constructor -- invocable only via super() from subclasses.
checks whether a field usage frame is inside constructor frame.
collects all tokens which are equal to current token starting with the current ast node and which line number is lower or equal to the end line number. and which line number is lower or equal to the end line number.
checks whether user arranges 'this' for variable in method, constructor, or block on his own. or block on his own.
checks whether an overlapping by method or constructor argument takes place.
whether the declaration is located before the checked ast.
whether the method definition has the same name and number of parameters. as the method call.
returns the frame where the field is declared, if the given field is used without 'this', and null otherwise. 'this' and null otherwise.
whether the definition is correspondent to the ident.
returns the token which ends the code block.
find the class frame containing declaration.
checks whether the current variable is returned from the method.
creates new instance of classframe.
checks whether a field can be referenced from a static context.
checks if the token is a lambda parameter.
collects all tokens of specific type starting with the current ast node and which line number is lower or equal to the end line number. line number is lower or equal to the end line number.
check whether the frame contains a given name.
checks whether an overlapping by local variable takes place.
helper method to log a localizedmessage.
tests whether the provided ast is in one of the given contexts.
determines if ast is in the body of a flow control statement without braces. an example of such a statement would be   if (y  0) x = y;    this leads to the following ast structure:    literal_if lparen expr test rparen expr body semi    we need to ensure that ast is in the body and not in the test. 
creates new method context and places old one on the stack.
examines the return statement and tells context about it.
checks that if overload methods are grouped together they should not be separated from each other. is a class, interface or enum object block.
determines whether or not the given ast is field declaration.
determines whether or not the given ast is in a valid hash code method. a valid hash code method is considered to be a method of the signature method definition
decides whether the number of an ast is in the ignore list of this check.
reports aast as a magic number, includes unary operators as needed.
is magic number some where at ast tree.
sets the numbers to ignore in the check. beanutils converts numeric token list to double array automatically.
determines if the given ast node has a parent node with given token type code.
sets the tokens which are allowed between magic number and defined object.
finds the constant definition that contains aast.
checks whether two statements are on the same line. statement ended. statement ended.
checks whether statement is multiline.
checks if given semicolon is in different line than previous.
checks if a given subtree terminated by return, throw or, if allowed break, continue.
checks if a given slist terminated by return, throw or, if allowed break, continue.
checks if a given if terminated by return, throw or, if allowed break, continue.
checks if a given switch terminated by return, throw or, if allowed break, continue.
does a regular expression match on the given line and checks that a possible match is within a comment.
checks if a given loop terminated by return, throw or, if allowed break, continue.
determines if the fall through case between currentcase and
checks if a given trycatchfinally block terminated by return, throw or, if allowed break, continue.
decides whether to ignore an ast node that is the parameter of an abstract method. ignoreabstractmethods is true and ast is a parameter of abstract methods.
process a lambda token. checks whether a lambda parameter shadows a field. note, that when parameter of lambda expression is untyped, antlr parses the parameter as an identifier.
determine if a specific method identified by methodast and a single variable name aname is a setter. this recognition partially depends on msettercanreturnitsclass property.
decides whether to ignore an ast node that is the parameter of a setter method, where the property setter method for field 'xyz' has name 'setxyz', one parameter named 'xyz', and return type void (default behavior) or return type is name of the class in which such method is declared (allowed only if value true). ignoresetter is true and ast is the parameter of a setter method.
capitalizes a given property name the way we expect to see it in a setter name.
process a variable token. check whether a local variable or parameter shadows a field. store a field for later comparison with local variables and parameters.
determines whether an ast node is in a static method or static initializer.
determines whether this fieldframe contains a static field.
called to process tokens other than tokentypes#variable_def and tokentypes#parameter_def.
decides whether to ignore an ast node that is the parameter of a constructor. ignoreconstructorparameter is true and ast is a constructor parameter.
determines whether this fieldframe contains an instance field.
checks whether a class has default or explicit non-private constructor.
checks whether a method can be overridden. method can be overridden if it is not private, abstract, final or static. note that the check has nothing to do for interfaces.
returns class_def or enum_def token which is the nearest to the given ast node. searches the tree towards the root until it finds a class_def or enum_def node.
checks whether a method has any of ignored annotations.
checks whether a method has only comments in the body (has an empty implementation). method is ok if its implementation is empty.
checks if the given class (given class_def node) can be subclassed.
gets the name of the annotation.
checks variable definition.
checks that if extended class name conforms to specified format.
checks if a type is public.
check if a method has annotation .
gets name of an annotation.
checks number of throws statements.
returns the set of modifier strings for a variable_def or class_def ast.
gets canonical type's name from given tokentypes#type type node.
checks if current variable has proper access modifier according to check's options.
checks whether the ast is annotated with an annotation containing the passed in regular expression and return the ast representing that annotation.  this method will not look for imports or package statements to detect the passed in annotation.   to check if an ast contains a passed in annotation taking into account fully-qualified names (ex: java.lang.override, override) this method will need to be called twice. once for each name given.  no such annotation was found
returns generic type arguments token.
gets the next node of a syntactical tree (child of a current node or sibling of a current node, or sibling of a parent of a current node). method returns null
gets the list with short names classes. these names are taken from array of classes canonical names.
checks access modifier of given variable. if it is not proper according to check - puts violation on it.
gets the name of type from given ast tokentypes#type type node. if type is specified via its canonical name - canonical name will be returned, else - short type's name.
checks if current import is star import. e.g.:  import java.util.; 
returns the visibility scope for the variable.
checks whether immutable field is defined in final class.
checks whether variable has static final modifiers.
checks if current field is immutable: has final modifier and either a primitive type or instance of class known to be immutable (such as string, immutablecollection from guava and etc). classes known to be immutable are listed in
checks imported type. if type's canonical name was not specified in immutableclasscanonicalnames, but it's short name collides with one from immutableclassshortnames - removes it from the last one.
returns a list of type parameters class names.
checks whether all of generic type arguments are immutable. if at least one argument is mutable, we assume that the whole list of type arguments is mutable.
get qualified class name from given class ast.
calculate qualified class name(package + class name) laying inside given outer class. null if doesn't exist
register to outer super classes of given classast that given classast is extending them. informed about nesting subclass
get super class name of given class.
checks if given super class name in extend clause match super class qualified name. false otherwise
main method to gather statistics.
set the lines numbers to repeat in the header check.
returns the line from the header. where the line is blank return the regexp pattern for a blank line.
validates the header by compiling it with
set the lines numbers to ignore in the header check.
load header to check against from a reader into readerlines.
load the header from a file.
set the header file to check against.
set the charset to use for loading the header from a file.
called before initializing the header.
set the header to check against. individual lines in the header must be separated by '\n' characters.
pushes the current range value on the range value stack. pushes this token expression value on the expression value stack.
visits ternary operator (?:) and return tokens. they differ from those processed by visitconditional method in that their expression isn't bracketed.
finds a leaf, which is the most distant from the root.
checks if saved coordinates located after given token.
leaves while, do, for, if, ternary (?::), return or switch.
calculates number of conditional operators, including inline ternary operator, for a token. java language specification, §15.23 java language specification, §15.24 java language specification, §15.25
leaves ternary operator (?:) and return tokens.
leaves else, default or case group tokens.
visits if, while, do-while, for and switch tokens - all of them have expression in parentheses which is used for calculation.
counts number of case tokens subject to a case group token.
process the end of a method definition.
sets end coordinates from given token.
checks if we violates maximum allowed complexity.
creates new context for a given method.
sets user-excluded regular expression of classes to ignore.
visits throws clause and collects all exceptions we throw.
registers given import. this allows us to track imported classes.
checks if given class shouldn't be ignored and not from java.lang.
adds new referenced class.
checks if given class should be ignored as it belongs to excluded package.
checks if coupling less than allowed or not.
checks if given class should be ignored as it belongs to excluded class regexp.
sets user-excluded packages to ignore. all excluded packages should end with a period, so it also appends a dot to a package name.
visit annotation literal and get its type to referenced classes of context.
process the end of a method definition.
hook called when visiting a token. will not be called the method definition tokens.
checks if a variable definition is countable.
checks if an expression is countable for the ncss metric.
checks if a token is countable for the ncss metric. the ast
checks if given class ast has protected modifier.
checks if current ast node is member of interface or annotation, not of their subnodes.
process validation of methods.
checks if given ast has a redundant modifier.
check if enum constructor has proper modifiers.
retrieves the first modifier that is not an annotation.
gets the list of annotations on method definition.
checks if given class is accessible from "public" scope.
process validation of parameters for methods with no definition.
do validation of interface of annotation.
checks if interface has proper modifiers.
check if class constructor has proper modifiers.
checks whether annotation on type takes place.
checks if the modifiers were added in the order suggested in the java language specification. modifier ast.
skip all annotations in modifier block.
check field in interface.
check method in interface.
check nested types in interface.
checks if current default statement is single-line statement, e.g.:  default: dosomestuff(); 
checks if current case statement is single-line statement, e.g.:  case 1: dosomestuff(); break; case 2: dosomestuff(); break; case 3: ; 
checks if current do-while statement is single-line statement, e.g.:  do this.notify(); while (o != null); 
checks if current statement is single-line statement, e.g.:  if (obj.isvalid()) return true;   while (obj.isvalid()) return true; 
checks if ast is in an annotation field.
checks if current for statement is single-line statement, e.g.:  for (int i = 0; ; ) this.notify(); 
checks if current if statement is single-line statement, e.g.:  if (obj.isvalid()) return true; 
checks if current while statement is single-line statement, e.g.:  while (obj.isvalid()) return true; 
checks if current loop statement does not have body, e.g.:  while (value.incrementvalue()  5); ... for(int i = 0; i  10; value.incrementvalue()); 
collects validation details.
collects validation details for literal_if and literal_else.
finds next token after the given one.
this method determines if the double brace initialization should be skipped over by the check. double brace initializations are treated differently. the corresponding inner rcurly is treated as if it was alone on line even when it may be followed by another rcurly and a semi, raising no violations. please do note though that the line should not contain anything other than the following right curly and the semi following it or else violations will be raised. only the kind of double brace initializations shown in the following example code will be skipped over:  put("alpha", "man"); ; no violation 
checks if definition body is empty.
checks whether block has a single-line format.
collects validation details for class_def, method def, ctor_def, static_init, and instance_init.
checks if right curly has line break before.
collects validation details for literal_try, literal_catch, and literal_finally.
collects validation details for loops' tokens.
checks whether right curly is alone on a line.
gets a slist if it is the first child of the ast.
checks if left curly has line break after. left curly token. true, left curly has line break after.
find the last token of type tokentypes.annotation under the given set of modifiers.
validate token on new line position.
skip all tokentypes.annotations to the first non-annotation.
verifies that a specified left curly brace is placed correctly according to policy.
checks if slist token contains any text.
calculates the left curly corresponding to the block to be checked.
checks if catch block is empty or contains only comments.
checks if current empty catch block is verifiable according to check's options (exception's variable name and comment format are both in consideration).
gets the first line of comment in catch block. if comment is single-line - returns it fully, else if comment is multi-line - returns the first line.
gets variable's name associated with exception.
returns whether a package or class is allowed to be imported. the algorithm checks with the current node for a result, and if none is found then calls its parent looking for a match. this will recurse looking for match. if there is no clear result then
checks whether any of the rules for this node control access to a specified package or file.
parses ordering rule and adds it to the list with rules. string with rule.
tries to find better matching regular expression: longer matching substring wins; in case of the same length, lower position of matching substring wins. full import identifier import group we are trying to assign the import regular expression for import group object with currently best match
extracts defined amount of domains from the left side of packageimport identifier. number of first package domains. full identifier containing path to package or imported object. (if full identifier had less domain then specified)
log wrong import group order. line number of current import current import. import group. current group number we are checking. full import name.
checks compare two import paths. current import. previous import. specified string is greater than, equal to, or less than this string, ignoring case considerations.
examine the order of all the imports and log any violations.
checks if current group contains any import. current group. true, if current group contains at least one import.
get import valid group. is static import. full import path.
setter to specify list of order declaration customizing by user. user value.
get next import group. current group number. next import group.
verifies whether a class name is used.
set the list of illegal packages. @noinspection weakeraccess
set the list of illegal classes.
checks if an import is from a package or class name that must not be used.
checks if an import matches one of the regular expressions for illegal packages or illegal class names. for illegal packages or illegal class names
process a javadoc textblock and return the set of classes referenced within.
collects references made in javadoc comments.
collects the details of static imports.
returns a list of references found in a javadoc javadoctag.
extracts a list of texts matching a pattern from a
checks whether an import is unused.
if the given type string contains "." (e.g. "map.entry"), returns the top level type (e.g. "map"), as that is what must be imported for the type to resolve. otherwise, returns the type as-is.
collects the details of imports.
collects references made by ident.
matches other package name exactly or partially at front.
non-regex case. ensure a trailing dot for subpackages, i.e. "com.puppy" will match "com.puppy.crawl" but not "com.puppycrawl.tools".
loads the import control file from a inputsource.
utility to safely get an attribute. if it does not exist an exception is thrown.
loads the import control file from a file.
utility to get a strategyonmismatch property for "subpackage" tag.
constructs an instance of an import rule based on the given name and
utility to get a strategyonmismatch property for "import-control" tag.
returns true if classorstaticmember is a starred name of package, not just member name.
checks if a class or static member is exempt from known excludes. the class or static member
set the name for the file containing the import control configuration. it can also be a url or resource in the classpath. it will cause the file to be loaded.
returns import text.
compares two strings. the first string. the second string. whether the comparison is case sensitive. less than 0 if string1 is lexicographically less than the string2; and a value greater than 0 if string1 is lexicographically greater than string2.
shares processing... previous static but current is non-static (under).
compiles the list of package groups and the order they should occur in the file.
finds out what group the specified import belongs to.
compares two import strings. we first compare the container of the static import, container being the type enclosing the static element being imported. when this returns 0, we compare the qualified import name. for e.g. this is what is considered to be container names:  import static httpconstants.colon => httpconstants import static httpheaders.addheader => httpheaders import static httpheaders.setheader => httpheaders import static httpheaders.names.date => httpheaders.names   according to this logic, httpheaders.names would come after httpheaders. for more details, see  href="https:bugs.eclipse.orgbugsshow_bug.cgi?id=473629#c3"> static imports comparison method in eclipse.  sensitive. less than 0 if str is less than the str2 (container order or lexicographical); and a value greater than 0 if str1 is greater than str2 (container order or lexicographically).
verifies whether a package name is used.
determines if an import statement is for types from a specified package.
sets the list of packages or classes to be exempt from the check. the excludes can contain a . or not. where star imports are ok.
gets the full import identifier. if the import is a starred import and it's not excluded then a violation is logged.
checks if declared class is abstract or not.
checks class definition.
should we check member with given modifiers. modifiers of member to check.
check that variable definition in interface or @interface definition. or @interface definition.
gets the abbreviation, where beginindex and endindex are inclusive indexes of a sequence of consecutive upper-case characters.  the character at endindex is only included in the abbreviation if it is the last character in the string; otherwise it is usually the first capital in the next word.   for example, getabbreviation("getxmlparser", 3, 6) returns "xml" (not "xmlp"), and so does getabbreviation("parsexml", 5, 7). 
get abbreviation if it is illegal, where beginindex and endindex are inclusive indexes of a sequence of consecutive upper-case characters. ignore list, otherwise null
gets the disallowed abbreviation contained in given string. the given string. separate string.
checks if it is an ignore situation. node. @noinspection simplifiableifstatement
checks that the method has "" annotation. a detailast nod is related to the given method modifiers (modifiers type).
gets all the children which are one level below on the current detailast parent node. current parent node.
checks if a variable is the loop's one.
checks whether a method is annotated with override annotation.
returns the access modifier of the methodconstructor at the specified ast. if the method is in an interface or annotation block, the access modifier is assumed to be public.
checks to see if the text block contains a inheritdoc tag.
recursively walks a conditional expression checking the left and right sides, checking for matches and logging violations.
find the parent (holder) of the of the warnings (expr).
this method looks for a warning that matches a configured expression. if found it logs a violation at the given ast.
logs a trailing array comma violation if one exists.
checks to see if the trailing comma is present if required or prohibited.
retrieves an enum enum type from a string string.
checks for expanded style type violations.
checks for compact no array style type violations.
checks for compact style type violations.
checks to see if the closing parenthesis are present if required or prohibited.
look for the rest of the comment if all we saw was the tag and the name. stop when we see '' (end of javadoc), '@literal @' (start of next tag), or anything that's not whitespace or '' characters.
checks to see if the text block contains a deprecated tag.
returns the name of the given annotation.
finds next node of ast tree.
checks whether an annotation node has any node before on the same line.
checks annotations positions in code: 1) checks whether the annotations locations are correct. 2) checks whether the annotations have the valid indentation level.
checks whether an annotation node has any node after on the same line.
returns the name of the given annotation.
checks whether the scope of a node is restricted to a specific code block.
verifies that a type definition has a required tag.
tests if first sentence contains forbidden summary fragment.
checks if the node starts with an .
finds and returns first sentence.
concatenates string within text of html tags.
checks if period is at the end of sentence.
decides whether the variable name of an ast is in the ignore list.
whether we should check this node.
gets all standalone tags from a given javadoc.
verifies that a type definition has the specified param tag for the specified type parameter name.
verifies that a type definition has a required tag.
checks for unused param tags for type parameters.
extracts type parameter name from tag.
whether we should check this node.
validates that check's required javadoc tokens are subset of default javadoc tokens.
the configurable javadoc token set. used to protect checks against malicious users who specify an unacceptable javadoc token set in the configuration file. the default implementation returns the check's default javadoc tokens.
processes a node calling check at interested nodes. the root of tree for process
adds a set of tokens the check is interested in.
whether we should check this node.
determines if the given token is an extra html tag. this indicates that a close tag was found that does not have a corresponding open tag. for the token.
finds the index of the first non-whitespace character ignoring the javadoc comment start and end strings  and  as well as any leading asterisk. or -1 if not found.
returns the comment text from the javadoc.
checks that the first sentence ends with proper punctuation. this method uses a regular expression that checks for the presence of a period, question mark, or exclamation mark followed either by whitespace, an html element, or the end of string. this method ignores _at_inheritdoc comments for tokentypes that are valid for _at_inheritdoc.
checks that the javadoc is not empty.
determines if the htmltag is one which does not require a close tag.
trims any trailing whitespace or the end of javadoc comment string.
checks to see if there are any unclosed tags on the stack. the token represents a html tag that has been closed and has a corresponding open tag on the stack. any tags, except single tags, that were opened (pushed on the stack) after the token are missing a close.
creates an instance.
checks if the given position is start one for html tag.
returns position of next comment character, skips whitespaces and asterisks.
finds next occurrence of given character.
parses the text line for any html tags and adds them to the internal list of tags.
parses the tag and return position after it.
parse tag id.
tries to resolve a class for fully-specified name.
see if inner class of this class.
try star imports.
try to find class by search in package.
creates a new classresolver instance.
try to find class by matching explicit import.
setter to specify the order by tags.
setter to specify the list of targets to check at-clauses.
returns type of parent node.
checks order of atclauses in tag section node.
creates class info for given name.
converts fullident to token.
process type params (if any) for given class, enum or method.
processes class definition.
returns the current tree's classresolver.
looking if a given name is alias. @noinspection weakeraccess
common implementation for logloaderror() method.
creates new instance of class information object.
finds and collects all newline nodes inside description node.
checks, if description node is a description of in-line tag.
returns a javadoctag from the tag name. can be checked using javadoctaginfo#isvalidname(string)
returns a javadoctag from the tag text.
validates whether the javadoc has a short circuit tag. currently this is the inherittag. any errors are logged.
returns true if required type found in type parameters. list of type parameters name of required type
verifies that documented exception is in throws.
computes the parameter nodes for a method.
checks a set of tags for matching parameters. expected tag
calculates column number using javadoc tag matcher.
checks a set of tags for matching throws. expected tag
checks the javadoc for a method.
computes the exception nodes for a method.
whether we should check this node.
returns the scope for the methodconstructor at the specified ast. if the method is in an interface or annotation block, the scope is assumed to be public.
gets multiline javadoc tags with no arguments.
checks for only one return tag. all return tags will be removed from the supplied list. expected tag
some javadoc.
returns the tags in a javadoc comment. only finds throws, exception, param, return and see tags.
checks if the javadoc can be missing if the method or constructor is below the minimum line count or has a special annotation.
checks if the given method name matches the regex. in that case we skip enforcement of javadoc for this method
remove parameter from params collection by name.
gets multiline javadoc tags with arguments.
determines whether or not the line with paragraph tag has previous empty line.
determines whether or not the line is empty line.
determines whether or not the next line after empty line has paragraph tag in the beginning.
returns nearest node.
tests whether the paragraph tag is immediately followed by the text.
finds and returns nearest empty line in javadoc.
determines whether or not the line with paragraph tag is first line in javadoc.
returns the comment line of text where this tag appears.
extract the block tags from a javadoc comment.
get linecolumn from string till index.
extract inline javadoc tags from the given comment.
convert array of string to single string.
processes a set of lines looking for matches.
check a line for matches.
perform processing at the end of a set of lines.
recursive method that finds the matches.
detect ignore situation.
displays the right message.
perform processing at the end of a set of lines.
method that finds the matches.
processes an entire text file looking for matches.
retrieves the file name from the given file.
retrieves the folder path from the given file. path of the file.
retrieves the string form of the pattern or defaultstring if null.
checks if the given folderpath matches the specified
