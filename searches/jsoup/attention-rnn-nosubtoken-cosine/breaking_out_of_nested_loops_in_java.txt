public void head ( Node node , int depth ) { if ( node instanceof TextNode ) { TextNode textNode = ( TextNode ) node ; accum . append ( textNode . getWholeText ( ) ) ; } }
--------------------------------------------------
void outerHtmlHead ( Appendable accum , int depth , Document . OutputSettings out ) throws IOException { accum . append ( "<" ) . append ( isProcessingInstruction ? "!" : "?" ) . append ( coreValue ( ) ) ; getWholeDeclaration ( accum , out ) ; accum . append ( isProcessingInstruction ? "!" : "?" ) . append ( ">" ) ; }
--------------------------------------------------
public void tail ( Node node , int depth ) { if ( node instanceof Element ) { Element element = ( Element ) node ; if ( element . isBlock ( ) && ( node . nextSibling ( ) instanceof TextNode ) && ! TextNode . lastCharIsWhitespace ( accum ) ) accum . append ( ' ' ) ; } }
--------------------------------------------------
public static Elements collect ( Evaluator eval , Element root ) { Elements elements = new Elements ( ) ; NodeTraversor . traverse ( new Accumulator ( root , elements , eval ) , root ) ; return elements ; }
--------------------------------------------------
private void ownText ( StringBuilder accum ) { for ( Node child : childNodes ) { if ( child instanceof TextNode ) { TextNode textNode = ( TextNode ) child ; appendNormalisedText ( accum , textNode ) ; } else if ( child instanceof Element ) { appendWhitespaceIfBr ( ( Element ) child , accum ) ; } } }
--------------------------------------------------
public static Element findFirst ( Evaluator eval , Element root ) { FirstFinder finder = new FirstFinder ( root , eval ) ; NodeTraversor . filter ( finder , root ) ; return finder . match ; }
--------------------------------------------------
private static void appendNormalisedText ( StringBuilder accum , TextNode textNode ) { String text = textNode . getWholeText ( ) ; if ( preserveWhitespace ( textNode . parentNode ) || textNode instanceof CDataNode ) accum . append ( text ) ; else StringUtil . appendNormalisedWhitespace ( accum , text , TextNode . lastCharIsWhitespace ( accum ) ) ; }
--------------------------------------------------
public String text ( ) { return getWholeText ( ) ; }
--------------------------------------------------
public String data ( ) { StringBuilder sb = StringUtil . borrowBuilder ( ) ; for ( Node childNode : childNodes ) { if ( childNode instanceof DataNode ) { DataNode data = ( DataNode ) childNode ; sb . append ( data . getWholeData ( ) ) ; } else if ( childNode instanceof Comment ) { Comment comment = ( Comment ) childNode ; sb . append ( comment . getData ( ) ) ; } else if ( childNode instanceof Element ) { Element element = ( Element ) childNode ; String elementData = element . data ( ) ; sb . append ( elementData ) ; } else if ( childNode instanceof CDataNode ) { CDataNode cDataNode = ( CDataNode ) childNode ; sb . append ( cDataNode . getWholeText ( ) ) ; } } return StringUtil . releaseBuilder ( sb ) ; }
--------------------------------------------------
@ Override void outerHtmlHead ( Appendable accum , int depth , Document . OutputSettings out ) throws IOException { accum . append ( "<![cdata[" ) . append ( getWholeText ( ) ) ; }
--------------------------------------------------
