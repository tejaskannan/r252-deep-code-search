public static Elements collect ( Evaluator eval , Element root ) { Elements elements = new Elements ( ) ; NodeTraversor . traverse ( new Accumulator ( root , elements , eval ) , root ) ; return elements ; }
--------------------------------------------------
protected void runParser ( ) { while ( true ) { Token token = tokeniser . read ( ) ; process ( token ) ; token . reset ( ) ; if ( token . type == Token . TokenType . EOF ) break ; } }
--------------------------------------------------
public void head ( Node node , int depth ) { try { node . outerHtmlHead ( accum , depth , out ) ; } catch ( IOException exception ) { throw new SerializationException ( exception ) ; } }
--------------------------------------------------
public boolean hasAttr ( String key ) { ensureAttributes ( ) ; return super . hasAttr ( key ) ; }
--------------------------------------------------
public void title ( String title ) { Validate . notNull ( title ) ; Element titleEl = getElementsByTag ( "title" ) . first ( ) ; if ( titleEl == null ) { head ( ) . appendElement ( "title" ) . text ( title ) ; } else { titleEl . text ( title ) ; } }
--------------------------------------------------
public String title ( ) { Element titleEl = getElementsByTag ( "title" ) . first ( ) ; return titleEl != null ? StringUtil . normaliseWhitespace ( titleEl . text ( ) ) . trim ( ) : "" ; }
--------------------------------------------------
private Elements nextElementSiblings ( boolean next ) { Elements els = new Elements ( ) ; if ( parentNode == null ) return els ; els . add ( this ) ; return next ? els . nextAll ( ) : els . prevAll ( ) ; }
--------------------------------------------------
public Elements clone ( ) { Elements clone = new Elements ( size ( ) ) ; for ( Element e : this ) clone . add ( e . clone ( ) ) ; return clone ; }
--------------------------------------------------
public Elements parents ( ) { Elements parents = new Elements ( ) ; accumulateParents ( this , parents ) ; return parents ; }
--------------------------------------------------
public void tail ( Node node , int depth ) { if ( node instanceof Element ) { Element element = ( Element ) node ; if ( element . isBlock ( ) && ( node . nextSibling ( ) instanceof TextNode ) && ! TextNode . lastCharIsWhitespace ( accum ) ) accum . append ( ' ' ) ; } }
--------------------------------------------------
