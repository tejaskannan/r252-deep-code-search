public String toString ( ) { return String . format ( "[^%s]" , keyPrefix ) ; }
--------------------------------------------------
private void popStackToClose ( Token . EndTag endTag ) { String elName = settings . normalizeTag ( endTag . tagName ) ; Element firstFound = null ; for ( int pos = stack . size ( ) - 1 ; pos >= 0 ; pos -- ) { Element next = stack . get ( pos ) ; if ( next . nodeName ( ) . equals ( elName ) ) { firstFound = next ; break ; } } if ( firstFound == null ) return ; for ( int pos = stack . size ( ) - 1 ; pos >= 0 ; pos -- ) { Element next = stack . get ( pos ) ; stack . remove ( pos ) ; if ( next == firstFound ) break ; } }
--------------------------------------------------
public boolean hasCookie ( String name ) { Validate . notEmpty ( name , "cookie name must not be empty" ) ; return cookies . containsKey ( name ) ; }
--------------------------------------------------
public String toString ( ) { return key + "=" + value ; }
--------------------------------------------------
public void tail ( Node node , int depth ) { String name = node . nodeName ( ) ; if ( StringUtil . in ( name , "br" , "dd" , "dt" , "p" , "h1" , "h2" , "h3" , "h4" , "h5" ) ) append ( "\n" ) ; else if ( name . equals ( "a" ) ) append ( String . format ( " <%s>" , node . absUrl ( "href" ) ) ) ; }
--------------------------------------------------
public String toString ( ) { return String . format ( "[%s*=%s]" , key , value ) ; }
--------------------------------------------------
public String toString ( ) { return String . format ( "[%s^=%s]" , key , value ) ; }
--------------------------------------------------
public String toString ( ) { return String . format ( "[%s=%s]" , key , value ) ; }
--------------------------------------------------
public String toString ( ) { return String . format ( "[%s!=%s]" , key , value ) ; }
--------------------------------------------------
public String toString ( ) { return String . format ( "[%s$=%s]" , key , value ) ; }
--------------------------------------------------
