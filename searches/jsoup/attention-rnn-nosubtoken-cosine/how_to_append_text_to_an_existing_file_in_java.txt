public static URL resolve ( URL base , String relUrl ) throws MalformedURLException { if ( relUrl . startsWith ( "?" ) ) relUrl = base . getPath ( ) + relUrl ; if ( relUrl . indexOf ( '.' ) == 0 && base . getFile ( ) . indexOf ( '/' ) != 0 ) { base = new URL ( base . getProtocol ( ) , base . getHost ( ) , base . getPort ( ) , "/" + base . getFile ( ) ) ; } return new URL ( base , relUrl ) ; }
--------------------------------------------------
void rewindToMark ( ) { if ( bufMark == - 1 ) throw new UncheckedIOException ( new IOException ( "mark invalid" ) ) ; bufPos = bufMark ; }
--------------------------------------------------
private void clearStackToContext ( String ... nodeNames ) { for ( int pos = stack . size ( ) - 1 ; pos >= 0 ; pos -- ) { Element next = stack . get ( pos ) ; if ( StringUtil . in ( next . normalName ( ) , nodeNames ) || next . normalName ( ) . equals ( "html" ) ) break ; else stack . remove ( pos ) ; } }
--------------------------------------------------
private static void appendWhitespaceIfBr ( Element element , StringBuilder accum ) { if ( element . tag . getName ( ) . equals ( "br" ) && ! TextNode . lastCharIsWhitespace ( accum ) ) accum . append ( " " ) ; }
--------------------------------------------------
String consumeToEnd ( ) { bufferUp ( ) ; String data = cacheString ( charBuf , stringCache , bufPos , bufLength - bufPos ) ; bufPos = bufLength ; return data ; }
--------------------------------------------------
public Element appendElement ( String tagName ) { Element child = new Element ( Tag . valueOf ( tagName , NodeUtils . parser ( this ) . settings ( ) ) , baseUri ( ) ) ; appendChild ( child ) ; return child ; }
--------------------------------------------------
public OutputSettings clone ( ) { OutputSettings clone ; try { clone = ( OutputSettings ) super . clone ( ) ; } catch ( CloneNotSupportedException e ) { throw new RuntimeException ( e ) ; } clone . charset ( charset . name ( ) ) ; clone . escapeMode = Entities . EscapeMode . valueOf ( escapeMode . name ( ) ) ; return clone ; }
--------------------------------------------------
void mark ( ) { bufSplitPoint = 0 ; bufferUp ( ) ; bufMark = bufPos ; }
--------------------------------------------------
public String attr ( String key ) { Validate . notNull ( key ) ; if ( ! hasAttributes ( ) ) { return key . equals ( nodeName ( ) ) ? ( String ) value : EmptyString ; } return super . attr ( key ) ; }
--------------------------------------------------
public Elements removeAttr ( String attributeKey ) { for ( Element element : this ) { element . removeAttr ( attributeKey ) ; } return this ; }
--------------------------------------------------
