private List < String > getHeadersCaseInsensitive ( String name ) { Validate . notNull ( name ) ; for ( Map . Entry < String , List < String >> entry : headers . entrySet ( ) ) { if ( name . equalsIgnoreCase ( entry . getKey ( ) ) ) return entry . getValue ( ) ; } return Collections . emptyList ( ) ; }
--------------------------------------------------
private static String getRequestCookieString ( Connection . Request req ) { StringBuilder sb = StringUtil . borrowBuilder ( ) ; boolean first = true ; for ( Map . Entry < String , String > cookie : req . cookies ( ) . entrySet ( ) ) { if ( ! first ) sb . append ( "; " ) ; else first = false ; sb . append ( cookie . getKey ( ) ) . append ( '=' ) . append ( cookie . getValue ( ) ) ; } return StringUtil . releaseBuilder ( sb ) ; }
--------------------------------------------------
public String getWholeDeclaration ( ) { StringBuilder sb = StringUtil . borrowBuilder ( ) ; try { getWholeDeclaration ( sb , new Document . OutputSettings ( ) ) ; } catch ( IOException e ) { throw new SerializationException ( e ) ; } return StringUtil . releaseBuilder ( sb ) . trim ( ) ; }
--------------------------------------------------
final void appendAttributeValue ( char append ) { ensureAttributeValue ( ) ; pendingAttributeValue . append ( append ) ; }
--------------------------------------------------
final void appendAttributeValue ( char [ ] append ) { ensureAttributeValue ( ) ; pendingAttributeValue . append ( append ) ; }
--------------------------------------------------
public Elements getElementsByAttributeValueMatching ( String key , String regex ) { Pattern pattern ; try { pattern = Pattern . compile ( regex ) ; } catch ( PatternSyntaxException e ) { throw new IllegalArgumentException ( "pattern syntax error: " + regex , e ) ; } return getElementsByAttributeValueMatching ( key , pattern ) ; }
--------------------------------------------------
public int hashCode ( ) { int result = tagName . hashCode ( ) ; result = 31 * result + ( isBlock ? 1 : 0 ) ; result = 31 * result + ( formatAsBlock ? 1 : 0 ) ; result = 31 * result + ( canContainInline ? 1 : 0 ) ; result = 31 * result + ( empty ? 1 : 0 ) ; result = 31 * result + ( selfClosing ? 1 : 0 ) ; result = 31 * result + ( preserveWhitespace ? 1 : 0 ) ; result = 31 * result + ( formList ? 1 : 0 ) ; result = 31 * result + ( formSubmit ? 1 : 0 ) ; return result ; }
--------------------------------------------------
public Elements getElementsByAttribute ( String key ) { Validate . notEmpty ( key ) ; key = key . trim ( ) ; return Collector . collect ( new Evaluator . Attribute ( key ) , this ) ; }
--------------------------------------------------
public String getPlainText ( Element element ) { FormattingVisitor formatter = new FormattingVisitor ( ) ; NodeTraversor . traverse ( formatter , element ) ; return formatter . toString ( ) ; }
--------------------------------------------------
public Elements getElementsByAttributeValueMatching ( String key , Pattern pattern ) { return Collector . collect ( new Evaluator . AttributeWithValueMatching ( key , pattern ) , this ) ; }
--------------------------------------------------
