public Element lastElementSibling ( ) { List < Element > siblings = parent ( ) . childElementsList ( ) ; return siblings . size ( ) > 1 ? siblings . get ( siblings . size ( ) - 1 ) : null ; }
--------------------------------------------------
public Element firstElementSibling ( ) { List < Element > siblings = parent ( ) . childElementsList ( ) ; return siblings . size ( ) > 1 ? siblings . get ( 0 ) : null ; }
--------------------------------------------------
public Element nextElementSibling ( ) { if ( parentNode == null ) return null ; List < Element > siblings = parent ( ) . childElementsList ( ) ; Integer index = indexInList ( this , siblings ) ; Validate . notNull ( index ) ; if ( siblings . size ( ) > index + 1 ) return siblings . get ( index + 1 ) ; else return null ; }
--------------------------------------------------
public boolean isValid ( Document dirtyDocument ) { Validate . notNull ( dirtyDocument ) ; Document clean = Document . createShell ( dirtyDocument . baseUri ( ) ) ; int numDiscarded = copySafeNodes ( dirtyDocument . body ( ) , clean . body ( ) ) ; return numDiscarded == 0 && dirtyDocument . head ( ) . childNodes ( ) . size ( ) == 0 ; }
--------------------------------------------------
public Elements parents ( ) { Elements parents = new Elements ( ) ; accumulateParents ( this , parents ) ; return parents ; }
--------------------------------------------------
private void checkCapacity ( int minNewSize ) { Validate . isTrue ( minNewSize >= size ) ; int curSize = keys . length ; if ( curSize >= minNewSize ) return ; int newSize = curSize >= InitialCapacity ? size * GrowthFactor : InitialCapacity ; if ( minNewSize > newSize ) newSize = minNewSize ; keys = copyOf ( keys , newSize ) ; vals = copyOf ( vals , newSize ) ; }
--------------------------------------------------
public static void main ( String [ ] args ) throws IOException { Document doc = Jsoup . connect ( "http://en.wikipedia.org/" ) . get ( ) ; log ( doc . title ( ) ) ; Elements newsHeadlines = doc . select ( "#mp-itn b a" ) ; for ( Element headline : newsHeadlines ) { log ( "%s
	%s" , headline . attr ( "title" ) , headline . absUrl ( "href" ) ) ; } }
--------------------------------------------------
public Connection data ( String key , String value ) { req . data ( KeyVal . create ( key , value ) ) ; return this ; }
--------------------------------------------------
public boolean hasSameValue ( Object o ) { if ( this == o ) return true ; if ( o == null || getClass ( ) != o . getClass ( ) ) return false ; return this . outerHtml ( ) . equals ( ( ( Node ) o ) . outerHtml ( ) ) ; }
--------------------------------------------------
public boolean isValidBodyHtml ( String bodyHtml ) { Document clean = Document . createShell ( "" ) ; Document dirty = Document . createShell ( "" ) ; ParseErrorList errorList = ParseErrorList . tracking ( 1 ) ; List < Node > nodes = Parser . parseFragment ( bodyHtml , dirty . body ( ) , "" , errorList ) ; dirty . body ( ) . insertChildren ( 0 , nodes ) ; int numDiscarded = copySafeNodes ( dirty . body ( ) , clean . body ( ) ) ; return numDiscarded == 0 && errorList . size ( ) == 0 ; }
--------------------------------------------------
