public void tail ( Node node , int depth ) { String name = node . nodeName ( ) ; if ( StringUtil . in ( name , "br" , "dd" , "dt" , "p" , "h1" , "h2" , "h3" , "h4" , "h5" ) ) append ( "\n" ) ; else if ( name . equals ( "a" ) ) append ( String . format ( " <%s>" , node . absUrl ( "href" ) ) ) ; }
--------------------------------------------------
public String chompToIgnoreCase ( String seq ) { String data = consumeToIgnoreCase ( seq ) ; matchChomp ( seq ) ; return data ; }
--------------------------------------------------
void outerHtmlHead ( Appendable accum , int depth , Document . OutputSettings out ) throws IOException { accum . append ( "<" ) . append ( isProcessingInstruction ? "!" : "?" ) . append ( coreValue ( ) ) ; getWholeDeclaration ( accum , out ) ; accum . append ( isProcessingInstruction ? "!" : "?" ) . append ( ">" ) ; }
--------------------------------------------------
public String toString ( ) { return String . format ( "[%s~=%s]" , key , pattern . toString ( ) ) ; }
--------------------------------------------------
public String toString ( ) { return String . format ( "[%s*=%s]" , key , value ) ; }
--------------------------------------------------
public String toString ( ) { return String . format ( "[%s^=%s]" , key , value ) ; }
--------------------------------------------------
public String toString ( ) { return String . format ( "[%s=%s]" , key , value ) ; }
--------------------------------------------------
public String toString ( ) { return String . format ( "[%s!=%s]" , key , value ) ; }
--------------------------------------------------
public String toString ( ) { return String . format ( "[%s$=%s]" , key , value ) ; }
--------------------------------------------------
private void setupFromConnection ( HttpURLConnection conn , HttpConnection . Response previousResponse ) throws IOException { this . conn = conn ; method = Method . valueOf ( conn . getRequestMethod ( ) ) ; url = conn . getURL ( ) ; statusCode = conn . getResponseCode ( ) ; statusMessage = conn . getResponseMessage ( ) ; contentType = conn . getContentType ( ) ; Map < String , List < String >> resHeaders = createHeaderMap ( conn ) ; processResponseHeaders ( resHeaders ) ; if ( previousResponse != null ) { for ( Map . Entry < String , String > prevCookie : previousResponse . cookies ( ) . entrySet ( ) ) { if ( ! hasCookie ( prevCookie . getKey ( ) ) ) cookie ( prevCookie . getKey ( ) , prevCookie . getValue ( ) ) ; } previousResponse . safeClose ( ) ; } }
--------------------------------------------------
