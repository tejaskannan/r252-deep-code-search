public Node attr ( String attributeKey , String attributeValue ) { attributeKey = NodeUtils . parser ( this ) . settings ( ) . normalizeAttribute ( attributeKey ) ; attributes ( ) . putIgnoreCase ( attributeKey , attributeValue ) ; return this ; }
--------------------------------------------------
public static void traverse ( NodeVisitor visitor , Node root ) { Node node = root ; int depth = 0 ; while ( node != null ) { visitor . head ( node , depth ) ; if ( node . childNodeSize ( ) > 0 ) { node = node . childNode ( 0 ) ; depth ++ ; } else { while ( node . nextSibling ( ) == null && depth > 0 ) { visitor . tail ( node , depth ) ; node = node . parentNode ( ) ; depth -- ; } visitor . tail ( node , depth ) ; if ( node == root ) break ; node = node . nextSibling ( ) ; } } }
--------------------------------------------------
public Elements clone ( ) { Elements clone = new Elements ( size ( ) ) ; for ( Element e : this ) clone . add ( e . clone ( ) ) ; return clone ; }
--------------------------------------------------
protected int calculatePosition ( Element root , Element element ) { int pos = 0 ; Elements family = element . parent ( ) . children ( ) ; for ( int i = element . elementSiblingIndex ( ) ; i < family . size ( ) ; i ++ ) { if ( family . get ( i ) . tag ( ) . equals ( element . tag ( ) ) ) pos ++ ; } return pos ; }
--------------------------------------------------
public Document ( String baseUri ) { super ( Tag . valueOf ( "#root" , ParseSettings . htmlDefault ) , baseUri ) ; this . location = baseUri ; }
--------------------------------------------------
public Elements attr ( String attributeKey , String attributeValue ) { for ( Element element : this ) { element . attr ( attributeKey , attributeValue ) ; } return this ; }
--------------------------------------------------
public Element prependElement ( String tagName ) { Element child = new Element ( Tag . valueOf ( tagName , NodeUtils . parser ( this ) . settings ( ) ) , baseUri ( ) ) ; prependChild ( child ) ; return child ; }
--------------------------------------------------
protected void runParser ( ) { while ( true ) { Token token = tokeniser . read ( ) ; process ( token ) ; token . reset ( ) ; if ( token . type == Token . TokenType . EOF ) break ; } }
--------------------------------------------------
public Node traverse ( NodeVisitor nodeVisitor ) { Validate . notNull ( nodeVisitor ) ; NodeTraversor . traverse ( nodeVisitor , this ) ; return this ; }
--------------------------------------------------
public Element attr ( String attributeKey , boolean attributeValue ) { attributes ( ) . put ( attributeKey , attributeValue ) ; return this ; }
--------------------------------------------------
