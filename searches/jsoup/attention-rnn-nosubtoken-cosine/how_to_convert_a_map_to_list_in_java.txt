private static String [ ] copyOf ( String [ ] orig , int size ) { final String [ ] copy = new String [ size ] ; System . arraycopy ( orig , 0 , copy , 0 , Math . min ( orig . length , size ) ) ; return copy ; }
--------------------------------------------------
public Elements getElementsByAttributeValueMatching ( String key , String regex ) { Pattern pattern ; try { pattern = Pattern . compile ( regex ) ; } catch ( PatternSyntaxException e ) { throw new IllegalArgumentException ( "pattern syntax error: " + regex , e ) ; } return getElementsByAttributeValueMatching ( key , pattern ) ; }
--------------------------------------------------
public static String getByName ( String name ) { String val = multipoints . get ( name ) ; if ( val != null ) return val ; int codepoint = extended . codepointForName ( name ) ; if ( codepoint != empty ) return new String ( new int [ ] { codepoint } , 0 , 1 ) ; return emptyName ; }
--------------------------------------------------
public String attr ( String key ) { Validate . notNull ( key ) ; if ( ! hasAttributes ( ) ) { return key . equals ( nodeName ( ) ) ? ( String ) value : EmptyString ; } return super . attr ( key ) ; }
--------------------------------------------------
public Elements getElementsByAttributeValueMatching ( String key , Pattern pattern ) { return Collector . collect ( new Evaluator . AttributeWithValueMatching ( key , pattern ) , this ) ; }
--------------------------------------------------
private static void appendWhitespaceIfBr ( Element element , StringBuilder accum ) { if ( element . tag . getName ( ) . equals ( "br" ) && ! TextNode . lastCharIsWhitespace ( accum ) ) accum . append ( " " ) ; }
--------------------------------------------------
final void appendAttributeValue ( char append ) { ensureAttributeValue ( ) ; pendingAttributeValue . append ( append ) ; }
--------------------------------------------------
final void appendAttributeValue ( char [ ] append ) { ensureAttributeValue ( ) ; pendingAttributeValue . append ( append ) ; }
--------------------------------------------------
final void appendAttributeValue ( String append ) { ensureAttributeValue ( ) ; if ( pendingAttributeValue . length ( ) == 0 ) { pendingAttributeValueS = append ; } else { pendingAttributeValue . append ( append ) ; } }
--------------------------------------------------
public static String unescape ( String in ) { StringBuilder out = StringUtil . borrowBuilder ( ) ; char last = 0 ; for ( char c : in . toCharArray ( ) ) { if ( c == ESC ) { if ( last != 0 && last == ESC ) out . append ( c ) ; } else out . append ( c ) ; last = c ; } return StringUtil . releaseBuilder ( out ) ; }
--------------------------------------------------
