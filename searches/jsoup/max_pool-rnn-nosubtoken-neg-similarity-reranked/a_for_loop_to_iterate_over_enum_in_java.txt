public void consume ( String seq ) { if ( ! matches ( seq ) ) throw new IllegalStateException ( "queue did not match expected sequence" ) ; int len = seq . length ( ) ; if ( len > remainingLength ( ) ) throw new IllegalStateException ( "queue not long enough to consume sequence" ) ; pos += len ; }
--------------------------------------------------
public boolean retainAll ( Collection < ? > c ) { onContentsChanged ( ) ; return super . retainAll ( c ) ; }
--------------------------------------------------
public String outerHtml ( ) { return super . html ( ) ; }
--------------------------------------------------
private void ensureAttributeValue ( ) { hasPendingAttributeValue = true ; if ( pendingAttributeValueS != null ) { pendingAttributeValue . append ( pendingAttributeValueS ) ; pendingAttributeValueS = null ; } }
--------------------------------------------------
public List < String > headers ( String name ) { Validate . notEmpty ( name ) ; return getHeadersCaseInsensitive ( name ) ; }
--------------------------------------------------
public OutputSettings prettyPrint ( boolean pretty ) { prettyPrint = pretty ; return this ; }
--------------------------------------------------
public Connection data ( String key , String value ) { req . data ( KeyVal . create ( key , value ) ) ; return this ; }
--------------------------------------------------
static URL encodeUrl ( URL u ) { try { String urlS = u . toExternalForm ( ) ; urlS = urlS . replaceAll ( " " , "%20" ) ; final URI uri = new URI ( urlS ) ; return new URL ( uri . toASCIIString ( ) ) ; } catch ( Exception e ) { return u ; } }
--------------------------------------------------
public Attribute next ( ) { final Attribute attr = new Attribute ( keys [ i ] , vals [ i ] , Attributes . this ) ; i ++ ; return attr ; }
--------------------------------------------------
@ Override void nodelistChanged ( ) { super . nodelistChanged ( ) ; shadowChildrenRef = null ; }
--------------------------------------------------
