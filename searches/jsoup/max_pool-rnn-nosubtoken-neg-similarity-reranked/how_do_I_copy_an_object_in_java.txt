public String html ( ) { StringBuilder sb = StringUtil . borrowBuilder ( ) ; for ( Element element : this ) { if ( sb . length ( ) != 0 ) sb . append ( "\n" ) ; sb . append ( element . html ( ) ) ; } return StringUtil . releaseBuilder ( sb ) ; }
--------------------------------------------------
public Node before ( String html ) { addSiblingHtml ( siblingIndex , html ) ; return this ; }
--------------------------------------------------
public Document post ( ) throws IOException { req . method ( Method . POST ) ; execute ( ) ; return res . parse ( ) ; }
--------------------------------------------------
public String attr ( String attributeKey ) { Validate . notNull ( attributeKey ) ; if ( ! hasAttributes ( ) ) return EmptyString ; String val = attributes ( ) . getIgnoreCase ( attributeKey ) ; if ( val . length ( ) > 0 ) return val ; else if ( attributeKey . startsWith ( "abs:" ) ) return absUrl ( attributeKey . substring ( "abs:" . length ( ) ) ) ; else return "" ; }
--------------------------------------------------
public boolean equals ( Object o ) { if ( this == o ) return true ; if ( o == null || getClass ( ) != o . getClass ( ) ) return false ; Attribute attribute = ( Attribute ) o ; if ( key != null ? ! key . equals ( attribute . key ) : attribute . key != null ) return false ; return val != null ? val . equals ( attribute . val ) : attribute . val == null ; }
--------------------------------------------------
public boolean equals ( Object o ) { if ( this == o ) return true ; if ( ! ( o instanceof Tag ) ) return false ; Tag tag = ( Tag ) o ; if ( ! tagName . equals ( tag . tagName ) ) return false ; if ( canContainInline != tag . canContainInline ) return false ; if ( empty != tag . empty ) return false ; if ( formatAsBlock != tag . formatAsBlock ) return false ; if ( isBlock != tag . isBlock ) return false ; if ( preserveWhitespace != tag . preserveWhitespace ) return false ; if ( selfClosing != tag . selfClosing ) return false ; if ( formList != tag . formList ) return false ; return formSubmit == tag . formSubmit ; }
--------------------------------------------------
public Elements parents ( ) { HashSet < Element > combo = new LinkedHashSet < > ( ) ; for ( Element e : this ) { combo . addAll ( e . parents ( ) ) ; } return new Elements ( combo ) ; }
--------------------------------------------------
public Node attr ( String attributeKey , String attributeValue ) { attributeKey = NodeUtils . parser ( this ) . settings ( ) . normalizeAttribute ( attributeKey ) ; attributes ( ) . putIgnoreCase ( attributeKey , attributeValue ) ; return this ; }
--------------------------------------------------
public static String padding ( int width ) { if ( width < 0 ) throw new IllegalArgumentException ( "width must be > 0" ) ; if ( width < padding . length ) return padding [ width ] ; char [ ] out = new char [ width ] ; for ( int i = 0 ; i < width ; i ++ ) out [ i ] = ' ' ; return String . valueOf ( out ) ; }
--------------------------------------------------
public Connection headers ( Map < String , String > headers ) { Validate . notNull ( headers , "header map must not be null" ) ; for ( Map . Entry < String , String > entry : headers . entrySet ( ) ) { req . header ( entry . getKey ( ) , entry . getValue ( ) ) ; } return this ; }
--------------------------------------------------
