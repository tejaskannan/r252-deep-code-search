public final Element parent ( ) { return ( Element ) parentNode ; }
--------------------------------------------------
public static Whitelist simpleText ( ) { return new Whitelist ( ) . addTags ( "b" , "em" , "i" , "strong" , "u" ) ; }
--------------------------------------------------
public String val ( ) { if ( size ( ) > 0 ) return first ( ) . val ( ) ; else return "" ; }
--------------------------------------------------
private boolean expired ( ) { if ( timeout == 0 ) return false ; final long now = System . nanoTime ( ) ; final long dur = now - startTime ; return ( dur > timeout ) ; }
--------------------------------------------------
public Element prepend ( String html ) { Validate . notNull ( html ) ; List < Node > nodes = NodeUtils . parser ( this ) . parseFragmentInput ( html , this , baseUri ( ) ) ; addChildren ( 0 , nodes . toArray ( new Node [ 0 ] ) ) ; return this ; }
--------------------------------------------------
static String mimeBoundary ( ) { final StringBuilder mime = StringUtil . borrowBuilder ( ) ; final Random rand = new Random ( ) ; for ( int i = 0 ; i < boundaryLength ; i ++ ) { mime . append ( mimeBoundaryChars [ rand . nextInt ( mimeBoundaryChars . length ) ] ) ; } return StringUtil . releaseBuilder ( mime ) ; }
--------------------------------------------------
public boolean matches ( Element root , Element element ) { return ! value . equalsIgnoreCase ( element . attr ( key ) ) ; }
--------------------------------------------------
public int hashCode ( ) { int result = size ; result = 31 * result + Arrays . hashCode ( keys ) ; result = 31 * result + Arrays . hashCode ( vals ) ; return result ; }
--------------------------------------------------
public Elements val ( String value ) { for ( Element element : this ) element . val ( value ) ; return this ; }
--------------------------------------------------
public OutputSettings clone ( ) { OutputSettings clone ; try { clone = ( OutputSettings ) super . clone ( ) ; } catch ( CloneNotSupportedException e ) { throw new RuntimeException ( e ) ; } clone . charset ( charset . name ( ) ) ; clone . escapeMode = Entities . EscapeMode . valueOf ( escapeMode . name ( ) ) ; return clone ; }
--------------------------------------------------
