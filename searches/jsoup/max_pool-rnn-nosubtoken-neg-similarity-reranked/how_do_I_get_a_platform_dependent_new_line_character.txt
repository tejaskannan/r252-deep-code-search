protected void initialiseParse ( Reader input , String baseUri , Parser parser ) { super . initialiseParse ( input , baseUri , parser ) ; state = HtmlTreeBuilderState . Initial ; originalState = null ; baseUriSetFromDoc = false ; headElement = null ; formElement = null ; contextElement = null ; formattingElements = new ArrayList < > ( ) ; pendingTableCharacters = new ArrayList < > ( ) ; emptyEnd = new Token . EndTag ( ) ; framesetOk = true ; fosterInserts = false ; fragmentParsing = false ; }
--------------------------------------------------
public String setValue ( String val ) { String oldVal = this . val ; if ( parent != null ) { oldVal = parent . get ( this . key ) ; int i = parent . indexOfKey ( this . key ) ; if ( i != Attributes . NotFound ) parent . vals [ i ] = val ; } this . val = val ; return Attributes . checkNotNull ( oldVal ) ; }
--------------------------------------------------
private void normaliseStructure ( String tag , Element htmlEl ) { Elements elements = this . getElementsByTag ( tag ) ; Element master = elements . first ( ) ; if ( elements . size ( ) > 1 ) { List < Node > toMove = new ArrayList < > ( ) ; for ( int i = 1 ; i < elements . size ( ) ; i ++ ) { Node dupe = elements . get ( i ) ; toMove . addAll ( dupe . ensureChildNodes ( ) ) ; dupe . remove ( ) ; } for ( Node dupe : toMove ) master . appendChild ( dupe ) ; } if ( ! master . parent ( ) . equals ( htmlEl ) ) { htmlEl . appendChild ( master ) ; } }
--------------------------------------------------
void unconsume ( ) { if ( bufPos < 1 ) throw new UncheckedIOException ( new IOException ( "no buffer left to unconsume" ) ) ; bufPos -- ; }
--------------------------------------------------
public int hashCode ( ) { final int prime = 31 ; int result = 1 ; result = prime * result + ( ( value == null ) ? 0 : value . hashCode ( ) ) ; return result ; }
--------------------------------------------------
public void setPubSysKey ( String value ) { if ( value != null ) attr ( PUB_SYS_KEY , value ) ; }
--------------------------------------------------
public T url ( URL url ) { Validate . notNull ( url , "url must not be null" ) ; this . url = url ; return ( T ) this ; }
--------------------------------------------------
public String contentType ( ) { return contentType ; }
--------------------------------------------------
public Parser setTreeBuilder ( TreeBuilder treeBuilder ) { this . treeBuilder = treeBuilder ; treeBuilder . parser = this ; return this ; }
--------------------------------------------------
public Parser setTrackErrors ( int maxErrors ) { errors = maxErrors > 0 ? ParseErrorList . tracking ( maxErrors ) : ParseErrorList . noTracking ( ) ; return this ; }
--------------------------------------------------
