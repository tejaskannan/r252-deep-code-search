public Connection . Request postDataCharset ( String charset ) { Validate . notNull ( charset , "charset must not be null" ) ; if ( ! Charset . isSupported ( charset ) ) throw new IllegalCharsetNameException ( charset ) ; this . postDataCharset = charset ; return this ; }
--------------------------------------------------
public Connection postDataCharset ( String charset ) { req . postDataCharset ( charset ) ; return this ; }
--------------------------------------------------
public String text ( ) { final StringBuilder accum = StringUtil . borrowBuilder ( ) ; NodeTraversor . traverse ( new NodeVisitor ( ) { public void head ( Node node , int depth ) { if ( node instanceof TextNode ) { TextNode textNode = ( TextNode ) node ; appendNormalisedText ( accum , textNode ) ; } else if ( node instanceof Element ) { Element element = ( Element ) node ; if ( accum . length ( ) > 0 && ( element . isBlock ( ) || element . tag . getName ( ) . equals ( "br" ) ) && ! TextNode . lastCharIsWhitespace ( accum ) ) accum . append ( ' ' ) ; } } public void tail ( Node node , int depth ) { if ( node instanceof Element ) { Element element = ( Element ) node ; if ( element . isBlock ( ) && ( node . nextSibling ( ) instanceof TextNode ) && ! TextNode . lastCharIsWhitespace ( accum ) ) accum . append ( ' ' ) ; } } } , this ) ; return StringUtil . releaseBuilder ( accum ) . trim ( ) ; }
--------------------------------------------------
public Document fromJsoup ( org . jsoup . nodes . Document in ) { Validate . notNull ( in ) ; DocumentBuilder builder ; try { factory . setNamespaceAware ( true ) ; builder = factory . newDocumentBuilder ( ) ; Document out = builder . newDocument ( ) ; convert ( in , out ) ; return out ; } catch ( ParserConfigurationException e ) { throw new IllegalStateException ( e ) ; } }
--------------------------------------------------
public static Tag valueOf ( String tagName , ParseSettings settings ) { Validate . notNull ( tagName ) ; Tag tag = tags . get ( tagName ) ; if ( tag == null ) { tagName = settings . normalizeTag ( tagName ) ; Validate . notEmpty ( tagName ) ; tag = tags . get ( tagName ) ; if ( tag == null ) { tag = new Tag ( tagName ) ; tag . isBlock = false ; } } return tag ; }
--------------------------------------------------
private void copyAttributes ( org . jsoup . nodes . Node source , Element el ) { for ( Attribute attribute : source . attributes ( ) ) { String key = attribute . getKey ( ) . replaceAll ( "[^-a-za-z0-9_:.]" , "" ) ; if ( key . matches ( "[a-za-z_:][-a-za-z0-9_:.]*" ) ) el . setAttribute ( key , attribute . getValue ( ) ) ; } }
--------------------------------------------------
static Document . OutputSettings outputSettings ( Node node ) { Document owner = node . ownerDocument ( ) ; return owner != null ? owner . outputSettings ( ) : ( new Document ( "" ) ) . outputSettings ( ) ; }
--------------------------------------------------
public AttributeKeyPair ( String key , String value ) { Validate . notEmpty ( key ) ; Validate . notEmpty ( value ) ; this . key = normalize ( key ) ; if ( value . startsWith ( """ ) && value . endsWith ( """ ) || value . startsWith ( "'" ) && value . endsWith ( "'" ) ) { value = value . substring ( 1 , value . length ( ) - 1 ) ; } this . value = normalize ( value ) ; }
--------------------------------------------------
public String getPlainText ( Element element ) { FormattingVisitor formatter = new FormattingVisitor ( ) ; NodeTraversor . traverse ( formatter , element ) ; return formatter . toString ( ) ; }
--------------------------------------------------
public String data ( ) { StringBuilder sb = StringUtil . borrowBuilder ( ) ; for ( Node childNode : childNodes ) { if ( childNode instanceof DataNode ) { DataNode data = ( DataNode ) childNode ; sb . append ( data . getWholeData ( ) ) ; } else if ( childNode instanceof Comment ) { Comment comment = ( Comment ) childNode ; sb . append ( comment . getData ( ) ) ; } else if ( childNode instanceof Element ) { Element element = ( Element ) childNode ; String elementData = element . data ( ) ; sb . append ( elementData ) ; } else if ( childNode instanceof CDataNode ) { CDataNode cDataNode = ( CDataNode ) childNode ; sb . append ( cDataNode . getWholeText ( ) ) ; } } return StringUtil . releaseBuilder ( sb ) ; }
--------------------------------------------------
