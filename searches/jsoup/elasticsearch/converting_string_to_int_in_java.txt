public String toString ( ) { if ( importStrings . isEmpty ( ) ) { return '' ; } StringBuilder result = new StringBuilder ( ) ; if ( ! hasExistingImports ) { result . append ( '' ) ; } List < ImportOrganizer . Import > imports = importStrings . stream ( ) . map ( ImportOrganizer . Import :: importOf ) . collect ( Collectors . toList ( ) ) ; ImportOrganizer . OrganizedImports organizedImports = importOrganizer . organizeImports ( imports ) ; int expectedImportCount = imports . size ( ) ; int importCount = organizedImports . getImportCount ( ) ; if ( importCount != expectedImportCount ) { throw new IllegalStateException ( String . format ( 'expected %d import(s) in the organized imports but it contained %d' , expectedImportCount , importCount ) ) ; } result . append ( organizedImports . asImportBlock ( ) ) ; String replacementString = result . toString ( ) ; if ( ! hasExistingImports ) { return replacementString ; } else { return CharMatcher . whitespace ( ) . trimTrailingFrom ( replacementString ) ; } }
--------------------------------------------------
public String consumeTo ( String seq ) { int offset = queue . indexOf ( seq , pos ) ; if ( offset != - 1 ) { String consumed = queue . substring ( pos , offset ) ; pos += consumed . length ( ) ; return consumed ; } else { return remainder ( ) ; } }
--------------------------------------------------
public String consumeTo ( char c ) { int offset = nextIndexOf ( c ) ; if ( offset != - 1 ) { String consumed = cacheString ( charBuf , stringCache , bufPos , offset ) ; bufPos += offset ; return consumed ; } else { return consumeToEnd ( ) ; } }
--------------------------------------------------
public String chompTo ( String seq ) { String data = consumeTo ( seq ) ; matchChomp ( seq ) ; return data ; }
--------------------------------------------------
public String toString ( ) { return getFirst ( getAllChecks ( ) . keySet ( ) , '' ) ; }
--------------------------------------------------
public static String toString ( Throwable e ) { UnsafeStringWriter w = new UnsafeStringWriter ( ) ; PrintWriter p = new PrintWriter ( w ) ; p . print ( e . getClass ( ) . getName ( ) ) ; if ( e . getMessage ( ) != null ) { p . print ( ': ' + e . getMessage ( ) ) ; } p . println ( ) ; try { e . printStackTrace ( p ) ; return w . toString ( ) ; } finally { p . close ( ) ; } }
--------------------------------------------------
public Diff toProto ( ) { ApiDiffProto . Diff . Builder builder = ApiDiffProto . Diff . newBuilder ( ) ; for ( String className : unsupportedClasses ( ) ) { builder . addClassDiff ( ApiDiffProto . ClassDiff . newBuilder ( ) . setEverythingDiff ( ApiDiffProto . EverythingDiff . newBuilder ( ) . setClassName ( className ) ) ) ; } for ( String className : unsupportedMembersByClass ( ) . keySet ( ) ) { ApiDiffProto . MemberDiff . Builder memberDiff = ApiDiffProto . MemberDiff . newBuilder ( ) . setClassName ( className ) ; for ( ClassMemberKey member : unsupportedMembersByClass ( ) . get ( className ) ) { memberDiff . addMember ( ApiDiffProto . ClassMember . newBuilder ( ) . setIdentifier ( member . identifier ( ) ) . setMemberDescriptor ( member . descriptor ( ) ) ) ; } builder . addClassDiff ( ApiDiffProto . ClassDiff . newBuilder ( ) . setMemberDiff ( memberDiff ) ) ; } return builder . build ( ) ; }
--------------------------------------------------
private Object toFile ( VisitorState state , Tree fileArg , SuggestedFix . Builder fix ) { Type type = ASTHelpers . getType ( fileArg ) ; if ( ASTHelpers . isSubtype ( type , state . getSymtab ( ) . stringType , state ) ) { fix . addImport ( 'java.io.file' ) ; return String . format ( 'new file(%s)' , state . getSourceForNode ( fileArg ) ) ; } else if ( ASTHelpers . isSubtype ( type , state . getTypeFromString ( 'java.io.file' ) , state ) ) { return state . getSourceForNode ( fileArg ) ; } else { throw new AssertionError ( 'unexpected type: ' + type ) ; } }
--------------------------------------------------
private static String exceptionToString ( TryTree tree , VisitorState state ) { if ( tree . getCatches ( ) . size ( ) != 1 ) { return 'exception' ; } Tree exceptionType = tree . getCatches ( ) . iterator ( ) . next ( ) . getParameter ( ) . getType ( ) ; Type type = ASTHelpers . getType ( exceptionType ) ; if ( type != null && type . isUnion ( ) ) { return 'exception' ; } return state . getSourceForNode ( exceptionType ) ; }
--------------------------------------------------
default int compareTo ( Configurator o ) { if ( o == null ) { return - 1 ; } int ipCompare = getUrl ( ) . getHost ( ) . compareTo ( o . getUrl ( ) . getHost ( ) ) ; if ( ipCompare == 0 ) { int i = getUrl ( ) . getParameter ( Constants . PRIORITY_KEY , 0 ) ; int j = o . getUrl ( ) . getParameter ( Constants . PRIORITY_KEY , 0 ) ; return Integer . compare ( i , j ) ; } else { return ipCompare ; } }
--------------------------------------------------
