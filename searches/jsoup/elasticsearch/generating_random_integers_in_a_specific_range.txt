public int getSourcePos ( int index ) { checkArgument ( 0 <= index && index < ( endPos - pos ) , 'expected %s in the range [0, %s)' , index , endPos - pos ) ; return pos + index ; }
--------------------------------------------------
private BeanNameGenerator resolveBeanNameGenerator ( BeanDefinitionRegistry registry ) { BeanNameGenerator beanNameGenerator = null ; if ( registry instanceof SingletonBeanRegistry ) { SingletonBeanRegistry singletonBeanRegistry = SingletonBeanRegistry . class . cast ( registry ) ; beanNameGenerator = ( BeanNameGenerator ) singletonBeanRegistry . getSingleton ( CONFIGURATION_BEAN_NAME_GENERATOR ) ; } if ( beanNameGenerator == null ) { if ( logger . isInfoEnabled ( ) ) { logger . info ( 'beannamegenerator bean can't be found in beanfactory with name [' + CONFIGURATION_BEAN_NAME_GENERATOR + ']' ) ; logger . info ( 'beannamegenerator will be a instance of ' + AnnotationBeanNameGenerator . class . getName ( ) + ' , it maybe a potential problem on bean name generation.' ) ; } beanNameGenerator = new AnnotationBeanNameGenerator ( ) ; } return beanNameGenerator ; }
--------------------------------------------------
private BeanNameGenerator resolveBeanNameGenerator ( BeanDefinitionRegistry registry ) { BeanNameGenerator beanNameGenerator = null ; if ( registry instanceof SingletonBeanRegistry ) { SingletonBeanRegistry singletonBeanRegistry = SingletonBeanRegistry . class . cast ( registry ) ; beanNameGenerator = ( BeanNameGenerator ) singletonBeanRegistry . getSingleton ( CONFIGURATION_BEAN_NAME_GENERATOR ) ; } if ( beanNameGenerator == null ) { if ( logger . isInfoEnabled ( ) ) { logger . info ( 'beannamegenerator bean can't be found in beanfactory with name [' + CONFIGURATION_BEAN_NAME_GENERATOR + ']' ) ; logger . info ( 'beannamegenerator will be a instance of ' + AnnotationBeanNameGenerator . class . getName ( ) + ' , it maybe a potential problem on bean name generation.' ) ; } beanNameGenerator = new AnnotationBeanNameGenerator ( ) ; } return beanNameGenerator ; }
--------------------------------------------------
