public JavaFileObject forResource ( String fileName ) { Preconditions . checkState ( clazz . isPresent ( ) , 'clazz must be set if you want to add a source from a resource file' ) ; return forResource ( clazz . get ( ) , fileName ) ; }
--------------------------------------------------
public static Properties loadProperties ( String fileName , boolean allowMultiFile , boolean optional ) { Properties properties = new Properties ( ) ; if ( checkFileNameExist ( fileName ) ) { try { FileInputStream input = new FileInputStream ( fileName ) ; try { properties . load ( input ) ; } finally { input . close ( ) ; } } catch ( Throwable e ) { logger . warn ( 'failed to load ' + fileName + ' file from ' + fileName + '(ignore this file): ' + e . getMessage ( ) , e ) ; } return properties ; } List < java . net . URL > list = new ArrayList < java . net . URL > ( ) ; try { Enumeration < java . net . URL > urls = ClassHelper . getClassLoader ( ) . getResources ( fileName ) ; list = new ArrayList < java . net . URL > ( ) ; while ( urls . hasMoreElements ( ) ) { list . add ( urls . nextElement ( ) ) ; } } catch ( Throwable t ) { logger . warn ( 'fail to load ' + fileName + ' file: ' + t . getMessage ( ) , t ) ; } if ( list . isEmpty ( ) ) { if ( ! optional ) { logger . warn ( 'no ' + fileName + ' found on the class path.' ) ; } return properties ; } if ( ! allowMultiFile ) { if ( list . size ( ) > 1 ) { String errMsg = String . format ( 'only 1 %s file is expected, but %d dubbo.properties files found on class path: %s' , fileName , list . size ( ) , list . toString ( ) ) ; logger . warn ( errMsg ) ; } try { properties . load ( ClassHelper . getClassLoader ( ) . getResourceAsStream ( fileName ) ) ; } catch ( Throwable e ) { logger . warn ( 'failed to load ' + fileName + ' file from ' + fileName + '(ignore this file): ' + e . getMessage ( ) , e ) ; } return properties ; } logger . info ( 'load ' + fileName + ' properties file from ' + list ) ; for ( java . net . URL url : list ) { try { Properties p = new Properties ( ) ; InputStream input = url . openStream ( ) ; if ( input != null ) { try { p . load ( input ) ; properties . putAll ( p ) ; } finally { try { input . close ( ) ; } catch ( Throwable t ) { } } } } catch ( Throwable e ) { logger . warn ( 'fail to load ' + fileName + ' file from ' + url + '(ignore this file): ' + e . getMessage ( ) , e ) ; } } return properties ; }
--------------------------------------------------
private BeanNameGenerator resolveBeanNameGenerator ( BeanDefinitionRegistry registry ) { BeanNameGenerator beanNameGenerator = null ; if ( registry instanceof SingletonBeanRegistry ) { SingletonBeanRegistry singletonBeanRegistry = SingletonBeanRegistry . class . cast ( registry ) ; beanNameGenerator = ( BeanNameGenerator ) singletonBeanRegistry . getSingleton ( CONFIGURATION_BEAN_NAME_GENERATOR ) ; } if ( beanNameGenerator == null ) { if ( logger . isInfoEnabled ( ) ) { logger . info ( 'beannamegenerator bean can't be found in beanfactory with name [' + CONFIGURATION_BEAN_NAME_GENERATOR + ']' ) ; logger . info ( 'beannamegenerator will be a instance of ' + AnnotationBeanNameGenerator . class . getName ( ) + ' , it maybe a potential problem on bean name generation.' ) ; } beanNameGenerator = new AnnotationBeanNameGenerator ( ) ; } return beanNameGenerator ; }
--------------------------------------------------
private BeanNameGenerator resolveBeanNameGenerator ( BeanDefinitionRegistry registry ) { BeanNameGenerator beanNameGenerator = null ; if ( registry instanceof SingletonBeanRegistry ) { SingletonBeanRegistry singletonBeanRegistry = SingletonBeanRegistry . class . cast ( registry ) ; beanNameGenerator = ( BeanNameGenerator ) singletonBeanRegistry . getSingleton ( CONFIGURATION_BEAN_NAME_GENERATOR ) ; } if ( beanNameGenerator == null ) { if ( logger . isInfoEnabled ( ) ) { logger . info ( 'beannamegenerator bean can't be found in beanfactory with name [' + CONFIGURATION_BEAN_NAME_GENERATOR + ']' ) ; logger . info ( 'beannamegenerator will be a instance of ' + AnnotationBeanNameGenerator . class . getName ( ) + ' , it maybe a potential problem on bean name generation.' ) ; } beanNameGenerator = new AnnotationBeanNameGenerator ( ) ; } return beanNameGenerator ; }
--------------------------------------------------
