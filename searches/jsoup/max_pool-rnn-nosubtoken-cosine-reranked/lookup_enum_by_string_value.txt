final void appendAttributeValue ( String append ) { ensureAttributeValue ( ) ; if ( pendingAttributeValue . length ( ) == 0 ) { pendingAttributeValueS = append ; } else { pendingAttributeValue . append ( append ) ; } }
--------------------------------------------------
final void appendAttributeValue ( char append ) { ensureAttributeValue ( ) ; pendingAttributeValue . append ( append ) ; }
--------------------------------------------------
final void appendAttributeValue ( char [ ] append ) { ensureAttributeValue ( ) ; pendingAttributeValue . append ( append ) ; }
--------------------------------------------------
final void appendAttributeValue ( int [ ] appendCodepoints ) { ensureAttributeValue ( ) ; for ( int codepoint : appendCodepoints ) { pendingAttributeValue . appendCodePoint ( codepoint ) ; } }
--------------------------------------------------
@ Override Tag reset ( ) { tagName = null ; normalName = null ; pendingAttributeName = null ; reset ( pendingAttributeValue ) ; pendingAttributeValueS = null ; hasEmptyAttributeValue = false ; hasPendingAttributeValue = false ; selfClosing = false ; attributes = null ; return this ; }
--------------------------------------------------
public Element appendElement ( String tagName ) { Element child = new Element ( Tag . valueOf ( tagName , NodeUtils . parser ( this ) . settings ( ) ) , baseUri ( ) ) ; appendChild ( child ) ; return child ; }
--------------------------------------------------
void putIgnoreCase ( String key , String value ) { int i = indexOfKeyIgnoreCase ( key ) ; if ( i != NotFound ) { vals [ i ] = value ; if ( ! keys [ i ] . equals ( key ) ) keys [ i ] = key ; } else add ( key , value ) ; }
--------------------------------------------------
private static void appendEncoded ( Appendable accum , EscapeMode escapeMode , int codePoint ) throws IOException { final String name = escapeMode . nameForCodepoint ( codePoint ) ; if ( name != emptyName ) accum . append ( '&' ) . append ( name ) . append ( ';' ) ; else accum . append ( "&#x" ) . append ( Integer . toHexString ( codePoint ) ) . append ( ';' ) ; }
--------------------------------------------------
private static void appendWhitespaceIfBr ( Element element , StringBuilder accum ) { if ( element . tag . getName ( ) . equals ( "br" ) && ! TextNode . lastCharIsWhitespace ( accum ) ) accum . append ( " " ) ; }
--------------------------------------------------
public static String escape ( String string , Document . OutputSettings out ) { if ( string == null ) return "" ; StringBuilder accum = StringUtil . borrowBuilder ( ) ; try { escape ( accum , string , out , false , false , false ) ; } catch ( IOException e ) { throw new SerializationException ( e ) ; } return StringUtil . releaseBuilder ( accum ) ; }
--------------------------------------------------
