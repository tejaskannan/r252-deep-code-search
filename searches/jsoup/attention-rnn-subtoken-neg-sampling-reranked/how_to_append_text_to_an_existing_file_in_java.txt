public boolean isXmlDeclaration ( ) { String data = getData ( ) ; return ( data . length ( ) > 1 && ( data . startsWith ( "!" ) || data . startsWith ( "?" ) ) ) ; }
--------------------------------------------------
public static boolean isBlank ( String string ) { if ( string == null || string . length ( ) == 0 ) return true ; int l = string . length ( ) ; for ( int i = 0 ; i < l ; i ++ ) { if ( ! StringUtil . isWhitespace ( string . codePointAt ( i ) ) ) return false ; } return true ; }
--------------------------------------------------
public boolean equals ( Object obj ) { if ( this == obj ) return true ; if ( obj == null ) return false ; if ( getClass ( ) != obj . getClass ( ) ) return false ; TypedValue other = ( TypedValue ) obj ; if ( value == null ) { return other . value == null ; } else return value . equals ( other . value ) ; }
--------------------------------------------------
public E remove ( int index ) { onContentsChanged ( ) ; return super . remove ( index ) ; }
--------------------------------------------------
public static String join ( Iterator strings , String sep ) { if ( ! strings . hasNext ( ) ) return "" ; String start = strings . next ( ) . toString ( ) ; if ( ! strings . hasNext ( ) ) return start ; StringBuilder sb = StringUtil . borrowBuilder ( ) . append ( start ) ; while ( strings . hasNext ( ) ) { sb . append ( sep ) ; sb . append ( strings . next ( ) ) ; } return StringUtil . releaseBuilder ( sb ) ; }
--------------------------------------------------
public boolean is ( String query ) { Evaluator eval = QueryParser . parse ( query ) ; for ( Element e : this ) { if ( e . is ( eval ) ) return true ; } return false ; }
--------------------------------------------------
final void appendAttributeValue ( char append ) { ensureAttributeValue ( ) ; pendingAttributeValue . append ( append ) ; }
--------------------------------------------------
final void appendAttributeValue ( char [ ] append ) { ensureAttributeValue ( ) ; pendingAttributeValue . append ( append ) ; }
--------------------------------------------------
private boolean isElementInQueue ( ArrayList < Element > queue , Element element ) { for ( int pos = queue . size ( ) - 1 ; pos >= 0 ; pos -- ) { Element next = queue . get ( pos ) ; if ( next == element ) { return true ; } } return false ; }
--------------------------------------------------
public boolean matches ( Element root , Element element ) { return element . hasAttr ( key ) && lowerCase ( element . attr ( key ) ) . contains ( value ) ; }
--------------------------------------------------
