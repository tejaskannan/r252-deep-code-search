private ConstrainableInputStream ( InputStream in , int bufferSize , int maxSize ) { super ( in , bufferSize ) ; Validate . isTrue ( maxSize >= 0 ) ; this . maxSize = maxSize ; remaining = maxSize ; capped = maxSize != 0 ; startTime = System . nanoTime ( ) ; }
--------------------------------------------------
public Element insertChildren ( int index , Node ... children ) { Validate . notNull ( children , "children collection to be inserted must not be null." ) ; int currentSize = childNodeSize ( ) ; if ( index < 0 ) index += currentSize + 1 ; Validate . isTrue ( index >= 0 && index <= currentSize , "insert position out of bounds." ) ; addChildren ( index , children ) ; return this ; }
--------------------------------------------------
protected void doSetBaseUri ( String baseUri ) { }
--------------------------------------------------
public List < Node > siblingNodes ( ) { if ( parentNode == null ) return Collections . emptyList ( ) ; List < Node > nodes = parentNode . ensureChildNodes ( ) ; List < Node > siblings = new ArrayList < > ( nodes . size ( ) - 1 ) ; for ( Node node : nodes ) if ( node != this ) siblings . add ( node ) ; return siblings ; }
--------------------------------------------------
void error ( String errorMsg ) { if ( errors . canAddError ( ) ) errors . add ( new ParseError ( reader . pos ( ) , errorMsg ) ) ; }
--------------------------------------------------
protected Element doClone ( Node parent ) { Element clone = ( Element ) super . doClone ( parent ) ; clone . attributes = attributes != null ? attributes . clone ( ) : null ; clone . baseUri = baseUri ; clone . childNodes = new NodeList ( clone , childNodes . size ( ) ) ; clone . childNodes . addAll ( childNodes ) ; return clone ; }
--------------------------------------------------
void error ( TokeniserState state ) { if ( errors . canAddError ( ) ) errors . add ( new ParseError ( reader . pos ( ) , "unexpected character '%s' in input state [%s]" , reader . current ( ) , state ) ) ; }
--------------------------------------------------
private void ownText ( StringBuilder accum ) { for ( Node child : childNodes ) { if ( child instanceof TextNode ) { TextNode textNode = ( TextNode ) child ; appendNormalisedText ( accum , textNode ) ; } else if ( child instanceof Element ) { appendWhitespaceIfBr ( ( Element ) child , accum ) ; } } }
--------------------------------------------------
private static void handleRcData ( Token . StartTag startTag , HtmlTreeBuilder tb ) { tb . tokeniser . transition ( TokeniserState . Rcdata ) ; tb . markInsertionMode ( ) ; tb . transition ( Text ) ; tb . insert ( startTag ) ; }
--------------------------------------------------
public void tail ( Node node , int depth ) { if ( node instanceof Element ) { Element element = ( Element ) node ; if ( element . isBlock ( ) && ( node . nextSibling ( ) instanceof TextNode ) && ! TextNode . lastCharIsWhitespace ( accum ) ) accum . append ( ' ' ) ; } }
--------------------------------------------------
