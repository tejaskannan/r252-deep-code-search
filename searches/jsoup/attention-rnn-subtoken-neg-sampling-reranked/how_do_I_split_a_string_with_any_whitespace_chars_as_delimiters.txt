private Element getDeepChild ( Element el ) { List < Element > children = el . children ( ) ; if ( children . size ( ) > 0 ) return getDeepChild ( children . get ( 0 ) ) ; else return el ; }
--------------------------------------------------
final void newAttribute ( ) { if ( attributes == null ) attributes = new Attributes ( ) ; if ( pendingAttributeName != null ) { pendingAttributeName = pendingAttributeName . trim ( ) ; if ( pendingAttributeName . length ( ) > 0 ) { String value ; if ( hasPendingAttributeValue ) value = pendingAttributeValue . length ( ) > 0 ? pendingAttributeValue . toString ( ) : pendingAttributeValueS ; else if ( hasEmptyAttributeValue ) value = "" ; else value = null ; attributes . put ( pendingAttributeName , value ) ; } } pendingAttributeName = null ; hasEmptyAttributeValue = false ; hasPendingAttributeValue = false ; reset ( pendingAttributeValue ) ; pendingAttributeValueS = null ; }
--------------------------------------------------
boolean isSpecial ( Element el ) { String name = el . normalName ( ) ; return inSorted ( name , TagSearchSpecial ) ; }
--------------------------------------------------
public static URL resolve ( URL base , String relUrl ) throws MalformedURLException { if ( relUrl . startsWith ( "?" ) ) relUrl = base . getPath ( ) + relUrl ; if ( relUrl . indexOf ( '.' ) == 0 && base . getFile ( ) . indexOf ( '/' ) != 0 ) { base = new URL ( base . getProtocol ( ) , base . getHost ( ) , base . getPort ( ) , "/" + base . getFile ( ) ) ; } return new URL ( base , relUrl ) ; }
--------------------------------------------------
static CoreCharset byName ( final String name ) { if ( name . equals ( "us-ascii" ) ) return ascii ; if ( name . startsWith ( "utf-" ) ) return utf ; return fallback ; }
--------------------------------------------------
public static String resolve ( final String baseUrl , final String relUrl ) { URL base ; try { try { base = new URL ( baseUrl ) ; } catch ( MalformedURLException e ) { URL abs = new URL ( relUrl ) ; return abs . toExternalForm ( ) ; } return resolve ( base , relUrl ) . toExternalForm ( ) ; } catch ( MalformedURLException e ) { return "" ; } }
--------------------------------------------------
public String toString ( ) { return String . format ( ":prev*%s" , evaluator ) ; }
--------------------------------------------------
public String toString ( ) { return String . format ( ":prev%s" , evaluator ) ; }
--------------------------------------------------
public String toString ( ) { return String . format ( ":parent%s" , evaluator ) ; }
--------------------------------------------------
public String toString ( ) { return String . format ( ":not%s" , evaluator ) ; }
--------------------------------------------------
