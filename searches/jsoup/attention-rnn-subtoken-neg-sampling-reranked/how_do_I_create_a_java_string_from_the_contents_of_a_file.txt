public T method ( Method method ) { Validate . notNull ( method , "method must not be null" ) ; this . method = method ; return ( T ) this ; }
--------------------------------------------------
public Connection . Request ignoreContentType ( boolean ignoreContentType ) { this . ignoreContentType = ignoreContentType ; return this ; }
--------------------------------------------------
public String contentType ( ) { return contentType ; }
--------------------------------------------------
public Connection . KeyVal contentType ( String contentType ) { Validate . notEmpty ( contentType ) ; this . contentType = contentType ; return this ; }
--------------------------------------------------
public static void noNullElements ( Object [ ] objects , String msg ) { for ( Object obj : objects ) if ( obj == null ) throw new IllegalArgumentException ( msg ) ; }
--------------------------------------------------
public T url ( URL url ) { Validate . notNull ( url , "url must not be null" ) ; this . url = url ; return ( T ) this ; }
--------------------------------------------------
public UnsupportedMimeTypeException ( String message , String mimeType , String url ) { super ( message ) ; this . mimeType = mimeType ; this . url = url ; }
--------------------------------------------------
public HttpStatusException ( String message , int statusCode , String url ) { super ( message ) ; this . statusCode = statusCode ; this . url = url ; }
--------------------------------------------------
public Connection url ( String url ) { Validate . notEmpty ( url , "must supply a valid url" ) ; try { req . url ( new URL ( encodeUrl ( url ) ) ) ; } catch ( MalformedURLException e ) { throw new IllegalArgumentException ( "malformed url: " + url , e ) ; } return this ; }
--------------------------------------------------
Character data ( String data ) { this . data = data ; return this ; }
--------------------------------------------------
