public String toString ( ) { return html ( ) ; }
--------------------------------------------------
public String toString ( ) { return html ( ) ; }
--------------------------------------------------
public KeyVal value ( String value ) { Validate . notNull ( value , "data value must not be null" ) ; this . value = value ; return this ; }
--------------------------------------------------
public static Tag valueOf ( String tagName , ParseSettings settings ) { Validate . notNull ( tagName ) ; Tag tag = tags . get ( tagName ) ; if ( tag == null ) { tagName = settings . normalizeTag ( tagName ) ; Validate . notEmpty ( tagName ) ; tag = tags . get ( tagName ) ; if ( tag == null ) { tag = new Tag ( tagName ) ; tag . isBlock = false ; } } return tag ; }
--------------------------------------------------
final String name ( ) { Validate . isFalse ( tagName == null || tagName . length ( ) == 0 ) ; return tagName ; }
--------------------------------------------------
public static String releaseBuilder ( StringBuilder sb ) { Validate . notNull ( sb ) ; String string = sb . toString ( ) ; if ( sb . length ( ) > MaxCachedBuilderSize ) sb = new StringBuilder ( MaxCachedBuilderSize ) ; else sb . delete ( 0 , sb . length ( ) ) ; synchronized ( builders ) { builders . push ( sb ) ; while ( builders . size ( ) > MaxIdleBuilders ) { builders . pop ( ) ; } } return string ; }
--------------------------------------------------
String nameForCodepoint ( final int codepoint ) { final int index = Arrays . binarySearch ( codeKeys , codepoint ) ; if ( index >= 0 ) { return ( index < nameVals . length - 1 && codeKeys [ index + 1 ] == codepoint ) ? nameVals [ index + 1 ] : nameVals [ index ] ; } return emptyName ; }
--------------------------------------------------
public T header ( String name , String value ) { Validate . notEmpty ( name , "header name must not be empty" ) ; removeHeader ( name ) ; addHeader ( name , value ) ; return ( T ) this ; }
--------------------------------------------------
final Tag name ( String name ) { tagName = name ; normalName = lowerCase ( name ) ; return this ; }
--------------------------------------------------
public String attr ( String attributeKey ) { Validate . notNull ( attributeKey ) ; if ( ! hasAttributes ( ) ) return EmptyString ; String val = attributes ( ) . getIgnoreCase ( attributeKey ) ; if ( val . length ( ) > 0 ) return val ; else if ( attributeKey . startsWith ( "abs:" ) ) return absUrl ( attributeKey . substring ( "abs:" . length ( ) ) ) ; else return "" ; }
--------------------------------------------------
