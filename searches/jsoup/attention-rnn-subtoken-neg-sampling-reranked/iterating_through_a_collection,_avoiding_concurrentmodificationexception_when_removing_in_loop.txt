public boolean matches ( Element root , Element element ) { List < Node > family = element . childNodes ( ) ; for ( Node n : family ) { if ( ! ( n instanceof Comment || n instanceof XmlDeclaration || n instanceof DocumentType ) ) return false ; } return true ; }
--------------------------------------------------
private void checkCapacity ( int minNewSize ) { Validate . isTrue ( minNewSize >= size ) ; int curSize = keys . length ; if ( curSize >= minNewSize ) return ; int newSize = curSize >= InitialCapacity ? size * GrowthFactor : InitialCapacity ; if ( minNewSize > newSize ) newSize = minNewSize ; keys = copyOf ( keys , newSize ) ; vals = copyOf ( vals , newSize ) ; }
--------------------------------------------------
Element pop ( ) { int size = stack . size ( ) ; return stack . remove ( size - 1 ) ; }
--------------------------------------------------
private void popStackToClose ( Token . EndTag endTag ) { String elName = settings . normalizeTag ( endTag . tagName ) ; Element firstFound = null ; for ( int pos = stack . size ( ) - 1 ; pos >= 0 ; pos -- ) { Element next = stack . get ( pos ) ; if ( next . nodeName ( ) . equals ( elName ) ) { firstFound = next ; break ; } } if ( firstFound == null ) return ; for ( int pos = stack . size ( ) - 1 ; pos >= 0 ; pos -- ) { Element next = stack . get ( pos ) ; stack . remove ( pos ) ; if ( next == firstFound ) break ; } }
--------------------------------------------------
void popStackToClose ( String ... elNames ) { for ( int pos = stack . size ( ) - 1 ; pos >= 0 ; pos -- ) { Element next = stack . get ( pos ) ; stack . remove ( pos ) ; if ( inSorted ( next . normalName ( ) , elNames ) ) break ; } }
--------------------------------------------------
public static Document parseBodyFragment ( String bodyHtml , String baseUri ) { Document doc = Document . createShell ( baseUri ) ; Element body = doc . body ( ) ; List < Node > nodeList = parseFragment ( bodyHtml , body , baseUri ) ; Node [ ] nodes = nodeList . toArray ( new Node [ 0 ] ) ; for ( int i = nodes . length - 1 ; i > 0 ; i -- ) { nodes [ i ] . remove ( ) ; } for ( Node node : nodes ) { body . appendChild ( node ) ; } return doc ; }
--------------------------------------------------
Element removeLastFormattingElement ( ) { int size = formattingElements . size ( ) ; if ( size > 0 ) return formattingElements . remove ( size - 1 ) ; else return null ; }
--------------------------------------------------
public boolean equals ( Object o ) { if ( this == o ) return true ; if ( ! ( o instanceof Tag ) ) return false ; Tag tag = ( Tag ) o ; if ( ! tagName . equals ( tag . tagName ) ) return false ; if ( canContainInline != tag . canContainInline ) return false ; if ( empty != tag . empty ) return false ; if ( formatAsBlock != tag . formatAsBlock ) return false ; if ( isBlock != tag . isBlock ) return false ; if ( preserveWhitespace != tag . preserveWhitespace ) return false ; if ( selfClosing != tag . selfClosing ) return false ; if ( formList != tag . formList ) return false ; return formSubmit == tag . formSubmit ; }
--------------------------------------------------
public boolean equals ( Object o ) { return this == o ; }
--------------------------------------------------
public boolean matchesAny ( String ... seq ) { for ( String s : seq ) { if ( matches ( s ) ) return true ; } return false ; }
--------------------------------------------------
