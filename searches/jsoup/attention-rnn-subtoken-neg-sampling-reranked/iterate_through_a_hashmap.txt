public static Whitelist simpleText ( ) { return new Whitelist ( ) . addTags ( "b" , "em" , "i" , "strong" , "u" ) ; }
--------------------------------------------------
public Parser ( TreeBuilder treeBuilder ) { this . treeBuilder = treeBuilder ; settings = treeBuilder . defaultSettings ( ) ; errors = ParseErrorList . noTracking ( ) ; }
--------------------------------------------------
public CssNthEvaluator ( int a , int b ) { this . a = a ; this . b = b ; }
--------------------------------------------------
private Elements siblings ( String query , boolean next , boolean all ) { Elements els = new Elements ( ) ; Evaluator eval = query != null ? QueryParser . parse ( query ) : null ; for ( Element e : this ) { do { Element sib = next ? e . nextElementSibling ( ) : e . previousElementSibling ( ) ; if ( sib == null ) break ; if ( eval == null ) els . add ( sib ) ; else if ( sib . is ( eval ) ) els . add ( sib ) ; e = sib ; } while ( all ) ; } return els ; }
--------------------------------------------------
public KeyVal inputStream ( InputStream inputStream ) { Validate . notNull ( value , "data input stream must not be null" ) ; this . stream = inputStream ; return this ; }
--------------------------------------------------
private QueryParser ( String query ) { this . query = query ; this . tq = new TokenQueue ( query ) ; }
--------------------------------------------------
public Node filter ( NodeFilter nodeFilter ) { Validate . notNull ( nodeFilter ) ; NodeTraversor . filter ( nodeFilter , this ) ; return this ; }
--------------------------------------------------
public Parser setTrackErrors ( int maxErrors ) { errors = maxErrors > 0 ? ParseErrorList . tracking ( maxErrors ) : ParseErrorList . noTracking ( ) ; return this ; }
--------------------------------------------------
public Whitelist ( ) { tagNames = new HashSet < > ( ) ; attributes = new HashMap < > ( ) ; enforcedAttributes = new HashMap < > ( ) ; protocols = new HashMap < > ( ) ; preserveRelativeLinks = false ; }
--------------------------------------------------
public Node after ( String html ) { addSiblingHtml ( siblingIndex + 1 , html ) ; return this ; }
--------------------------------------------------
