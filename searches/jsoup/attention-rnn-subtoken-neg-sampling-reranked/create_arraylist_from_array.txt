public Connection ignoreHttpErrors ( boolean ignoreHttpErrors ) { req . ignoreHttpErrors ( ignoreHttpErrors ) ; return this ; }
--------------------------------------------------
public XmlDeclaration ( String name , boolean isProcessingInstruction ) { Validate . notNull ( name ) ; value = name ; this . isProcessingInstruction = isProcessingInstruction ; }
--------------------------------------------------
public Request timeout ( int millis ) { Validate . isTrue ( millis >= 0 , "timeout milliseconds must be 0 (infinite) or greater" ) ; timeoutMilliseconds = millis ; return this ; }
--------------------------------------------------
public TokenQueue ( String data ) { Validate . notNull ( data ) ; queue = data ; }
--------------------------------------------------
public Connection . Request maxBodySize ( int bytes ) { Validate . isTrue ( bytes >= 0 , "maxsize must be 0 (unlimited) or larger" ) ; maxBodySizeBytes = bytes ; return this ; }
--------------------------------------------------
public Connection proxy ( String host , int port ) { req . proxy ( host , port ) ; return this ; }
--------------------------------------------------
public Connection timeout ( int millis ) { req . timeout ( millis ) ; return this ; }
--------------------------------------------------
public Connection sslSocketFactory ( SSLSocketFactory sslSocketFactory ) { req . sslSocketFactory ( sslSocketFactory ) ; return this ; }
--------------------------------------------------
public Connection proxy ( Proxy proxy ) { req . proxy ( proxy ) ; return this ; }
--------------------------------------------------
private static String setOutputContentType ( final Connection . Request req ) { String bound = null ; if ( req . hasHeader ( CONTENT_TYPE ) ) { if ( req . header ( CONTENT_TYPE ) . contains ( MULTIPART_FORM_DATA ) && ! req . header ( CONTENT_TYPE ) . contains ( "boundary" ) ) { bound = DataUtil . mimeBoundary ( ) ; req . header ( CONTENT_TYPE , MULTIPART_FORM_DATA + "; boundary=" + bound ) ; } } else if ( needsMultipart ( req ) ) { bound = DataUtil . mimeBoundary ( ) ; req . header ( CONTENT_TYPE , MULTIPART_FORM_DATA + "; boundary=" + bound ) ; } else { req . header ( CONTENT_TYPE , FORM_URL_ENCODED + "; charset=" + req . postDataCharset ( ) ) ; } return bound ; }
--------------------------------------------------
