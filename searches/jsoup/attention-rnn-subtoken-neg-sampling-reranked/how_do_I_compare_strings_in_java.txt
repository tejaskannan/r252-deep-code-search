boolean anyOtherEndTag ( Token t , HtmlTreeBuilder tb ) { String name = t . asEndTag ( ) . normalName ; ArrayList < Element > stack = tb . getStack ( ) ; for ( int pos = stack . size ( ) - 1 ; pos >= 0 ; pos -- ) { Element node = stack . get ( pos ) ; if ( node . normalName ( ) . equals ( name ) ) { tb . generateImpliedEndTags ( name ) ; if ( ! name . equals ( tb . currentElement ( ) . normalName ( ) ) ) tb . error ( this ) ; tb . popStackToClose ( name ) ; break ; } else { if ( tb . isSpecial ( node ) ) { tb . error ( this ) ; return false ; } } } return true ; }
--------------------------------------------------
public void remove ( ) { Validate . notNull ( parentNode ) ; parentNode . removeChild ( this ) ; }
--------------------------------------------------
void read ( Tokeniser t , CharacterReader r ) { if ( r . matchConsume ( "--" ) ) { t . createCommentPending ( ) ; t . transition ( CommentStart ) ; } else if ( r . matchConsumeIgnoreCase ( "doctype" ) ) { t . transition ( Doctype ) ; } else if ( r . matchConsume ( "[cdata[" ) ) { t . createTempBuffer ( ) ; t . transition ( CdataSection ) ; } else { t . error ( this ) ; t . advanceTransition ( BogusComment ) ; } }
--------------------------------------------------
void read ( Tokeniser t , CharacterReader r ) { String name = r . consumeToAnySorted ( attributeNameCharsSorted ) ; t . tagPending . appendAttributeName ( name ) ; char c = r . consume ( ) ; switch ( c ) { case '\t' : case '\n' : case '\r' : case '\f' : case ' ' : t . transition ( AfterAttributeName ) ; break ; case '/' : t . transition ( SelfClosingStartTag ) ; break ; case '=' : t . transition ( BeforeAttributeValue ) ; break ; case '>' : t . emitTagPending ( ) ; t . transition ( Data ) ; break ; case nullChar : t . error ( this ) ; t . tagPending . appendAttributeName ( replacementChar ) ; break ; case eof : t . eofError ( this ) ; t . transition ( Data ) ; break ; case '"' : case ''' : case '<' : t . error ( this ) ; t . tagPending . appendAttributeName ( c ) ; break ; default : t . tagPending . appendAttributeName ( c ) ; } }
--------------------------------------------------
private void add ( String key , String value ) { checkCapacity ( size + 1 ) ; keys [ size ] = key ; vals [ size ] = value ; size ++ ; }
--------------------------------------------------
void read ( Tokeniser t , CharacterReader r ) { char c = r . consume ( ) ; switch ( c ) { case '>' : t . emitDoctypePending ( ) ; t . transition ( Data ) ; break ; case eof : t . emitDoctypePending ( ) ; t . transition ( Data ) ; break ; default : break ; } }
--------------------------------------------------
void read ( Tokeniser t , CharacterReader r ) { if ( r . matches ( '/' ) ) { t . createTempBuffer ( ) ; t . advanceTransition ( RawtextEndTagOpen ) ; } else { t . emit ( '<' ) ; t . transition ( Rawtext ) ; } }
--------------------------------------------------
void read ( Tokeniser t , CharacterReader r ) { if ( r . matches ( '-' ) ) { t . emit ( '-' ) ; t . advanceTransition ( ScriptDataEscapeStartDash ) ; } else { t . transition ( ScriptData ) ; } }
--------------------------------------------------
void read ( Tokeniser t , CharacterReader r ) { char c = r . current ( ) ; switch ( c ) { case '-' : t . emit ( c ) ; t . advanceTransition ( ScriptDataDoubleEscapedDash ) ; break ; case '<' : t . emit ( c ) ; t . advanceTransition ( ScriptDataDoubleEscapedLessthanSign ) ; break ; case nullChar : t . error ( this ) ; r . advance ( ) ; t . emit ( replacementChar ) ; break ; case eof : t . eofError ( this ) ; t . transition ( Data ) ; break ; default : String data = r . consumeToAny ( '-' , '<' , nullChar ) ; t . emit ( data ) ; } }
--------------------------------------------------
void read ( Tokeniser t , CharacterReader r ) { if ( r . matchesLetter ( ) ) { t . createTempBuffer ( ) ; t . dataBuffer . append ( r . current ( ) ) ; t . emit ( "<" + r . current ( ) ) ; t . advanceTransition ( ScriptDataDoubleEscapeStart ) ; } else if ( r . matches ( '/' ) ) { t . createTempBuffer ( ) ; t . advanceTransition ( ScriptDataEscapedEndTagOpen ) ; } else { t . emit ( '<' ) ; t . transition ( ScriptDataEscaped ) ; } }
--------------------------------------------------
