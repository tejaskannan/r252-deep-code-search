void read ( Tokeniser t , CharacterReader r ) { if ( r . matchesLetter ( ) ) { t . createDoctypePending ( ) ; t . transition ( DoctypeName ) ; return ; } char c = r . consume ( ) ; switch ( c ) { case '\t' : case '\n' : case '\r' : case '\f' : case ' ' : break ; case nullChar : t . error ( this ) ; t . createDoctypePending ( ) ; t . doctypePending . name . append ( replacementChar ) ; t . transition ( DoctypeName ) ; break ; case eof : t . eofError ( this ) ; t . createDoctypePending ( ) ; t . doctypePending . forceQuirks = true ; t . emitDoctypePending ( ) ; t . transition ( Data ) ; break ; default : t . createDoctypePending ( ) ; t . doctypePending . name . append ( c ) ; t . transition ( DoctypeName ) ; } }
--------------------------------------------------
void read ( Tokeniser t , CharacterReader r ) { String name = r . consumeToAnySorted ( attributeNameCharsSorted ) ; t . tagPending . appendAttributeName ( name ) ; char c = r . consume ( ) ; switch ( c ) { case '\t' : case '\n' : case '\r' : case '\f' : case ' ' : t . transition ( AfterAttributeName ) ; break ; case '/' : t . transition ( SelfClosingStartTag ) ; break ; case '=' : t . transition ( BeforeAttributeValue ) ; break ; case '>' : t . emitTagPending ( ) ; t . transition ( Data ) ; break ; case nullChar : t . error ( this ) ; t . tagPending . appendAttributeName ( replacementChar ) ; break ; case eof : t . eofError ( this ) ; t . transition ( Data ) ; break ; case '"' : case ''' : case '<' : t . error ( this ) ; t . tagPending . appendAttributeName ( c ) ; break ; default : t . tagPending . appendAttributeName ( c ) ; } }
--------------------------------------------------
void read ( Tokeniser t , CharacterReader r ) { char c = r . consume ( ) ; switch ( c ) { case '\t' : case '\n' : case '\r' : case '\f' : case ' ' : t . transition ( BeforeDoctypeName ) ; break ; case eof : t . eofError ( this ) ; case '>' : t . error ( this ) ; t . createDoctypePending ( ) ; t . doctypePending . forceQuirks = true ; t . emitDoctypePending ( ) ; t . transition ( Data ) ; break ; default : t . error ( this ) ; t . transition ( BeforeDoctypeName ) ; } }
--------------------------------------------------
void read ( Tokeniser t , CharacterReader r ) { if ( r . matchesLetter ( ) ) { String name = r . consumeLetterSequence ( ) ; t . doctypePending . name . append ( name ) ; return ; } char c = r . consume ( ) ; switch ( c ) { case '>' : t . emitDoctypePending ( ) ; t . transition ( Data ) ; break ; case '\t' : case '\n' : case '\r' : case '\f' : case ' ' : t . transition ( AfterDoctypeName ) ; break ; case nullChar : t . error ( this ) ; t . doctypePending . name . append ( replacementChar ) ; break ; case eof : t . eofError ( this ) ; t . doctypePending . forceQuirks = true ; t . emitDoctypePending ( ) ; t . transition ( Data ) ; break ; default : t . doctypePending . name . append ( c ) ; } }
--------------------------------------------------
void read ( Tokeniser t , CharacterReader r ) { String value = r . consumeToAnySorted ( attributeValueUnquoted ) ; if ( value . length ( ) > 0 ) t . tagPending . appendAttributeValue ( value ) ; char c = r . consume ( ) ; switch ( c ) { case '\t' : case '\n' : case '\r' : case '\f' : case ' ' : t . transition ( BeforeAttributeName ) ; break ; case '&' : int [ ] ref = t . consumeCharacterReference ( '>' , true ) ; if ( ref != null ) t . tagPending . appendAttributeValue ( ref ) ; else t . tagPending . appendAttributeValue ( '&' ) ; break ; case '>' : t . emitTagPending ( ) ; t . transition ( Data ) ; break ; case nullChar : t . error ( this ) ; t . tagPending . appendAttributeValue ( replacementChar ) ; break ; case eof : t . eofError ( this ) ; t . transition ( Data ) ; break ; case '"' : case ''' : case '<' : case '=' : case '`' : t . error ( this ) ; t . tagPending . appendAttributeValue ( c ) ; break ; default : t . tagPending . appendAttributeValue ( c ) ; } }
--------------------------------------------------
void read ( Tokeniser t , CharacterReader r ) { String tagName = r . consumeTagName ( ) ; t . tagPending . appendTagName ( tagName ) ; char c = r . consume ( ) ; switch ( c ) { case '\t' : case '\n' : case '\r' : case '\f' : case ' ' : t . transition ( BeforeAttributeName ) ; break ; case '/' : t . transition ( SelfClosingStartTag ) ; break ; case '<' : t . error ( this ) ; r . unconsume ( ) ; case '>' : t . emitTagPending ( ) ; t . transition ( Data ) ; break ; case nullChar : t . tagPending . appendTagName ( replacementStr ) ; break ; case eof : t . eofError ( this ) ; t . transition ( Data ) ; break ; default : t . tagPending . appendTagName ( c ) ; } }
--------------------------------------------------
void read ( Tokeniser t , CharacterReader r ) { char c = r . consume ( ) ; switch ( c ) { case '\t' : case '\n' : case '\r' : case '\f' : case ' ' : break ; case '/' : t . transition ( SelfClosingStartTag ) ; break ; case '<' : t . error ( this ) ; r . unconsume ( ) ; case '>' : t . emitTagPending ( ) ; t . transition ( Data ) ; break ; case nullChar : t . error ( this ) ; t . tagPending . newAttribute ( ) ; r . unconsume ( ) ; t . transition ( AttributeName ) ; break ; case eof : t . eofError ( this ) ; t . transition ( Data ) ; break ; case '"' : case ''' : case '=' : t . error ( this ) ; t . tagPending . newAttribute ( ) ; t . tagPending . appendAttributeName ( c ) ; t . transition ( AttributeName ) ; break ; default : t . tagPending . newAttribute ( ) ; r . unconsume ( ) ; t . transition ( AttributeName ) ; } }
--------------------------------------------------
void read ( Tokeniser t , CharacterReader r ) { if ( r . matchConsume ( "--" ) ) { t . createCommentPending ( ) ; t . transition ( CommentStart ) ; } else if ( r . matchConsumeIgnoreCase ( "doctype" ) ) { t . transition ( Doctype ) ; } else if ( r . matchConsume ( "[cdata[" ) ) { t . createTempBuffer ( ) ; t . transition ( CdataSection ) ; } else { t . error ( this ) ; t . advanceTransition ( BogusComment ) ; } }
--------------------------------------------------
void read ( Tokeniser t , CharacterReader r ) { String value = r . consumeToAny ( attributeDoubleValueCharsSorted ) ; if ( value . length ( ) > 0 ) t . tagPending . appendAttributeValue ( value ) ; else t . tagPending . setEmptyAttributeValue ( ) ; char c = r . consume ( ) ; switch ( c ) { case '"' : t . transition ( AfterAttributeValue_quoted ) ; break ; case '&' : int [ ] ref = t . consumeCharacterReference ( '"' , true ) ; if ( ref != null ) t . tagPending . appendAttributeValue ( ref ) ; else t . tagPending . appendAttributeValue ( '&' ) ; break ; case nullChar : t . error ( this ) ; t . tagPending . appendAttributeValue ( replacementChar ) ; break ; case eof : t . eofError ( this ) ; t . transition ( Data ) ; break ; default : t . tagPending . appendAttributeValue ( c ) ; } }
--------------------------------------------------
void read ( Tokeniser t , CharacterReader r ) { char c = r . consume ( ) ; switch ( c ) { case '"' : t . transition ( AfterDoctypePublicIdentifier ) ; break ; case nullChar : t . error ( this ) ; t . doctypePending . publicIdentifier . append ( replacementChar ) ; break ; case '>' : t . error ( this ) ; t . doctypePending . forceQuirks = true ; t . emitDoctypePending ( ) ; t . transition ( Data ) ; break ; case eof : t . eofError ( this ) ; t . doctypePending . forceQuirks = true ; t . emitDoctypePending ( ) ; t . transition ( Data ) ; break ; default : t . doctypePending . publicIdentifier . append ( c ) ; } }
--------------------------------------------------
