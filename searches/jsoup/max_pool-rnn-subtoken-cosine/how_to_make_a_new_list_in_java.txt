private boolean inSpecificScope ( String [ ] targetNames , String [ ] baseTypes , String [ ] extraTypes ) { final int bottom = stack . size ( ) - 1 ; final int top = bottom > MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0 ; for ( int pos = bottom ; pos >= top ; pos -- ) { final String elName = stack . get ( pos ) . normalName ( ) ; if ( inSorted ( elName , targetNames ) ) return true ; if ( inSorted ( elName , baseTypes ) ) return false ; if ( extraTypes != null && inSorted ( elName , extraTypes ) ) return false ; } return false ; }
--------------------------------------------------
private boolean anythingElse ( Token t , HtmlTreeBuilder tb ) { tb . insertStartTag ( "html" ) ; tb . transition ( BeforeHead ) ; return tb . process ( t ) ; }
--------------------------------------------------
public CharacterReader ( Reader input , int sz ) { Validate . notNull ( input ) ; Validate . isTrue ( input . markSupported ( ) ) ; reader = input ; charBuf = new char [ sz > maxBufferLen ? maxBufferLen : sz ] ; bufferUp ( ) ; }
--------------------------------------------------
private boolean inSpecificScope ( String targetName , String [ ] baseTypes , String [ ] extraTypes ) { specificScopeTarget [ 0 ] = targetName ; return inSpecificScope ( specificScopeTarget , baseTypes , extraTypes ) ; }
--------------------------------------------------
void insertInFosterParent ( Node in ) { Element fosterParent ; Element lastTable = getFromStack ( "table" ) ; boolean isLastTableParent = false ; if ( lastTable != null ) { if ( lastTable . parent ( ) != null ) { fosterParent = lastTable . parent ( ) ; isLastTableParent = true ; } else fosterParent = aboveOnStack ( lastTable ) ; } else { fosterParent = stack . get ( 0 ) ; } if ( isLastTableParent ) { Validate . notNull ( lastTable ) ; lastTable . before ( in ) ; } else fosterParent . appendChild ( in ) ; }
--------------------------------------------------
static void crossStreams ( final InputStream in , final OutputStream out ) throws IOException { final byte [ ] buffer = new byte [ bufferSize ] ; int len ; while ( ( len = in . read ( buffer ) ) != - 1 ) { out . write ( buffer , 0 , len ) ; } }
--------------------------------------------------
private List < Element > childElementsList ( ) { List < Element > children ; if ( shadowChildrenRef == null || ( children = shadowChildrenRef . get ( ) ) == null ) { final int size = childNodes . size ( ) ; children = new ArrayList < > ( size ) ; for ( int i = 0 ; i < size ; i ++ ) { final Node node = childNodes . get ( i ) ; if ( node instanceof Element ) children . add ( ( Element ) node ) ; } shadowChildrenRef = new WeakReference < > ( children ) ; } return children ; }
--------------------------------------------------
private boolean anythingElse ( Token t , TreeBuilder tb ) { boolean processed = tb . processEndTag ( "colgroup" ) ; if ( processed ) return tb . process ( t ) ; return true ; }
--------------------------------------------------
void maybeSetBaseUri ( Element base ) { if ( baseUriSetFromDoc ) return ; String href = base . absUrl ( "href" ) ; if ( href . length ( ) != 0 ) { baseUri = href ; baseUriSetFromDoc = true ; doc . setBaseUri ( href ) ; } }
--------------------------------------------------
void clearFormattingElementsToLastMarker ( ) { while ( ! formattingElements . isEmpty ( ) ) { Element el = removeLastFormattingElement ( ) ; if ( el == null ) break ; } }
--------------------------------------------------
