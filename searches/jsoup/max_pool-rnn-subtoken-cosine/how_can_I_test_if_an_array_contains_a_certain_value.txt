public CharacterReader ( Reader input , int sz ) { Validate . notNull ( input ) ; Validate . isTrue ( input . markSupported ( ) ) ; reader = input ; charBuf = new char [ sz > maxBufferLen ? maxBufferLen : sz ] ; bufferUp ( ) ; }
--------------------------------------------------
boolean anyOtherEndTag ( Token t , HtmlTreeBuilder tb ) { String name = t . asEndTag ( ) . normalName ; ArrayList < Element > stack = tb . getStack ( ) ; for ( int pos = stack . size ( ) - 1 ; pos >= 0 ; pos -- ) { Element node = stack . get ( pos ) ; if ( node . normalName ( ) . equals ( name ) ) { tb . generateImpliedEndTags ( name ) ; if ( ! name . equals ( tb . currentElement ( ) . normalName ( ) ) ) tb . error ( this ) ; tb . popStackToClose ( name ) ; break ; } else { if ( tb . isSpecial ( node ) ) { tb . error ( this ) ; return false ; } } } return true ; }
--------------------------------------------------
public static void appendNormalisedWhitespace ( StringBuilder accum , String string , boolean stripLeading ) { boolean lastWasWhite = false ; boolean reachedNonWhite = false ; int len = string . length ( ) ; int c ; for ( int i = 0 ; i < len ; i += Character . charCount ( c ) ) { c = string . codePointAt ( i ) ; if ( isActuallyWhitespace ( c ) ) { if ( ( stripLeading && ! reachedNonWhite ) || lastWasWhite ) continue ; accum . append ( ' ' ) ; lastWasWhite = true ; } else if ( ! isInvisibleChar ( c ) ) { accum . appendCodePoint ( c ) ; lastWasWhite = false ; reachedNonWhite = true ; } } }
--------------------------------------------------
public Parser ( TreeBuilder treeBuilder ) { this . treeBuilder = treeBuilder ; settings = treeBuilder . defaultSettings ( ) ; errors = ParseErrorList . noTracking ( ) ; }
--------------------------------------------------
public String consumeToIgnoreCase ( String seq ) { int start = pos ; String first = seq . substring ( 0 , 1 ) ; boolean canScan = first . toLowerCase ( ) . equals ( first . toUpperCase ( ) ) ; while ( ! isEmpty ( ) ) { if ( matches ( seq ) ) break ; if ( canScan ) { int skip = queue . indexOf ( first , pos ) - pos ; if ( skip == 0 ) pos ++ ; else if ( skip < 0 ) pos = queue . length ( ) ; else pos += skip ; } else pos ++ ; } return queue . substring ( start , pos ) ; }
--------------------------------------------------
final void appendAttributeValue ( int [ ] appendCodepoints ) { ensureAttributeValue ( ) ; for ( int codepoint : appendCodepoints ) { pendingAttributeValue . appendCodePoint ( codepoint ) ; } }
--------------------------------------------------
private boolean testValidProtocol ( Element el , Attribute attr , Set < Protocol > protocols ) { String value = el . absUrl ( attr . getKey ( ) ) ; if ( value . length ( ) == 0 ) value = attr . getValue ( ) ; if ( ! preserveRelativeLinks ) attr . setValue ( value ) ; for ( Protocol protocol : protocols ) { String prot = protocol . toString ( ) ; if ( prot . equals ( "#" ) ) { if ( isValidAnchor ( value ) ) { return true ; } else { continue ; } } prot += ":" ; if ( lowerCase ( value ) . startsWith ( prot ) ) { return true ; } } return false ; }
--------------------------------------------------
private boolean exitTableBody ( Token t , HtmlTreeBuilder tb ) { if ( ! ( tb . inTableScope ( "tbody" ) || tb . inTableScope ( "thead" ) || tb . inScope ( "tfoot" ) ) ) { tb . error ( this ) ; return false ; } tb . clearStackToTableBodyContext ( ) ; tb . processEndTag ( tb . currentElement ( ) . normalName ( ) ) ; return tb . process ( t ) ; }
--------------------------------------------------
Element insertEmpty ( Token . StartTag startTag ) { Tag tag = Tag . valueOf ( startTag . name ( ) , settings ) ; Element el = new Element ( tag , baseUri , startTag . attributes ) ; insertNode ( el ) ; if ( startTag . isSelfClosing ( ) ) { if ( tag . isKnownTag ( ) ) { if ( ! tag . isEmpty ( ) ) tokeniser . error ( "tag cannot be self closing; not a void tag" ) ; } else tag . setSelfClosing ( ) ; } return el ; }
--------------------------------------------------
int nextIndexOf ( CharSequence seq ) { bufferUp ( ) ; char startChar = seq . charAt ( 0 ) ; for ( int offset = bufPos ; offset < bufLength ; offset ++ ) { if ( startChar != charBuf [ offset ] ) while ( ++ offset < bufLength && startChar != charBuf [ offset ] ) { } int i = offset + 1 ; int last = i + seq . length ( ) - 1 ; if ( offset < bufLength && last <= bufLength ) { for ( int j = 1 ; i < last && seq . charAt ( j ) == charBuf [ i ] ; i ++ , j ++ ) { } if ( i == last ) return offset - bufPos ; } } return - 1 ; }
--------------------------------------------------
