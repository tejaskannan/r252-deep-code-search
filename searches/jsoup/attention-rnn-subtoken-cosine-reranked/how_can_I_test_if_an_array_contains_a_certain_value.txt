private boolean testValidProtocol ( Element el , Attribute attr , Set < Protocol > protocols ) { String value = el . absUrl ( attr . getKey ( ) ) ; if ( value . length ( ) == 0 ) value = attr . getValue ( ) ; if ( ! preserveRelativeLinks ) attr . setValue ( value ) ; for ( Protocol protocol : protocols ) { String prot = protocol . toString ( ) ; if ( prot . equals ( "#" ) ) { if ( isValidAnchor ( value ) ) { return true ; } else { continue ; } } prot += ":" ; if ( lowerCase ( value ) . startsWith ( prot ) ) { return true ; } } return false ; }
--------------------------------------------------
FormElement insertForm ( Token . StartTag startTag , boolean onStack ) { Tag tag = Tag . valueOf ( startTag . name ( ) , settings ) ; FormElement el = new FormElement ( tag , baseUri , startTag . attributes ) ; setFormElement ( el ) ; insertNode ( el ) ; if ( onStack ) stack . add ( el ) ; return el ; }
--------------------------------------------------
private void ensureAttributes ( ) { if ( ! hasAttributes ( ) ) { Object coreValue = value ; Attributes attributes = new Attributes ( ) ; value = attributes ; if ( coreValue != null ) attributes . put ( nodeName ( ) , ( String ) coreValue ) ; } }
--------------------------------------------------
public XmlDeclaration ( String name , boolean isProcessingInstruction ) { Validate . notNull ( name ) ; value = name ; this . isProcessingInstruction = isProcessingInstruction ; }
--------------------------------------------------
public List < String > eachText ( ) { ArrayList < String > texts = new ArrayList < > ( size ( ) ) ; for ( Element el : this ) { if ( el . hasText ( ) ) texts . add ( el . text ( ) ) ; } return texts ; }
--------------------------------------------------
public TextNode text ( String text ) { coreValue ( text ) ; return this ; }
--------------------------------------------------
Element insertStartTag ( String startTagName ) { Element el = new Element ( Tag . valueOf ( startTagName , settings ) , baseUri ) ; insert ( el ) ; return el ; }
--------------------------------------------------
public Elements val ( String value ) { for ( Element element : this ) element . val ( value ) ; return this ; }
--------------------------------------------------
public Element val ( String value ) { if ( tagName ( ) . equals ( "textarea" ) ) text ( value ) ; else attr ( "value" , value ) ; return this ; }
--------------------------------------------------
private void ensureAttributeValue ( ) { hasPendingAttributeValue = true ; if ( pendingAttributeValueS != null ) { pendingAttributeValue . append ( pendingAttributeValueS ) ; pendingAttributeValueS = null ; } }
--------------------------------------------------
