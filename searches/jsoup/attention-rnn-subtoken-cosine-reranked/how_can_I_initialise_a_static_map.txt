public Connection cookies ( Map < String , String > cookies ) { Validate . notNull ( cookies , "cookie map must not be null" ) ; for ( Map . Entry < String , String > entry : cookies . entrySet ( ) ) { req . cookie ( entry . getKey ( ) , entry . getValue ( ) ) ; } return this ; }
--------------------------------------------------
public Connection headers ( Map < String , String > headers ) { Validate . notNull ( headers , "header map must not be null" ) ; for ( Map . Entry < String , String > entry : headers . entrySet ( ) ) { req . header ( entry . getKey ( ) , entry . getValue ( ) ) ; } return this ; }
--------------------------------------------------
FormElement insertForm ( Token . StartTag startTag , boolean onStack ) { Tag tag = Tag . valueOf ( startTag . name ( ) , settings ) ; FormElement el = new FormElement ( tag , baseUri , startTag . attributes ) ; setFormElement ( el ) ; insertNode ( el ) ; if ( onStack ) stack . add ( el ) ; return el ; }
--------------------------------------------------
private Base ( ) { headers = new LinkedHashMap < > ( ) ; cookies = new LinkedHashMap < > ( ) ; }
--------------------------------------------------
Attributes getEnforcedAttributes ( String tagName ) { Attributes attrs = new Attributes ( ) ; TagName tag = TagName . valueOf ( tagName ) ; if ( enforcedAttributes . containsKey ( tag ) ) { Map < AttributeKey , AttributeValue > keyVals = enforcedAttributes . get ( tag ) ; for ( Map . Entry < AttributeKey , AttributeValue > entry : keyVals . entrySet ( ) ) { attrs . put ( entry . getKey ( ) . toString ( ) , entry . getValue ( ) . toString ( ) ) ; } } return attrs ; }
--------------------------------------------------
public Whitelist ( ) { tagNames = new HashSet < > ( ) ; attributes = new HashMap < > ( ) ; enforcedAttributes = new HashMap < > ( ) ; protocols = new HashMap < > ( ) ; preserveRelativeLinks = false ; }
--------------------------------------------------
public Connection data ( Map < String , String > data ) { Validate . notNull ( data , "data map must not be null" ) ; for ( Map . Entry < String , String > entry : data . entrySet ( ) ) { req . data ( KeyVal . create ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } return this ; }
--------------------------------------------------
public XmlDeclaration ( String name , boolean isProcessingInstruction ) { Validate . notNull ( name ) ; value = name ; this . isProcessingInstruction = isProcessingInstruction ; }
--------------------------------------------------
Element insertStartTag ( String startTagName ) { Element el = new Element ( Tag . valueOf ( startTagName , settings ) , baseUri ) ; insert ( el ) ; return el ; }
--------------------------------------------------
private List < String > getHeadersCaseInsensitive ( String name ) { Validate . notNull ( name ) ; for ( Map . Entry < String , List < String >> entry : headers . entrySet ( ) ) { if ( name . equalsIgnoreCase ( entry . getKey ( ) ) ) return entry . getValue ( ) ; } return Collections . emptyList ( ) ; }
--------------------------------------------------
