private void checkCapacity ( int minNewSize ) { Validate . isTrue ( minNewSize >= size ) ; int curSize = keys . length ; if ( curSize >= minNewSize ) return ; int newSize = curSize >= InitialCapacity ? size * GrowthFactor : InitialCapacity ; if ( minNewSize > newSize ) newSize = minNewSize ; keys = copyOf ( keys , newSize ) ; vals = copyOf ( vals , newSize ) ; }
--------------------------------------------------
public Element lastElementSibling ( ) { List < Element > siblings = parent ( ) . childElementsList ( ) ; return siblings . size ( ) > 1 ? siblings . get ( siblings . size ( ) - 1 ) : null ; }
--------------------------------------------------
public Element firstElementSibling ( ) { List < Element > siblings = parent ( ) . childElementsList ( ) ; return siblings . size ( ) > 1 ? siblings . get ( 0 ) : null ; }
--------------------------------------------------
public Element nextElementSibling ( ) { if ( parentNode == null ) return null ; List < Element > siblings = parent ( ) . childElementsList ( ) ; Integer index = indexInList ( this , siblings ) ; Validate . notNull ( index ) ; if ( siblings . size ( ) > index + 1 ) return siblings . get ( index + 1 ) ; else return null ; }
--------------------------------------------------
public boolean isValid ( Document dirtyDocument ) { Validate . notNull ( dirtyDocument ) ; Document clean = Document . createShell ( dirtyDocument . baseUri ( ) ) ; int numDiscarded = copySafeNodes ( dirtyDocument . body ( ) , clean . body ( ) ) ; return numDiscarded == 0 && dirtyDocument . head ( ) . childNodes ( ) . size ( ) == 0 ; }
--------------------------------------------------
public Connection data ( String ... keyvals ) { Validate . notNull ( keyvals , "data key value pairs must not be null" ) ; Validate . isTrue ( keyvals . length % 2 == 0 , "must supply an even number of key value pairs" ) ; for ( int i = 0 ; i < keyvals . length ; i += 2 ) { String key = keyvals [ i ] ; String value = keyvals [ i + 1 ] ; Validate . notEmpty ( key , "data key must not be empty" ) ; Validate . notNull ( value , "data value must not be null" ) ; req . data ( KeyVal . create ( key , value ) ) ; } return this ; }
--------------------------------------------------
public Elements parents ( ) { Elements parents = new Elements ( ) ; accumulateParents ( this , parents ) ; return parents ; }
--------------------------------------------------
public static void main ( String [ ] args ) throws IOException { Validate . isTrue ( args . length == 1 , "usage: supply url to fetch" ) ; String url = args [ 0 ] ; print ( "fetching %s..." , url ) ; Document doc = Jsoup . connect ( url ) . get ( ) ; Elements links = doc . select ( "a[href]" ) ; Elements media = doc . select ( "[src]" ) ; Elements imports = doc . select ( "link[href]" ) ; print ( "
media: (%d)" , media . size ( ) ) ; for ( Element src : media ) { if ( src . tagName ( ) . equals ( "img" ) ) print ( " * %s: <%s> %sx%s (%s)" , src . tagName ( ) , src . attr ( "abs:src" ) , src . attr ( "width" ) , src . attr ( "height" ) , trim ( src . attr ( "alt" ) , 20 ) ) ; else print ( " * %s: <%s>" , src . tagName ( ) , src . attr ( "abs:src" ) ) ; } print ( "
imports: (%d)" , imports . size ( ) ) ; for ( Element link : imports ) { print ( " * %s <%s> (%s)" , link . tagName ( ) , link . attr ( "abs:href" ) , link . attr ( "rel" ) ) ; } print ( "
links: (%d)" , links . size ( ) ) ; for ( Element link : links ) { print ( " * a: <%s>  (%s)" , link . attr ( "abs:href" ) , trim ( link . text ( ) , 35 ) ) ; } }
--------------------------------------------------
public static void main ( String [ ] args ) throws IOException { Document doc = Jsoup . connect ( "http://en.wikipedia.org/" ) . get ( ) ; log ( doc . title ( ) ) ; Elements newsHeadlines = doc . select ( "#mp-itn b a" ) ; for ( Element headline : newsHeadlines ) { log ( "%s
	%s" , headline . attr ( "title" ) , headline . absUrl ( "href" ) ) ; } }
--------------------------------------------------
public Connection data ( String key , String value ) { req . data ( KeyVal . create ( key , value ) ) ; return this ; }
--------------------------------------------------
