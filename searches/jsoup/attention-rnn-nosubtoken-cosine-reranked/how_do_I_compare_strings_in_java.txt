public String attr ( String key ) { Validate . notNull ( key ) ; if ( ! hasAttributes ( ) ) { return key . equals ( nodeName ( ) ) ? ( String ) value : EmptyString ; } return super . attr ( key ) ; }
--------------------------------------------------
public boolean equals ( Object obj ) { if ( this == obj ) return true ; if ( obj == null ) return false ; if ( getClass ( ) != obj . getClass ( ) ) return false ; TypedValue other = ( TypedValue ) obj ; if ( value == null ) { return other . value == null ; } else return value . equals ( other . value ) ; }
--------------------------------------------------
public Node attr ( String key , String value ) { if ( ! hasAttributes ( ) && key . equals ( nodeName ( ) ) ) { this . value = value ; } else { ensureAttributes ( ) ; super . attr ( key , value ) ; } return this ; }
--------------------------------------------------
int nextIndexOf ( char c ) { bufferUp ( ) ; for ( int i = bufPos ; i < bufLength ; i ++ ) { if ( c == charBuf [ i ] ) return i - bufPos ; } return - 1 ; }
--------------------------------------------------
static void crossStreams ( final InputStream in , final OutputStream out ) throws IOException { final byte [ ] buffer = new byte [ bufferSize ] ; int len ; while ( ( len = in . read ( buffer ) ) != - 1 ) { out . write ( buffer , 0 , len ) ; } }
--------------------------------------------------
public Connection data ( Map < String , String > data ) { Validate . notNull ( data , "data map must not be null" ) ; for ( Map . Entry < String , String > entry : data . entrySet ( ) ) { req . data ( KeyVal . create ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } return this ; }
--------------------------------------------------
public int hashCode ( ) { final int prime = 31 ; int result = 1 ; result = prime * result + ( ( value == null ) ? 0 : value . hashCode ( ) ) ; return result ; }
--------------------------------------------------
public Connection data ( String ... keyvals ) { Validate . notNull ( keyvals , "data key value pairs must not be null" ) ; Validate . isTrue ( keyvals . length % 2 == 0 , "must supply an even number of key value pairs" ) ; for ( int i = 0 ; i < keyvals . length ; i += 2 ) { String key = keyvals [ i ] ; String value = keyvals [ i + 1 ] ; Validate . notEmpty ( key , "data key must not be empty" ) ; Validate . notNull ( value , "data value must not be null" ) ; req . data ( KeyVal . create ( key , value ) ) ; } return this ; }
--------------------------------------------------
public boolean retainAll ( Collection < ? > c ) { onContentsChanged ( ) ; return super . retainAll ( c ) ; }
--------------------------------------------------
int indexOfKey ( String key ) { Validate . notNull ( key ) ; for ( int i = 0 ; i < size ; i ++ ) { if ( key . equals ( keys [ i ] ) ) return i ; } return NotFound ; }
--------------------------------------------------
