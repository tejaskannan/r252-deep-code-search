private void copyAttributes ( org . jsoup . nodes . Node source , Element el ) { for ( Attribute attribute : source . attributes ( ) ) { String key = attribute . getKey ( ) . replaceAll ( "[^-a-za-z0-9_:.]" , "" ) ; if ( key . matches ( "[a-za-z_:][-a-za-z0-9_:.]*" ) ) el . setAttribute ( key , attribute . getValue ( ) ) ; } }
--------------------------------------------------
public static void noNullElements ( Object [ ] objects , String msg ) { for ( Object obj : objects ) if ( obj == null ) throw new IllegalArgumentException ( msg ) ; }
--------------------------------------------------
private void ensureAttributes ( ) { if ( ! hasAttributes ( ) ) { Object coreValue = value ; Attributes attributes = new Attributes ( ) ; value = attributes ; if ( coreValue != null ) attributes . put ( nodeName ( ) , ( String ) coreValue ) ; } }
--------------------------------------------------
public Node attr ( String key , String value ) { if ( ! hasAttributes ( ) && key . equals ( nodeName ( ) ) ) { this . value = value ; } else { ensureAttributes ( ) ; super . attr ( key , value ) ; } return this ; }
--------------------------------------------------
public String attr ( String key ) { Validate . notNull ( key ) ; if ( ! hasAttributes ( ) ) { return key . equals ( nodeName ( ) ) ? ( String ) value : EmptyString ; } return super . attr ( key ) ; }
--------------------------------------------------
public Node attr ( String attributeKey , String attributeValue ) { attributeKey = NodeUtils . parser ( this ) . settings ( ) . normalizeAttribute ( attributeKey ) ; attributes ( ) . putIgnoreCase ( attributeKey , attributeValue ) ; return this ; }
--------------------------------------------------
public Elements attr ( String attributeKey , String attributeValue ) { for ( Element element : this ) { element . attr ( attributeKey , attributeValue ) ; } return this ; }
--------------------------------------------------
public Element attr ( String attributeKey , String attributeValue ) { super . attr ( attributeKey , attributeValue ) ; return this ; }
--------------------------------------------------
public Element attr ( String attributeKey , boolean attributeValue ) { attributes ( ) . put ( attributeKey , attributeValue ) ; return this ; }
--------------------------------------------------
public Attributes clone ( ) { Attributes clone ; try { clone = ( Attributes ) super . clone ( ) ; } catch ( CloneNotSupportedException e ) { throw new RuntimeException ( e ) ; } clone . size = size ; keys = copyOf ( keys , size ) ; vals = copyOf ( vals , size ) ; return clone ; }
--------------------------------------------------
