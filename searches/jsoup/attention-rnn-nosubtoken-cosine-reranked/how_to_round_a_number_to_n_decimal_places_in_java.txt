public static boolean isInvisibleChar ( int c ) { return Character . getType ( c ) == 16 && ( c == 8203 || c == 8204 || c == 8205 || c == 173 ) ; }
--------------------------------------------------
public void head ( Node node , int depth ) { if ( node instanceof TextNode ) { TextNode textNode = ( TextNode ) node ; accum . append ( textNode . getWholeText ( ) ) ; } }
--------------------------------------------------
private void checkCapacity ( int minNewSize ) { Validate . isTrue ( minNewSize >= size ) ; int curSize = keys . length ; if ( curSize >= minNewSize ) return ; int newSize = curSize >= InitialCapacity ? size * GrowthFactor : InitialCapacity ; if ( minNewSize > newSize ) newSize = minNewSize ; keys = copyOf ( keys , newSize ) ; vals = copyOf ( vals , newSize ) ; }
--------------------------------------------------
public String data ( ) { StringBuilder sb = StringUtil . borrowBuilder ( ) ; for ( Node childNode : childNodes ) { if ( childNode instanceof DataNode ) { DataNode data = ( DataNode ) childNode ; sb . append ( data . getWholeData ( ) ) ; } else if ( childNode instanceof Comment ) { Comment comment = ( Comment ) childNode ; sb . append ( comment . getData ( ) ) ; } else if ( childNode instanceof Element ) { Element element = ( Element ) childNode ; String elementData = element . data ( ) ; sb . append ( elementData ) ; } else if ( childNode instanceof CDataNode ) { CDataNode cDataNode = ( CDataNode ) childNode ; sb . append ( cDataNode . getWholeText ( ) ) ; } } return StringUtil . releaseBuilder ( sb ) ; }
--------------------------------------------------
protected boolean isBooleanAttribute ( ) { return true ; }
--------------------------------------------------
public static void main ( String [ ] args ) throws IOException { Document doc = Jsoup . connect ( "http://en.wikipedia.org/" ) . get ( ) ; log ( doc . title ( ) ) ; Elements newsHeadlines = doc . select ( "#mp-itn b a" ) ; for ( Element headline : newsHeadlines ) { log ( "%s
	%s" , headline . attr ( "title" ) , headline . absUrl ( "href" ) ) ; } }
--------------------------------------------------
void outerHtmlHead ( Appendable accum , int depth , Document . OutputSettings out ) throws IOException { accum . append ( "<" ) . append ( isProcessingInstruction ? "!" : "?" ) . append ( coreValue ( ) ) ; getWholeDeclaration ( accum , out ) ; accum . append ( isProcessingInstruction ? "!" : "?" ) . append ( ">" ) ; }
--------------------------------------------------
public static void main ( String [ ] args ) throws IOException { Validate . isTrue ( args . length == 1 , "usage: supply url to fetch" ) ; String url = args [ 0 ] ; print ( "fetching %s..." , url ) ; Document doc = Jsoup . connect ( url ) . get ( ) ; Elements links = doc . select ( "a[href]" ) ; Elements media = doc . select ( "[src]" ) ; Elements imports = doc . select ( "link[href]" ) ; print ( "
media: (%d)" , media . size ( ) ) ; for ( Element src : media ) { if ( src . tagName ( ) . equals ( "img" ) ) print ( " * %s: <%s> %sx%s (%s)" , src . tagName ( ) , src . attr ( "abs:src" ) , src . attr ( "width" ) , src . attr ( "height" ) , trim ( src . attr ( "alt" ) , 20 ) ) ; else print ( " * %s: <%s>" , src . tagName ( ) , src . attr ( "abs:src" ) ) ; } print ( "
imports: (%d)" , imports . size ( ) ) ; for ( Element link : imports ) { print ( " * %s <%s> (%s)" , link . tagName ( ) , link . attr ( "abs:href" ) , link . attr ( "rel" ) ) ; } print ( "
links: (%d)" , links . size ( ) ) ; for ( Element link : links ) { print ( " * a: <%s>  (%s)" , link . attr ( "abs:href" ) , trim ( link . text ( ) , 35 ) ) ; } }
--------------------------------------------------
void popStackToBefore ( String elName ) { for ( int pos = stack . size ( ) - 1 ; pos >= 0 ; pos -- ) { Element next = stack . get ( pos ) ; if ( next . normalName ( ) . equals ( elName ) ) { break ; } else { stack . remove ( pos ) ; } } }
--------------------------------------------------
Element removeLastFormattingElement ( ) { int size = formattingElements . size ( ) ; if ( size > 0 ) return formattingElements . remove ( size - 1 ) ; else return null ; }
--------------------------------------------------
