public static URL resolve ( URL base , String relUrl ) throws MalformedURLException { if ( relUrl . startsWith ( "?" ) ) relUrl = base . getPath ( ) + relUrl ; if ( relUrl . indexOf ( '.' ) == 0 && base . getFile ( ) . indexOf ( '/' ) != 0 ) { base = new URL ( base . getProtocol ( ) , base . getHost ( ) , base . getPort ( ) , "/" + base . getFile ( ) ) ; } return new URL ( base , relUrl ) ; }
--------------------------------------------------
public Element val ( String value ) { if ( tagName ( ) . equals ( "textarea" ) ) text ( value ) ; else attr ( "value" , value ) ; return this ; }
--------------------------------------------------
public Elements removeAttr ( String attributeKey ) { for ( Element element : this ) { element . removeAttr ( attributeKey ) ; } return this ; }
--------------------------------------------------
public Node removeAttr ( String key ) { ensureAttributes ( ) ; return super . removeAttr ( key ) ; }
--------------------------------------------------
public Whitelist removeEnforcedAttribute ( String tag , String attribute ) { Validate . notEmpty ( tag ) ; Validate . notEmpty ( attribute ) ; TagName tagName = TagName . valueOf ( tag ) ; if ( tagNames . contains ( tagName ) && enforcedAttributes . containsKey ( tagName ) ) { AttributeKey attrKey = AttributeKey . valueOf ( attribute ) ; Map < AttributeKey , AttributeValue > attrMap = enforcedAttributes . get ( tagName ) ; attrMap . remove ( attrKey ) ; if ( attrMap . isEmpty ( ) ) enforcedAttributes . remove ( tagName ) ; } return this ; }
--------------------------------------------------
final void appendAttributeValue ( char append ) { ensureAttributeValue ( ) ; pendingAttributeValue . append ( append ) ; }
--------------------------------------------------
final void appendAttributeValue ( char [ ] append ) { ensureAttributeValue ( ) ; pendingAttributeValue . append ( append ) ; }
--------------------------------------------------
public Elements val ( String value ) { for ( Element element : this ) element . val ( value ) ; return this ; }
--------------------------------------------------
public boolean hasAttr ( String key ) { ensureAttributes ( ) ; return super . hasAttr ( key ) ; }
--------------------------------------------------
String consumeToEnd ( ) { bufferUp ( ) ; String data = cacheString ( charBuf , stringCache , bufPos , bufLength - bufPos ) ; bufPos = bufLength ; return data ; }
--------------------------------------------------
