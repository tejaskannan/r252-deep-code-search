public Connection cookies ( Map < String , String > cookies ) { Validate . notNull ( cookies , "cookie map must not be null" ) ; for ( Map . Entry < String , String > entry : cookies . entrySet ( ) ) { req . cookie ( entry . getKey ( ) , entry . getValue ( ) ) ; } return this ; }
--------------------------------------------------
private static void writePost ( final Connection . Request req , final OutputStream outputStream , final String bound ) throws IOException { final Collection < Connection . KeyVal > data = req . data ( ) ; final BufferedWriter w = new BufferedWriter ( new OutputStreamWriter ( outputStream , req . postDataCharset ( ) ) ) ; if ( bound != null ) { for ( Connection . KeyVal keyVal : data ) { w . write ( "--" ) ; w . write ( bound ) ; w . write ( "
" ) ; w . write ( "content-disposition: form-data; name="" ) ; w . write ( encodeMimeName ( keyVal . key ( ) ) ) ; w . write ( """ ) ; if ( keyVal . hasInputStream ( ) ) { w . write ( "; filename="" ) ; w . write ( encodeMimeName ( keyVal . value ( ) ) ) ; w . write ( ""
content-type: " ) ; w . write ( keyVal . contentType ( ) != null ? keyVal . contentType ( ) : DefaultUploadType ) ; w . write ( "

" ) ; w . flush ( ) ; DataUtil . crossStreams ( keyVal . inputStream ( ) , outputStream ) ; outputStream . flush ( ) ; } else { w . write ( "

" ) ; w . write ( keyVal . value ( ) ) ; } w . write ( "
" ) ; } w . write ( "--" ) ; w . write ( bound ) ; w . write ( "--" ) ; } else if ( req . requestBody ( ) != null ) { w . write ( req . requestBody ( ) ) ; } else { boolean first = true ; for ( Connection . KeyVal keyVal : data ) { if ( ! first ) w . append ( '&' ) ; else first = false ; w . write ( URLEncoder . encode ( keyVal . key ( ) , req . postDataCharset ( ) ) ) ; w . write ( '=' ) ; w . write ( URLEncoder . encode ( keyVal . value ( ) , req . postDataCharset ( ) ) ) ; } } w . close ( ) ; }
--------------------------------------------------
public Connection data ( String key , String value ) { req . data ( KeyVal . create ( key , value ) ) ; return this ; }
--------------------------------------------------
public DataNode setWholeData ( String data ) { coreValue ( data ) ; return this ; }
--------------------------------------------------
public int hashCode ( ) { final int prime = 31 ; int result = 1 ; result = prime * result + ( ( value == null ) ? 0 : value . hashCode ( ) ) ; return result ; }
--------------------------------------------------
public Elements attr ( String attributeKey , String attributeValue ) { for ( Element element : this ) { element . attr ( attributeKey , attributeValue ) ; } return this ; }
--------------------------------------------------
public Element attr ( String attributeKey , String attributeValue ) { super . attr ( attributeKey , attributeValue ) ; return this ; }
--------------------------------------------------
public Connection data ( String ... keyvals ) { Validate . notNull ( keyvals , "data key value pairs must not be null" ) ; Validate . isTrue ( keyvals . length % 2 == 0 , "must supply an even number of key value pairs" ) ; for ( int i = 0 ; i < keyvals . length ; i += 2 ) { String key = keyvals [ i ] ; String value = keyvals [ i + 1 ] ; Validate . notEmpty ( key , "data key must not be empty" ) ; Validate . notNull ( value , "data value must not be null" ) ; req . data ( KeyVal . create ( key , value ) ) ; } return this ; }
--------------------------------------------------
private void ensureAttributeValue ( ) { hasPendingAttributeValue = true ; if ( pendingAttributeValueS != null ) { pendingAttributeValue . append ( pendingAttributeValueS ) ; pendingAttributeValueS = null ; } }
--------------------------------------------------
public boolean matches ( Element root , Element element ) { return element . hasAttr ( key ) && lowerCase ( element . attr ( key ) ) . endsWith ( value ) ; }
--------------------------------------------------
