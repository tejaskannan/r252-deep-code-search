public String toString ( ) { return super . toString ( ) + ". mimetype=" + mimeType + ", url=" + url ; }
--------------------------------------------------
static void crossStreams ( final InputStream in , final OutputStream out ) throws IOException { final byte [ ] buffer = new byte [ bufferSize ] ; int len ; while ( ( len = in . read ( buffer ) ) != - 1 ) { out . write ( buffer , 0 , len ) ; } }
--------------------------------------------------
public String toString ( ) { return queue . substring ( pos ) ; }
--------------------------------------------------
public void clear ( ) { onContentsChanged ( ) ; super . clear ( ) ; }
--------------------------------------------------
public String toString ( ) { return String . format ( ".%s" , className ) ; }
--------------------------------------------------
public E set ( int index , E element ) { onContentsChanged ( ) ; return super . set ( index , element ) ; }
--------------------------------------------------
public String toString ( ) { if ( a == 0 ) return String . format ( ":%s(%d)" , getPseudoClass ( ) , b ) ; if ( b == 0 ) return String . format ( ":%s(%dn)" , getPseudoClass ( ) , a ) ; return String . format ( ":%s(%dn%+d)" , getPseudoClass ( ) , a , b ) ; }
--------------------------------------------------
public Parser setTreeBuilder ( TreeBuilder treeBuilder ) { this . treeBuilder = treeBuilder ; treeBuilder . parser = this ; return this ; }
--------------------------------------------------
public String toString ( ) { return String . format ( "[%s^=%s]" , key , value ) ; }
--------------------------------------------------
public String toString ( ) { return String . format ( "[%s=%s]" , key , value ) ; }
--------------------------------------------------
