void mark ( ) { bufSplitPoint = 0 ; bufferUp ( ) ; bufMark = bufPos ; }
--------------------------------------------------
public String toString ( ) { return super . toString ( ) + ". mimetype=" + mimeType + ", url=" + url ; }
--------------------------------------------------
static String mimeBoundary ( ) { final StringBuilder mime = StringUtil . borrowBuilder ( ) ; final Random rand = new Random ( ) ; for ( int i = 0 ; i < boundaryLength ; i ++ ) { mime . append ( mimeBoundaryChars [ rand . nextInt ( mimeBoundaryChars . length ) ] ) ; } return StringUtil . releaseBuilder ( mime ) ; }
--------------------------------------------------
public String toString ( ) { return queue . substring ( pos ) ; }
--------------------------------------------------
public String toString ( ) { return String . format ( "[%s^=%s]" , key , value ) ; }
--------------------------------------------------
public String toString ( ) { return String . format ( "[%s=%s]" , key , value ) ; }
--------------------------------------------------
public String toString ( ) { return String . format ( "[%s*=%s]" , key , value ) ; }
--------------------------------------------------
public String toString ( ) { return String . format ( "[%s$=%s]" , key , value ) ; }
--------------------------------------------------
public String toString ( ) { return String . format ( "[%s!=%s]" , key , value ) ; }
--------------------------------------------------
public String toString ( ) { return key + "=" + value ; }
--------------------------------------------------
