@ Override void outerHtmlTail ( Appendable accum , int depth , Document . OutputSettings out ) { try { accum . append ( "]]>" ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } }
--------------------------------------------------
public String val ( ) { if ( size ( ) > 0 ) return first ( ) . val ( ) ; else return "" ; }
--------------------------------------------------
public Iterator < Attribute > iterator ( ) { return new Iterator < Attribute > ( ) { int i = 0 ; @ Override public boolean hasNext ( ) { return i < size ; } @ Override public Attribute next ( ) { final Attribute attr = new Attribute ( keys [ i ] , vals [ i ] , Attributes . this ) ; i ++ ; return attr ; } @ Override public void remove ( ) { Attributes . this . remove ( -- i ) ; } } ; }
--------------------------------------------------
public Element val ( String value ) { if ( tagName ( ) . equals ( "textarea" ) ) text ( value ) ; else attr ( "value" , value ) ; return this ; }
--------------------------------------------------
Element pop ( ) { int size = stack . size ( ) ; return stack . remove ( size - 1 ) ; }
--------------------------------------------------
public int hashCode ( ) { final int prime = 31 ; int result = 1 ; result = prime * result + ( ( value == null ) ? 0 : value . hashCode ( ) ) ; return result ; }
--------------------------------------------------
public String val ( ) { if ( tagName ( ) . equals ( "textarea" ) ) return text ( ) ; else return attr ( "value" ) ; }
--------------------------------------------------
public int hashCode ( ) { int result = tagName . hashCode ( ) ; result = 31 * result + ( isBlock ? 1 : 0 ) ; result = 31 * result + ( formatAsBlock ? 1 : 0 ) ; result = 31 * result + ( canContainInline ? 1 : 0 ) ; result = 31 * result + ( empty ? 1 : 0 ) ; result = 31 * result + ( selfClosing ? 1 : 0 ) ; result = 31 * result + ( preserveWhitespace ? 1 : 0 ) ; result = 31 * result + ( formList ? 1 : 0 ) ; result = 31 * result + ( formSubmit ? 1 : 0 ) ; return result ; }
--------------------------------------------------
public String toString ( ) { return pos + ": " + errorMsg ; }
--------------------------------------------------
public Elements val ( String value ) { for ( Element element : this ) element . val ( value ) ; return this ; }
--------------------------------------------------
