static void crossStreams ( final InputStream in , final OutputStream out ) throws IOException { final byte [ ] buffer = new byte [ bufferSize ] ; int len ; while ( ( len = in . read ( buffer ) ) != - 1 ) { out . write ( buffer , 0 , len ) ; } }
--------------------------------------------------
public E set ( int index , E element ) { onContentsChanged ( ) ; return super . set ( index , element ) ; }
--------------------------------------------------
public void clear ( ) { onContentsChanged ( ) ; super . clear ( ) ; }
--------------------------------------------------
public OutputSettings charset ( String charset ) { charset ( Charset . forName ( charset ) ) ; return this ; }
--------------------------------------------------
public boolean remove ( Object o ) { onContentsChanged ( ) ; return super . remove ( o ) ; }
--------------------------------------------------
static CoreCharset byName ( final String name ) { if ( name . equals ( "us-ascii" ) ) return ascii ; if ( name . startsWith ( "utf-" ) ) return utf ; return fallback ; }
--------------------------------------------------
public String toString ( ) { return super . toString ( ) + ". mimetype=" + mimeType + ", url=" + url ; }
--------------------------------------------------
public DocumentType ( String name , String publicId , String systemId , String baseUri ) { attr ( NAME , name ) ; attr ( PUBLIC_ID , publicId ) ; if ( has ( PUBLIC_ID ) ) { attr ( PUB_SYS_KEY , PUBLIC_KEY ) ; } attr ( SYSTEM_ID , systemId ) ; }
--------------------------------------------------
public DocumentType ( String name , String pubSysKey , String publicId , String systemId , String baseUri ) { attr ( NAME , name ) ; if ( pubSysKey != null ) { attr ( PUB_SYS_KEY , pubSysKey ) ; } attr ( PUBLIC_ID , publicId ) ; attr ( SYSTEM_ID , systemId ) ; }
--------------------------------------------------
public static int codepointsForName ( final String name , final int [ ] codepoints ) { String val = multipoints . get ( name ) ; if ( val != null ) { codepoints [ 0 ] = val . codePointAt ( 0 ) ; codepoints [ 1 ] = val . codePointAt ( 1 ) ; return 2 ; } int codepoint = extended . codepointForName ( name ) ; if ( codepoint != empty ) { codepoints [ 0 ] = codepoint ; return 1 ; } return 0 ; }
--------------------------------------------------
