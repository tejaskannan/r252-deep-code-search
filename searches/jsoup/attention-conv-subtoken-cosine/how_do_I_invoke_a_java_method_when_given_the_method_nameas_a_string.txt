public String chompTo ( String seq ) { String data = consumeTo ( seq ) ; matchChomp ( seq ) ; return data ; }
--------------------------------------------------
void popStackToClose ( String ... elNames ) { for ( int pos = stack . size ( ) - 1 ; pos >= 0 ; pos -- ) { Element next = stack . get ( pos ) ; stack . remove ( pos ) ; if ( inSorted ( next . normalName ( ) , elNames ) ) break ; } }
--------------------------------------------------
public String toString ( ) { return super . toString ( ) + ". mimetype=" + mimeType + ", url=" + url ; }
--------------------------------------------------
public String toString ( ) { return getData ( ) ; }
--------------------------------------------------
public String toString ( ) { return "<!--" + getData ( ) + "-->" ; }
--------------------------------------------------
public String toString ( ) { return "<![cdata[" + getData ( ) + "]]>" ; }
--------------------------------------------------
public int hashCode ( ) { int result = size ; result = 31 * result + Arrays . hashCode ( keys ) ; result = 31 * result + Arrays . hashCode ( vals ) ; return result ; }
--------------------------------------------------
public boolean hasHeader ( String name ) { Validate . notEmpty ( name , "header name must not be empty" ) ; return getHeadersCaseInsensitive ( name ) . size ( ) != 0 ; }
--------------------------------------------------
public String toString ( ) { return queue . substring ( pos ) ; }
--------------------------------------------------
void emit ( Token token ) { Validate . isFalse ( isEmitPending , "there is an unread token pending!" ) ; emitPending = token ; isEmitPending = true ; if ( token . type == Token . TokenType . StartTag ) { Token . StartTag startTag = ( Token . StartTag ) token ; lastStartTag = startTag . tagName ; } else if ( token . type == Token . TokenType . EndTag ) { Token . EndTag endTag = ( Token . EndTag ) token ; if ( endTag . attributes != null ) error ( "attributes incorrectly present on end tag" ) ; } }
--------------------------------------------------
