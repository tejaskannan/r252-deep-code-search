boolean matchesIgnoreCase ( String seq ) { bufferUp ( ) ; int scanLength = seq . length ( ) ; if ( scanLength > bufLength - bufPos ) return false ; for ( int offset = 0 ; offset < scanLength ; offset ++ ) { char upScan = Character . toUpperCase ( seq . charAt ( offset ) ) ; char upTarget = Character . toUpperCase ( charBuf [ bufPos + offset ] ) ; if ( upScan != upTarget ) return false ; } return true ; }
--------------------------------------------------
boolean matchesAnySorted ( char [ ] seq ) { bufferUp ( ) ; return ! isEmpty ( ) && Arrays . binarySearch ( seq , charBuf [ bufPos ] ) >= 0 ; }
--------------------------------------------------
public Element prependElement ( String tagName ) { Element child = new Element ( Tag . valueOf ( tagName , NodeUtils . parser ( this ) . settings ( ) ) , baseUri ( ) ) ; prependChild ( child ) ; return child ; }
--------------------------------------------------
public static Attribute createFromEncoded ( String unencodedKey , String encodedValue ) { String value = Entities . unescape ( encodedValue , true ) ; return new Attribute ( unencodedKey , value , null ) ; }
--------------------------------------------------
private ElementMeta createSafeElement ( Element sourceEl ) { String sourceTag = sourceEl . tagName ( ) ; Attributes destAttrs = new Attributes ( ) ; Element dest = new Element ( Tag . valueOf ( sourceTag ) , sourceEl . baseUri ( ) , destAttrs ) ; int numDiscarded = 0 ; Attributes sourceAttrs = sourceEl . attributes ( ) ; for ( Attribute sourceAttr : sourceAttrs ) { if ( whitelist . isSafeAttribute ( sourceTag , sourceEl , sourceAttr ) ) destAttrs . put ( sourceAttr ) ; else numDiscarded ++ ; } Attributes enforcedAttrs = whitelist . getEnforcedAttributes ( sourceTag ) ; destAttrs . addAll ( enforcedAttrs ) ; return new ElementMeta ( dest , numDiscarded ) ; }
--------------------------------------------------
private static LinkedHashMap < String , List < String >> createHeaderMap ( HttpURLConnection conn ) { final LinkedHashMap < String , List < String >> headers = new LinkedHashMap < > ( ) ; int i = 0 ; while ( true ) { final String key = conn . getHeaderFieldKey ( i ) ; final String val = conn . getHeaderField ( i ) ; if ( key == null && val == null ) break ; i ++ ; if ( key == null || val == null ) continue ; if ( headers . containsKey ( key ) ) headers . get ( key ) . add ( val ) ; else { final ArrayList < String > vals = new ArrayList < > ( ) ; vals . add ( val ) ; headers . put ( key , vals ) ; } } return headers ; }
--------------------------------------------------
boolean matchesAny ( char ... seq ) { if ( isEmpty ( ) ) return false ; bufferUp ( ) ; char c = charBuf [ bufPos ] ; for ( char seek : seq ) { if ( seek == c ) return true ; } return false ; }
--------------------------------------------------
static String mimeBoundary ( ) { final StringBuilder mime = StringUtil . borrowBuilder ( ) ; final Random rand = new Random ( ) ; for ( int i = 0 ; i < boundaryLength ; i ++ ) { mime . append ( mimeBoundaryChars [ rand . nextInt ( mimeBoundaryChars . length ) ] ) ; } return StringUtil . releaseBuilder ( mime ) ; }
--------------------------------------------------
public UnsupportedMimeTypeException ( String message , String mimeType , String url ) { super ( message ) ; this . mimeType = mimeType ; this . url = url ; }
--------------------------------------------------
public static TextNode createFromEncoded ( String encodedText , String baseUri ) { String text = Entities . unescape ( encodedText ) ; return new TextNode ( text ) ; }
--------------------------------------------------
